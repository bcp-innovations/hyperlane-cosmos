// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/core/post_dispatch/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryIgpsRequest ...
type QueryIgpsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIgpsRequest) Reset()         { *m = QueryIgpsRequest{} }
func (m *QueryIgpsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIgpsRequest) ProtoMessage()    {}
func (*QueryIgpsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{0}
}
func (m *QueryIgpsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpsRequest.Merge(m, src)
}
func (m *QueryIgpsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpsRequest proto.InternalMessageInfo

func (m *QueryIgpsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIgpsResponse ...
type QueryIgpsResponse struct {
	Igps []InterchainGasPaymaster `protobuf:"bytes,1,rep,name=igps,proto3" json:"igps"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIgpsResponse) Reset()         { *m = QueryIgpsResponse{} }
func (m *QueryIgpsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIgpsResponse) ProtoMessage()    {}
func (*QueryIgpsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{1}
}
func (m *QueryIgpsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpsResponse.Merge(m, src)
}
func (m *QueryIgpsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpsResponse proto.InternalMessageInfo

func (m *QueryIgpsResponse) GetIgps() []InterchainGasPaymaster {
	if m != nil {
		return m.Igps
	}
	return nil
}

func (m *QueryIgpsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIgpRequest ...
type QueryIgpRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryIgpRequest) Reset()         { *m = QueryIgpRequest{} }
func (m *QueryIgpRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIgpRequest) ProtoMessage()    {}
func (*QueryIgpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{2}
}
func (m *QueryIgpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpRequest.Merge(m, src)
}
func (m *QueryIgpRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpRequest proto.InternalMessageInfo

func (m *QueryIgpRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryIgpResponse ...
type QueryIgpResponse struct {
	Igp InterchainGasPaymaster `protobuf:"bytes,1,opt,name=igp,proto3" json:"igp"`
}

func (m *QueryIgpResponse) Reset()         { *m = QueryIgpResponse{} }
func (m *QueryIgpResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIgpResponse) ProtoMessage()    {}
func (*QueryIgpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{3}
}
func (m *QueryIgpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpResponse.Merge(m, src)
}
func (m *QueryIgpResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpResponse proto.InternalMessageInfo

func (m *QueryIgpResponse) GetIgp() InterchainGasPaymaster {
	if m != nil {
		return m.Igp
	}
	return InterchainGasPaymaster{}
}

// QueryDestinationGasConfigsRequest ...
type QueryDestinationGasConfigsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDestinationGasConfigsRequest) Reset()         { *m = QueryDestinationGasConfigsRequest{} }
func (m *QueryDestinationGasConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDestinationGasConfigsRequest) ProtoMessage()    {}
func (*QueryDestinationGasConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{4}
}
func (m *QueryDestinationGasConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDestinationGasConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDestinationGasConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDestinationGasConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDestinationGasConfigsRequest.Merge(m, src)
}
func (m *QueryDestinationGasConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDestinationGasConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDestinationGasConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDestinationGasConfigsRequest proto.InternalMessageInfo

func (m *QueryDestinationGasConfigsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryDestinationGasConfigsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDestinationGasConfigsResponse ...
type QueryDestinationGasConfigsResponse struct {
	DestinationGasConfigs []*DestinationGasConfig `protobuf:"bytes,1,rep,name=destination_gas_configs,json=destinationGasConfigs,proto3" json:"destination_gas_configs,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDestinationGasConfigsResponse) Reset()         { *m = QueryDestinationGasConfigsResponse{} }
func (m *QueryDestinationGasConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDestinationGasConfigsResponse) ProtoMessage()    {}
func (*QueryDestinationGasConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{5}
}
func (m *QueryDestinationGasConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDestinationGasConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDestinationGasConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDestinationGasConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDestinationGasConfigsResponse.Merge(m, src)
}
func (m *QueryDestinationGasConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDestinationGasConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDestinationGasConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDestinationGasConfigsResponse proto.InternalMessageInfo

func (m *QueryDestinationGasConfigsResponse) GetDestinationGasConfigs() []*DestinationGasConfig {
	if m != nil {
		return m.DestinationGasConfigs
	}
	return nil
}

func (m *QueryDestinationGasConfigsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryQuoteGasPaymentRequest ...
type QueryQuoteGasPaymentRequest struct {
	IgpId             string `protobuf:"bytes,1,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	DestinationDomain string `protobuf:"bytes,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	GasLimit          string `protobuf:"bytes,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *QueryQuoteGasPaymentRequest) Reset()         { *m = QueryQuoteGasPaymentRequest{} }
func (m *QueryQuoteGasPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteGasPaymentRequest) ProtoMessage()    {}
func (*QueryQuoteGasPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{6}
}
func (m *QueryQuoteGasPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteGasPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteGasPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteGasPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteGasPaymentRequest.Merge(m, src)
}
func (m *QueryQuoteGasPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteGasPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteGasPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteGasPaymentRequest proto.InternalMessageInfo

func (m *QueryQuoteGasPaymentRequest) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *QueryQuoteGasPaymentRequest) GetDestinationDomain() string {
	if m != nil {
		return m.DestinationDomain
	}
	return ""
}

func (m *QueryQuoteGasPaymentRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

// QueryQuoteGasPaymentResponse ...
type QueryQuoteGasPaymentResponse struct {
	GasPayment github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=gas_payment,json=gasPayment,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"gas_payment"`
}

func (m *QueryQuoteGasPaymentResponse) Reset()         { *m = QueryQuoteGasPaymentResponse{} }
func (m *QueryQuoteGasPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteGasPaymentResponse) ProtoMessage()    {}
func (*QueryQuoteGasPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{7}
}
func (m *QueryQuoteGasPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteGasPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteGasPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteGasPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteGasPaymentResponse.Merge(m, src)
}
func (m *QueryQuoteGasPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteGasPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteGasPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteGasPaymentResponse proto.InternalMessageInfo

func (m *QueryQuoteGasPaymentResponse) GetGasPayment() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.GasPayment
	}
	return nil
}

// QueryCountRequest ...
type QueryMerkleTreeHooks struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMerkleTreeHooks) Reset()         { *m = QueryMerkleTreeHooks{} }
func (m *QueryMerkleTreeHooks) String() string { return proto.CompactTextString(m) }
func (*QueryMerkleTreeHooks) ProtoMessage()    {}
func (*QueryMerkleTreeHooks) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{8}
}
func (m *QueryMerkleTreeHooks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkleTreeHooks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkleTreeHooks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkleTreeHooks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkleTreeHooks.Merge(m, src)
}
func (m *QueryMerkleTreeHooks) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkleTreeHooks) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkleTreeHooks.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkleTreeHooks proto.InternalMessageInfo

func (m *QueryMerkleTreeHooks) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryMerkleTreeHooksResponse ...
type QueryMerkleTreeHooksResponse struct {
	MerkleTreeHooks []WrappedMerkleTreeHookResponse `protobuf:"bytes,1,rep,name=merkle_tree_hooks,json=merkleTreeHooks,proto3" json:"merkle_tree_hooks"`
	Pagination      *query.PageResponse             `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMerkleTreeHooksResponse) Reset()         { *m = QueryMerkleTreeHooksResponse{} }
func (m *QueryMerkleTreeHooksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMerkleTreeHooksResponse) ProtoMessage()    {}
func (*QueryMerkleTreeHooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{9}
}
func (m *QueryMerkleTreeHooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkleTreeHooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkleTreeHooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkleTreeHooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkleTreeHooksResponse.Merge(m, src)
}
func (m *QueryMerkleTreeHooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkleTreeHooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkleTreeHooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkleTreeHooksResponse proto.InternalMessageInfo

func (m *QueryMerkleTreeHooksResponse) GetMerkleTreeHooks() []WrappedMerkleTreeHookResponse {
	if m != nil {
		return m.MerkleTreeHooks
	}
	return nil
}

func (m *QueryMerkleTreeHooksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryMerkleTreeHook ...
type QueryMerkleTreeHook struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMerkleTreeHook) Reset()         { *m = QueryMerkleTreeHook{} }
func (m *QueryMerkleTreeHook) String() string { return proto.CompactTextString(m) }
func (*QueryMerkleTreeHook) ProtoMessage()    {}
func (*QueryMerkleTreeHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{10}
}
func (m *QueryMerkleTreeHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkleTreeHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkleTreeHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkleTreeHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkleTreeHook.Merge(m, src)
}
func (m *QueryMerkleTreeHook) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkleTreeHook) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkleTreeHook.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkleTreeHook proto.InternalMessageInfo

func (m *QueryMerkleTreeHook) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryMerkleTreeHookResponse
type QueryMerkleTreeHookResponse struct {
	MerkleTreeHook WrappedMerkleTreeHookResponse `protobuf:"bytes,1,opt,name=merkle_tree_hook,json=merkleTreeHook,proto3" json:"merkle_tree_hook"`
}

func (m *QueryMerkleTreeHookResponse) Reset()         { *m = QueryMerkleTreeHookResponse{} }
func (m *QueryMerkleTreeHookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMerkleTreeHookResponse) ProtoMessage()    {}
func (*QueryMerkleTreeHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{11}
}
func (m *QueryMerkleTreeHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkleTreeHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkleTreeHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkleTreeHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkleTreeHookResponse.Merge(m, src)
}
func (m *QueryMerkleTreeHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkleTreeHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkleTreeHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkleTreeHookResponse proto.InternalMessageInfo

func (m *QueryMerkleTreeHookResponse) GetMerkleTreeHook() WrappedMerkleTreeHookResponse {
	if m != nil {
		return m.MerkleTreeHook
	}
	return WrappedMerkleTreeHookResponse{}
}

// WrappedMerkleTreeHookResponse
type WrappedMerkleTreeHookResponse struct {
	Id         string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner      string        `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	MailboxId  string        `protobuf:"bytes,3,opt,name=mailbox_id,json=mailboxId,proto3" json:"mailbox_id,omitempty"`
	MerkleTree *TreeResponse `protobuf:"bytes,4,opt,name=merkle_tree,json=merkleTree,proto3" json:"merkle_tree,omitempty"`
}

func (m *WrappedMerkleTreeHookResponse) Reset()         { *m = WrappedMerkleTreeHookResponse{} }
func (m *WrappedMerkleTreeHookResponse) String() string { return proto.CompactTextString(m) }
func (*WrappedMerkleTreeHookResponse) ProtoMessage()    {}
func (*WrappedMerkleTreeHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{12}
}
func (m *WrappedMerkleTreeHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedMerkleTreeHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedMerkleTreeHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedMerkleTreeHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedMerkleTreeHookResponse.Merge(m, src)
}
func (m *WrappedMerkleTreeHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *WrappedMerkleTreeHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedMerkleTreeHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedMerkleTreeHookResponse proto.InternalMessageInfo

func (m *WrappedMerkleTreeHookResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WrappedMerkleTreeHookResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *WrappedMerkleTreeHookResponse) GetMailboxId() string {
	if m != nil {
		return m.MailboxId
	}
	return ""
}

func (m *WrappedMerkleTreeHookResponse) GetMerkleTree() *TreeResponse {
	if m != nil {
		return m.MerkleTree
	}
	return nil
}

// TreeResponse
type TreeResponse struct {
	// leafs ...
	Leafs [][]byte `protobuf:"bytes,1,rep,name=leafs,proto3" json:"leafs,omitempty"`
	// count ...
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// root ...
	Root []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *TreeResponse) Reset()         { *m = TreeResponse{} }
func (m *TreeResponse) String() string { return proto.CompactTextString(m) }
func (*TreeResponse) ProtoMessage()    {}
func (*TreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{13}
}
func (m *TreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeResponse.Merge(m, src)
}
func (m *TreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *TreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TreeResponse proto.InternalMessageInfo

func (m *TreeResponse) GetLeafs() [][]byte {
	if m != nil {
		return m.Leafs
	}
	return nil
}

func (m *TreeResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TreeResponse) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

// QueryNoopHookRequest ...
type QueryNoopHookRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryNoopHookRequest) Reset()         { *m = QueryNoopHookRequest{} }
func (m *QueryNoopHookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNoopHookRequest) ProtoMessage()    {}
func (*QueryNoopHookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{14}
}
func (m *QueryNoopHookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNoopHookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNoopHookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNoopHookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNoopHookRequest.Merge(m, src)
}
func (m *QueryNoopHookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNoopHookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNoopHookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNoopHookRequest proto.InternalMessageInfo

func (m *QueryNoopHookRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryNoopHookResponse ...
type QueryNoopHookResponse struct {
	NoopHook *NoopHook `protobuf:"bytes,1,opt,name=noop_hook,json=noopHook,proto3" json:"noop_hook,omitempty"`
}

func (m *QueryNoopHookResponse) Reset()         { *m = QueryNoopHookResponse{} }
func (m *QueryNoopHookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNoopHookResponse) ProtoMessage()    {}
func (*QueryNoopHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{15}
}
func (m *QueryNoopHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNoopHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNoopHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNoopHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNoopHookResponse.Merge(m, src)
}
func (m *QueryNoopHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNoopHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNoopHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNoopHookResponse proto.InternalMessageInfo

func (m *QueryNoopHookResponse) GetNoopHook() *NoopHook {
	if m != nil {
		return m.NoopHook
	}
	return nil
}

// QueryNoopHooksRequest ...
type QueryNoopHooksRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNoopHooksRequest) Reset()         { *m = QueryNoopHooksRequest{} }
func (m *QueryNoopHooksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNoopHooksRequest) ProtoMessage()    {}
func (*QueryNoopHooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{16}
}
func (m *QueryNoopHooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNoopHooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNoopHooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNoopHooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNoopHooksRequest.Merge(m, src)
}
func (m *QueryNoopHooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNoopHooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNoopHooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNoopHooksRequest proto.InternalMessageInfo

func (m *QueryNoopHooksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryNoopHooksResponse ...
type QueryNoopHooksResponse struct {
	NoopHooks  []NoopHook          `protobuf:"bytes,1,rep,name=noop_hooks,json=noopHooks,proto3" json:"noop_hooks"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNoopHooksResponse) Reset()         { *m = QueryNoopHooksResponse{} }
func (m *QueryNoopHooksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNoopHooksResponse) ProtoMessage()    {}
func (*QueryNoopHooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5ceb03adb8f60, []int{17}
}
func (m *QueryNoopHooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNoopHooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNoopHooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNoopHooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNoopHooksResponse.Merge(m, src)
}
func (m *QueryNoopHooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNoopHooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNoopHooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNoopHooksResponse proto.InternalMessageInfo

func (m *QueryNoopHooksResponse) GetNoopHooks() []NoopHook {
	if m != nil {
		return m.NoopHooks
	}
	return nil
}

func (m *QueryNoopHooksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryIgpsRequest)(nil), "hyperlane.core.post_dispatch.v1.QueryIgpsRequest")
	proto.RegisterType((*QueryIgpsResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryIgpsResponse")
	proto.RegisterType((*QueryIgpRequest)(nil), "hyperlane.core.post_dispatch.v1.QueryIgpRequest")
	proto.RegisterType((*QueryIgpResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryIgpResponse")
	proto.RegisterType((*QueryDestinationGasConfigsRequest)(nil), "hyperlane.core.post_dispatch.v1.QueryDestinationGasConfigsRequest")
	proto.RegisterType((*QueryDestinationGasConfigsResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryDestinationGasConfigsResponse")
	proto.RegisterType((*QueryQuoteGasPaymentRequest)(nil), "hyperlane.core.post_dispatch.v1.QueryQuoteGasPaymentRequest")
	proto.RegisterType((*QueryQuoteGasPaymentResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryQuoteGasPaymentResponse")
	proto.RegisterType((*QueryMerkleTreeHooks)(nil), "hyperlane.core.post_dispatch.v1.QueryMerkleTreeHooks")
	proto.RegisterType((*QueryMerkleTreeHooksResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryMerkleTreeHooksResponse")
	proto.RegisterType((*QueryMerkleTreeHook)(nil), "hyperlane.core.post_dispatch.v1.QueryMerkleTreeHook")
	proto.RegisterType((*QueryMerkleTreeHookResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryMerkleTreeHookResponse")
	proto.RegisterType((*WrappedMerkleTreeHookResponse)(nil), "hyperlane.core.post_dispatch.v1.WrappedMerkleTreeHookResponse")
	proto.RegisterType((*TreeResponse)(nil), "hyperlane.core.post_dispatch.v1.TreeResponse")
	proto.RegisterType((*QueryNoopHookRequest)(nil), "hyperlane.core.post_dispatch.v1.QueryNoopHookRequest")
	proto.RegisterType((*QueryNoopHookResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryNoopHookResponse")
	proto.RegisterType((*QueryNoopHooksRequest)(nil), "hyperlane.core.post_dispatch.v1.QueryNoopHooksRequest")
	proto.RegisterType((*QueryNoopHooksResponse)(nil), "hyperlane.core.post_dispatch.v1.QueryNoopHooksResponse")
}

func init() {
	proto.RegisterFile("hyperlane/core/post_dispatch/v1/query.proto", fileDescriptor_32e5ceb03adb8f60)
}

var fileDescriptor_32e5ceb03adb8f60 = []byte{
	// 1142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x49, 0x5a, 0xc5, 0x2f, 0x21, 0x69, 0x86, 0x84, 0xa6, 0x6e, 0x63, 0x27, 0x2b,
	0x9a, 0x86, 0x82, 0x77, 0xeb, 0x40, 0x9a, 0x4b, 0xe1, 0x90, 0x54, 0x0d, 0x96, 0x20, 0x6a, 0x4d,
	0x05, 0x52, 0x0f, 0x58, 0x63, 0xef, 0x74, 0x3d, 0x8a, 0xbd, 0x33, 0xd9, 0x59, 0x87, 0x46, 0x55,
	0x25, 0xc4, 0x0d, 0x71, 0xe1, 0xc7, 0x1d, 0x71, 0x44, 0x9c, 0x2a, 0x84, 0xf8, 0x0f, 0x90, 0x7a,
	0xac, 0xc4, 0x05, 0x24, 0x54, 0x50, 0x82, 0xc4, 0x99, 0xff, 0x00, 0xed, 0xcc, 0xac, 0xbd, 0xbb,
	0xb1, 0x63, 0x27, 0xf8, 0x92, 0x78, 0x77, 0xe6, 0xbd, 0xf7, 0xf9, 0xbe, 0xf9, 0xf1, 0xde, 0xc2,
	0xeb, 0xf5, 0x03, 0x4e, 0xfc, 0x06, 0xf6, 0x88, 0x5d, 0x63, 0x3e, 0xb1, 0x39, 0x13, 0x41, 0xc5,
	0xa1, 0x82, 0xe3, 0xa0, 0x56, 0xb7, 0xf7, 0x8b, 0xf6, 0x5e, 0x8b, 0xf8, 0x07, 0x16, 0xf7, 0x59,
	0xc0, 0x50, 0xbe, 0x3d, 0xd9, 0x0a, 0x27, 0x5b, 0x89, 0xc9, 0xd6, 0x7e, 0x31, 0x7b, 0xbd, 0xc6,
	0x44, 0x93, 0x09, 0xbb, 0x8a, 0x05, 0x51, 0x96, 0xf6, 0x7e, 0xb1, 0x4a, 0x02, 0x5c, 0xb4, 0x39,
	0x76, 0xa9, 0x87, 0x03, 0xca, 0x3c, 0xe5, 0x2c, 0x7b, 0xc5, 0x65, 0xcc, 0x6d, 0x10, 0x1b, 0x73,
	0x6a, 0x63, 0xcf, 0x63, 0x81, 0x1c, 0x14, 0x7a, 0x74, 0x16, 0x37, 0xa9, 0xc7, 0x6c, 0xf9, 0x57,
	0xbf, 0x9a, 0x73, 0x99, 0xcb, 0xe4, 0x4f, 0x3b, 0xfc, 0xa5, 0xdf, 0xf6, 0x15, 0x10, 0x1c, 0x70,
	0x12, 0x79, 0xcd, 0xc5, 0xf9, 0x22, 0xb2, 0x1a, 0xa3, 0x9a, 0xc9, 0x7c, 0x00, 0x17, 0xee, 0x85,
	0xd4, 0x25, 0x97, 0x8b, 0x32, 0xd9, 0x6b, 0x11, 0x11, 0xa0, 0x3b, 0x00, 0x1d, 0xf6, 0x05, 0x63,
	0xc9, 0x58, 0x9d, 0x5c, 0x5b, 0xb1, 0x94, 0x23, 0x2b, 0x74, 0x64, 0xa9, 0x14, 0x69, 0x77, 0xd6,
	0x5d, 0xec, 0x12, 0x6d, 0x5b, 0x8e, 0x59, 0x9a, 0x3f, 0x19, 0x30, 0x1b, 0x73, 0x2e, 0x38, 0xf3,
	0x04, 0x41, 0x1f, 0xc2, 0x38, 0x75, 0xb9, 0x58, 0x30, 0x96, 0xc6, 0x56, 0x27, 0xd7, 0x36, 0xac,
	0x3e, 0x19, 0xb6, 0x4a, 0x5e, 0x40, 0xfc, 0x5a, 0x1d, 0x53, 0x6f, 0x1b, 0x8b, 0xbb, 0xf8, 0xa0,
	0x89, 0x45, 0x40, 0xfc, 0xcd, 0xcc, 0xb3, 0x17, 0xf9, 0x91, 0xef, 0xff, 0x79, 0x7a, 0xdd, 0x28,
	0x4b, 0x7f, 0x68, 0x3b, 0x41, 0x3d, 0x2a, 0xa9, 0xaf, 0xf5, 0xa5, 0x56, 0x50, 0x09, 0xec, 0x65,
	0x98, 0x89, 0xa8, 0xa3, 0x8c, 0x4c, 0xc3, 0x28, 0x75, 0x64, 0x26, 0x32, 0xe5, 0x51, 0xea, 0x98,
	0xf5, 0x4e, 0xd6, 0xda, 0xba, 0xee, 0xc3, 0x18, 0x75, 0xb9, 0x4e, 0xd7, 0x30, 0x64, 0x85, 0xee,
	0xcc, 0xc7, 0xb0, 0x2c, 0x23, 0xdd, 0x26, 0x22, 0xd0, 0x80, 0xdb, 0x58, 0x6c, 0x31, 0xef, 0x21,
	0x75, 0x45, 0x0f, 0xbc, 0xd4, 0x02, 0x8e, 0x9e, 0x79, 0x01, 0xff, 0x30, 0xc0, 0x3c, 0x29, 0xba,
	0x56, 0xde, 0x84, 0x8b, 0x4e, 0x67, 0x42, 0xc5, 0xc5, 0xa2, 0x52, 0x53, 0x53, 0xf4, 0x22, 0xaf,
	0xf7, 0xcd, 0x46, 0xb7, 0x00, 0xe5, 0x79, 0xa7, 0x5b, 0xd8, 0xe1, 0x2d, 0xf4, 0xa7, 0x06, 0x5c,
	0x96, 0xf2, 0xee, 0xb5, 0x58, 0x40, 0xf4, 0x32, 0x10, 0x2f, 0x88, 0xd2, 0x3a, 0x0f, 0xe7, 0xa9,
	0xcb, 0x2b, 0xed, 0xd4, 0x9e, 0xa3, 0x2e, 0x2f, 0x39, 0xa8, 0x00, 0x28, 0x2e, 0xd7, 0x61, 0x4d,
	0x4c, 0x15, 0x47, 0xa6, 0x3c, 0x1b, 0x1b, 0xb9, 0x2d, 0x07, 0xd0, 0x65, 0xc8, 0x84, 0x19, 0x69,
	0xd0, 0x26, 0x0d, 0x16, 0xc6, 0xe4, 0xac, 0x09, 0x17, 0x8b, 0xf7, 0xc2, 0x67, 0xf3, 0x2b, 0x03,
	0xae, 0x74, 0x47, 0xd0, 0xb9, 0xdd, 0x83, 0xc9, 0xd0, 0x9a, 0xab, 0xd7, 0x3a, 0x9f, 0x97, 0x12,
	0x6a, 0x23, 0x9d, 0x5b, 0x8c, 0x7a, 0x9b, 0xeb, 0xe1, 0xfe, 0xf9, 0xe1, 0xcf, 0xfc, 0xaa, 0x4b,
	0x83, 0x7a, 0xab, 0x6a, 0xd5, 0x58, 0xd3, 0xd6, 0x57, 0x80, 0xfa, 0x57, 0x10, 0xce, 0xae, 0xbe,
	0x21, 0x42, 0x03, 0xa1, 0xf6, 0x1a, 0xb8, 0xed, 0xd0, 0xe6, 0xc7, 0x30, 0x27, 0x91, 0xde, 0x27,
	0xfe, 0x6e, 0x83, 0xdc, 0xf7, 0x09, 0x79, 0x97, 0xb1, 0x5d, 0x31, 0xb4, 0x6b, 0xe1, 0x45, 0xa4,
	0x39, 0x15, 0xa0, 0xad, 0xb9, 0x05, 0xb3, 0x4d, 0x39, 0x54, 0x09, 0x7c, 0x42, 0x2a, 0xf5, 0x70,
	0x50, 0x2b, 0x7f, 0xa7, 0xef, 0x4e, 0xfa, 0xc8, 0xc7, 0x9c, 0x13, 0x27, 0xe9, 0x3b, 0x72, 0x1d,
	0x3f, 0x5e, 0x33, 0xcd, 0x94, 0xbe, 0xa1, 0xed, 0xab, 0xab, 0xf0, 0x72, 0x17, 0x7d, 0xc7, 0x2e,
	0x91, 0xaf, 0xa3, 0xed, 0xd7, 0x9d, 0x15, 0x09, 0xb8, 0x90, 0x4e, 0x83, 0xce, 0xfa, 0x10, 0xb3,
	0x30, 0x9d, 0xcc, 0x42, 0x78, 0x67, 0x2f, 0x9e, 0x68, 0x7c, 0xec, 0xb2, 0x99, 0x83, 0x73, 0xec,
	0x13, 0x8f, 0xf8, 0xfa, 0x04, 0xa8, 0x07, 0xb4, 0x08, 0xd0, 0xc4, 0xb4, 0x51, 0x65, 0x8f, 0xc2,
	0xf3, 0xa3, 0xb6, 0x7d, 0x46, 0xbf, 0x29, 0x39, 0x68, 0x07, 0x26, 0x63, 0xda, 0x16, 0xc6, 0xa5,
	0xac, 0x42, 0x5f, 0x59, 0x21, 0x4c, 0x27, 0xe5, 0x1d, 0x74, 0x73, 0x07, 0xa6, 0xe2, 0x63, 0x21,
	0x54, 0x83, 0xe0, 0x87, 0x6a, 0xdb, 0x4c, 0x95, 0xd5, 0x43, 0xf8, 0xb6, 0xc6, 0x5a, 0x5e, 0x20,
	0x51, 0x5f, 0x2a, 0xab, 0x07, 0x84, 0x60, 0xdc, 0x67, 0x4c, 0x9d, 0xcd, 0xa9, 0xb2, 0xfc, 0x6d,
	0xae, 0xe8, 0x33, 0xb0, 0xc3, 0x18, 0x57, 0xea, 0xbb, 0x17, 0x82, 0x0a, 0xcc, 0xa7, 0xe6, 0x69,
	0x80, 0x3b, 0x90, 0xf1, 0x18, 0xe3, 0xf1, 0x55, 0x7b, 0xad, 0xaf, 0xbc, 0xb6, 0x97, 0x09, 0x4f,
	0xff, 0x3a, 0x16, 0x60, 0xe8, 0x45, 0xfa, 0x67, 0x03, 0x5e, 0x49, 0x47, 0xd0, 0x1a, 0x3e, 0x00,
	0x68, 0x6b, 0x88, 0x0e, 0xe0, 0xe0, 0x22, 0xe2, 0xbb, 0x2c, 0x13, 0xe9, 0x19, 0xde, 0x29, 0x5b,
	0xfb, 0x17, 0xe0, 0x9c, 0x04, 0x47, 0x9f, 0x1b, 0x30, 0x1e, 0xb6, 0x18, 0xa8, 0xd8, 0x17, 0x2e,
	0xdd, 0xeb, 0x64, 0xd7, 0x4e, 0x63, 0xa2, 0x28, 0xcc, 0xec, 0x67, 0xbf, 0xfe, 0xfd, 0xcd, 0xe8,
	0x1c, 0x42, 0x76, 0xa7, 0x13, 0xdb, 0x2f, 0xda, 0xb2, 0x0b, 0xf9, 0xc2, 0x80, 0xb1, 0x92, 0xcb,
	0xd1, 0x8d, 0x81, 0xfd, 0x46, 0x24, 0xc5, 0x53, 0x58, 0x68, 0x90, 0xbc, 0x04, 0xb9, 0x84, 0x2e,
	0x1e, 0x07, 0xb1, 0x1f, 0x53, 0xe7, 0x09, 0xfa, 0xdd, 0x80, 0xf9, 0xae, 0xb5, 0x1b, 0x6d, 0x0e,
	0x16, 0xed, 0xa4, 0xb6, 0x23, 0xbb, 0xf5, 0xbf, 0x7c, 0x68, 0x0d, 0x1b, 0x52, 0x43, 0x11, 0xd9,
	0x3d, 0x34, 0xd8, 0x3d, 0x5a, 0x0b, 0xf4, 0x8b, 0x11, 0xf6, 0x69, 0x89, 0xaa, 0x89, 0x6e, 0x0d,
	0x46, 0xd4, 0xbd, 0xde, 0x67, 0xdf, 0x3e, 0xa3, 0xb5, 0x56, 0xb2, 0x2e, 0x95, 0xd8, 0xa8, 0xd0,
	0x55, 0x89, 0x6c, 0x24, 0x9e, 0xd8, 0x7b, 0xa1, 0x71, 0x25, 0x56, 0xd2, 0xd1, 0x53, 0x03, 0x66,
	0xd2, 0xa5, 0x76, 0x7d, 0x30, 0x92, 0x94, 0xd9, 0xa0, 0x02, 0x7a, 0xd4, 0x5d, 0xf3, 0x9a, 0x14,
	0xb0, 0x8c, 0xf2, 0x49, 0x01, 0xc7, 0x6a, 0x31, 0xfa, 0xd1, 0x80, 0xe9, 0x54, 0x71, 0x7b, 0xeb,
	0x2c, 0xa1, 0xb3, 0xb7, 0xce, 0x62, 0xd5, 0xe6, 0x7d, 0x43, 0xf2, 0xae, 0xa0, 0x57, 0xfb, 0xf0,
	0xaa, 0xb3, 0xf0, 0xad, 0x01, 0x99, 0xf6, 0x1d, 0x87, 0x6e, 0x0e, 0x16, 0x39, 0x7d, 0xed, 0x66,
	0x37, 0x4e, 0x6d, 0xa7, 0x61, 0x97, 0x24, 0x6c, 0x16, 0x2d, 0x24, 0x61, 0x3b, 0x17, 0x2c, 0xfa,
	0xce, 0x80, 0x89, 0xc8, 0x6e, 0xd0, 0x1d, 0x90, 0xaa, 0x4f, 0xd9, 0x9b, 0xa7, 0x35, 0xd3, 0x74,
	0x57, 0x25, 0x5d, 0x1e, 0x2d, 0xf6, 0xa2, 0x93, 0x39, 0xdc, 0xac, 0x3d, 0x3b, 0xcc, 0x19, 0xcf,
	0x0f, 0x73, 0xc6, 0x5f, 0x87, 0x39, 0xe3, 0xcb, 0xa3, 0xdc, 0xc8, 0xf3, 0xa3, 0xdc, 0xc8, 0x6f,
	0x47, 0xb9, 0x91, 0x07, 0xa5, 0x58, 0xbf, 0x59, 0xad, 0xf1, 0x02, 0xf5, 0x3c, 0xb6, 0xaf, 0xbe,
	0x6f, 0x3b, 0x2e, 0x0b, 0xba, 0x13, 0x7d, 0xa4, 0x3e, 0x5c, 0x6f, 0xac, 0x55, 0x92, 0xdf, 0xae,
	0xb2, 0x2d, 0xad, 0x9e, 0x97, 0x5f, 0xa6, 0x6f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xc8,
	0x15, 0x84, 0xa9, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Igps ...
	Igps(ctx context.Context, in *QueryIgpsRequest, opts ...grpc.CallOption) (*QueryIgpsResponse, error)
	// Igp ...
	Igp(ctx context.Context, in *QueryIgpRequest, opts ...grpc.CallOption) (*QueryIgpResponse, error)
	// DestinationGasConfigs ...
	DestinationGasConfigs(ctx context.Context, in *QueryDestinationGasConfigsRequest, opts ...grpc.CallOption) (*QueryDestinationGasConfigsResponse, error)
	// QuoteGasPayment ...
	QuoteGasPayment(ctx context.Context, in *QueryQuoteGasPaymentRequest, opts ...grpc.CallOption) (*QueryQuoteGasPaymentResponse, error)
	// MerkleTreeHook ...
	MerkleTreeHooks(ctx context.Context, in *QueryMerkleTreeHooks, opts ...grpc.CallOption) (*QueryMerkleTreeHooksResponse, error)
	// MerkleTreeHook ...
	MerkleTreeHook(ctx context.Context, in *QueryMerkleTreeHook, opts ...grpc.CallOption) (*QueryMerkleTreeHookResponse, error)
	// NoopHooks ...
	NoopHooks(ctx context.Context, in *QueryNoopHooksRequest, opts ...grpc.CallOption) (*QueryNoopHooksResponse, error)
	// NoopHook ...
	NoopHook(ctx context.Context, in *QueryNoopHookRequest, opts ...grpc.CallOption) (*QueryNoopHookResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Igps(ctx context.Context, in *QueryIgpsRequest, opts ...grpc.CallOption) (*QueryIgpsResponse, error) {
	out := new(QueryIgpsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/Igps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Igp(ctx context.Context, in *QueryIgpRequest, opts ...grpc.CallOption) (*QueryIgpResponse, error) {
	out := new(QueryIgpResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/Igp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DestinationGasConfigs(ctx context.Context, in *QueryDestinationGasConfigsRequest, opts ...grpc.CallOption) (*QueryDestinationGasConfigsResponse, error) {
	out := new(QueryDestinationGasConfigsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/DestinationGasConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteGasPayment(ctx context.Context, in *QueryQuoteGasPaymentRequest, opts ...grpc.CallOption) (*QueryQuoteGasPaymentResponse, error) {
	out := new(QueryQuoteGasPaymentResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/QuoteGasPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MerkleTreeHooks(ctx context.Context, in *QueryMerkleTreeHooks, opts ...grpc.CallOption) (*QueryMerkleTreeHooksResponse, error) {
	out := new(QueryMerkleTreeHooksResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/MerkleTreeHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MerkleTreeHook(ctx context.Context, in *QueryMerkleTreeHook, opts ...grpc.CallOption) (*QueryMerkleTreeHookResponse, error) {
	out := new(QueryMerkleTreeHookResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/MerkleTreeHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NoopHooks(ctx context.Context, in *QueryNoopHooksRequest, opts ...grpc.CallOption) (*QueryNoopHooksResponse, error) {
	out := new(QueryNoopHooksResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/NoopHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NoopHook(ctx context.Context, in *QueryNoopHookRequest, opts ...grpc.CallOption) (*QueryNoopHookResponse, error) {
	out := new(QueryNoopHookResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Query/NoopHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Igps ...
	Igps(context.Context, *QueryIgpsRequest) (*QueryIgpsResponse, error)
	// Igp ...
	Igp(context.Context, *QueryIgpRequest) (*QueryIgpResponse, error)
	// DestinationGasConfigs ...
	DestinationGasConfigs(context.Context, *QueryDestinationGasConfigsRequest) (*QueryDestinationGasConfigsResponse, error)
	// QuoteGasPayment ...
	QuoteGasPayment(context.Context, *QueryQuoteGasPaymentRequest) (*QueryQuoteGasPaymentResponse, error)
	// MerkleTreeHook ...
	MerkleTreeHooks(context.Context, *QueryMerkleTreeHooks) (*QueryMerkleTreeHooksResponse, error)
	// MerkleTreeHook ...
	MerkleTreeHook(context.Context, *QueryMerkleTreeHook) (*QueryMerkleTreeHookResponse, error)
	// NoopHooks ...
	NoopHooks(context.Context, *QueryNoopHooksRequest) (*QueryNoopHooksResponse, error)
	// NoopHook ...
	NoopHook(context.Context, *QueryNoopHookRequest) (*QueryNoopHookResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Igps(ctx context.Context, req *QueryIgpsRequest) (*QueryIgpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Igps not implemented")
}
func (*UnimplementedQueryServer) Igp(ctx context.Context, req *QueryIgpRequest) (*QueryIgpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Igp not implemented")
}
func (*UnimplementedQueryServer) DestinationGasConfigs(ctx context.Context, req *QueryDestinationGasConfigsRequest) (*QueryDestinationGasConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestinationGasConfigs not implemented")
}
func (*UnimplementedQueryServer) QuoteGasPayment(ctx context.Context, req *QueryQuoteGasPaymentRequest) (*QueryQuoteGasPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteGasPayment not implemented")
}
func (*UnimplementedQueryServer) MerkleTreeHooks(ctx context.Context, req *QueryMerkleTreeHooks) (*QueryMerkleTreeHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerkleTreeHooks not implemented")
}
func (*UnimplementedQueryServer) MerkleTreeHook(ctx context.Context, req *QueryMerkleTreeHook) (*QueryMerkleTreeHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerkleTreeHook not implemented")
}
func (*UnimplementedQueryServer) NoopHooks(ctx context.Context, req *QueryNoopHooksRequest) (*QueryNoopHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoopHooks not implemented")
}
func (*UnimplementedQueryServer) NoopHook(ctx context.Context, req *QueryNoopHookRequest) (*QueryNoopHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoopHook not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Igps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIgpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Igps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/Igps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Igps(ctx, req.(*QueryIgpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Igp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Igp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/Igp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Igp(ctx, req.(*QueryIgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DestinationGasConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDestinationGasConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DestinationGasConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/DestinationGasConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DestinationGasConfigs(ctx, req.(*QueryDestinationGasConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteGasPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteGasPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteGasPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/QuoteGasPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteGasPayment(ctx, req.(*QueryQuoteGasPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MerkleTreeHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMerkleTreeHooks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MerkleTreeHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/MerkleTreeHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MerkleTreeHooks(ctx, req.(*QueryMerkleTreeHooks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MerkleTreeHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMerkleTreeHook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MerkleTreeHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/MerkleTreeHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MerkleTreeHook(ctx, req.(*QueryMerkleTreeHook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NoopHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNoopHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NoopHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/NoopHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NoopHooks(ctx, req.(*QueryNoopHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NoopHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNoopHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NoopHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Query/NoopHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NoopHook(ctx, req.(*QueryNoopHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.core.post_dispatch.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Igps",
			Handler:    _Query_Igps_Handler,
		},
		{
			MethodName: "Igp",
			Handler:    _Query_Igp_Handler,
		},
		{
			MethodName: "DestinationGasConfigs",
			Handler:    _Query_DestinationGasConfigs_Handler,
		},
		{
			MethodName: "QuoteGasPayment",
			Handler:    _Query_QuoteGasPayment_Handler,
		},
		{
			MethodName: "MerkleTreeHooks",
			Handler:    _Query_MerkleTreeHooks_Handler,
		},
		{
			MethodName: "MerkleTreeHook",
			Handler:    _Query_MerkleTreeHook_Handler,
		},
		{
			MethodName: "NoopHooks",
			Handler:    _Query_NoopHooks_Handler,
		},
		{
			MethodName: "NoopHook",
			Handler:    _Query_NoopHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/core/post_dispatch/v1/query.proto",
}

func (m *QueryIgpsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIgpsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Igps) > 0 {
		for iNdEx := len(m.Igps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Igps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIgpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIgpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Igp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDestinationGasConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDestinationGasConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDestinationGasConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDestinationGasConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDestinationGasConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDestinationGasConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationGasConfigs) > 0 {
		for iNdEx := len(m.DestinationGasConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DestinationGasConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteGasPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteGasPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteGasPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationDomain) > 0 {
		i -= len(m.DestinationDomain)
		copy(dAtA[i:], m.DestinationDomain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationDomain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteGasPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteGasPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteGasPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasPayment) > 0 {
		for iNdEx := len(m.GasPayment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPayment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkleTreeHooks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkleTreeHooks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkleTreeHooks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkleTreeHooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkleTreeHooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkleTreeHooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MerkleTreeHooks) > 0 {
		for iNdEx := len(m.MerkleTreeHooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MerkleTreeHooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkleTreeHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkleTreeHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkleTreeHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkleTreeHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkleTreeHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkleTreeHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MerkleTreeHook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WrappedMerkleTreeHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedMerkleTreeHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedMerkleTreeHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MerkleTree != nil {
		{
			size, err := m.MerkleTree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.MailboxId) > 0 {
		i -= len(m.MailboxId)
		copy(dAtA[i:], m.MailboxId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MailboxId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Leafs) > 0 {
		for iNdEx := len(m.Leafs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Leafs[iNdEx])
			copy(dAtA[i:], m.Leafs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Leafs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNoopHookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNoopHookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNoopHookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNoopHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNoopHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNoopHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoopHook != nil {
		{
			size, err := m.NoopHook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNoopHooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNoopHooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNoopHooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNoopHooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNoopHooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNoopHooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NoopHooks) > 0 {
		for iNdEx := len(m.NoopHooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NoopHooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryIgpsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIgpsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Igps) > 0 {
		for _, e := range m.Igps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIgpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIgpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Igp.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDestinationGasConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDestinationGasConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DestinationGasConfigs) > 0 {
		for _, e := range m.DestinationGasConfigs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQuoteGasPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationDomain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQuoteGasPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPayment) > 0 {
		for _, e := range m.GasPayment {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMerkleTreeHooks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMerkleTreeHooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MerkleTreeHooks) > 0 {
		for _, e := range m.MerkleTreeHooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMerkleTreeHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMerkleTreeHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MerkleTreeHook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *WrappedMerkleTreeHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MailboxId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MerkleTree != nil {
		l = m.MerkleTree.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Leafs) > 0 {
		for _, b := range m.Leafs {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNoopHookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNoopHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoopHook != nil {
		l = m.NoopHook.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNoopHooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNoopHooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NoopHooks) > 0 {
		for _, e := range m.NoopHooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryIgpsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Igps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Igps = append(m.Igps, InterchainGasPaymaster{})
			if err := m.Igps[len(m.Igps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Igp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Igp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDestinationGasConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDestinationGasConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationGasConfigs = append(m.DestinationGasConfigs, &DestinationGasConfig{})
			if err := m.DestinationGasConfigs[len(m.DestinationGasConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteGasPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteGasPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPayment = append(m.GasPayment, types.Coin{})
			if err := m.GasPayment[len(m.GasPayment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkleTreeHooks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkleTreeHooks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkleTreeHooks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkleTreeHooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkleTreeHooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkleTreeHooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTreeHooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleTreeHooks = append(m.MerkleTreeHooks, WrappedMerkleTreeHookResponse{})
			if err := m.MerkleTreeHooks[len(m.MerkleTreeHooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkleTreeHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkleTreeHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkleTreeHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkleTreeHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkleTreeHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkleTreeHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTreeHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MerkleTreeHook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedMerkleTreeHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedMerkleTreeHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedMerkleTreeHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailboxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MerkleTree == nil {
				m.MerkleTree = &TreeResponse{}
			}
			if err := m.MerkleTree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leafs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leafs = append(m.Leafs, make([]byte, postIndex-iNdEx))
			copy(m.Leafs[len(m.Leafs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNoopHookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNoopHookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNoopHookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNoopHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNoopHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNoopHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoopHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoopHook == nil {
				m.NoopHook = &NoopHook{}
			}
			if err := m.NoopHook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNoopHooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNoopHooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNoopHooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNoopHooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNoopHooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNoopHooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoopHooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoopHooks = append(m.NoopHooks, NoopHook{})
			if err := m.NoopHooks[len(m.NoopHooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
