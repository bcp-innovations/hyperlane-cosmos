// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/core/post_dispatch/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InterchainGasPaymaster ...
// TODO: remove internal_id
type InterchainGasPaymaster struct {
	// id ...
	InternalId uint64 `protobuf:"varint,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	// id is the hyperlane hex address
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// owner ...
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// denom ...
	Denom string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	// claimable_fees ...
	ClaimableFees cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=claimable_fees,json=claimableFees,proto3,customtype=cosmossdk.io/math.Int" json:"claimable_fees"`
}

func (m *InterchainGasPaymaster) Reset()         { *m = InterchainGasPaymaster{} }
func (m *InterchainGasPaymaster) String() string { return proto.CompactTextString(m) }
func (*InterchainGasPaymaster) ProtoMessage()    {}
func (*InterchainGasPaymaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f5bab7d9705187, []int{0}
}
func (m *InterchainGasPaymaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainGasPaymaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainGasPaymaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainGasPaymaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainGasPaymaster.Merge(m, src)
}
func (m *InterchainGasPaymaster) XXX_Size() int {
	return m.Size()
}
func (m *InterchainGasPaymaster) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainGasPaymaster.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainGasPaymaster proto.InternalMessageInfo

func (m *InterchainGasPaymaster) GetInternalId() uint64 {
	if m != nil {
		return m.InternalId
	}
	return 0
}

func (m *InterchainGasPaymaster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InterchainGasPaymaster) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *InterchainGasPaymaster) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// DestinationGasConfig ...
type DestinationGasConfig struct {
	// remote_domain ...
	RemoteDomain uint32 `protobuf:"varint,1,opt,name=remote_domain,json=remoteDomain,proto3" json:"remote_domain,omitempty"`
	// gas_oracle ...
	GasOracle *GasOracle `protobuf:"bytes,2,opt,name=gas_oracle,json=gasOracle,proto3" json:"gas_oracle,omitempty"`
	// gas_overhead ...
	GasOverhead cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=gas_overhead,json=gasOverhead,proto3,customtype=cosmossdk.io/math.Int" json:"gas_overhead"`
}

func (m *DestinationGasConfig) Reset()         { *m = DestinationGasConfig{} }
func (m *DestinationGasConfig) String() string { return proto.CompactTextString(m) }
func (*DestinationGasConfig) ProtoMessage()    {}
func (*DestinationGasConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f5bab7d9705187, []int{1}
}
func (m *DestinationGasConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestinationGasConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestinationGasConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DestinationGasConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationGasConfig.Merge(m, src)
}
func (m *DestinationGasConfig) XXX_Size() int {
	return m.Size()
}
func (m *DestinationGasConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationGasConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationGasConfig proto.InternalMessageInfo

func (m *DestinationGasConfig) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *DestinationGasConfig) GetGasOracle() *GasOracle {
	if m != nil {
		return m.GasOracle
	}
	return nil
}

// GasOracle ...
type GasOracle struct {
	// token_exchange_rate ...
	TokenExchangeRate cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=token_exchange_rate,json=tokenExchangeRate,proto3,customtype=cosmossdk.io/math.Int" json:"token_exchange_rate"`
	// gas_price ...
	GasPrice cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=gas_price,json=gasPrice,proto3,customtype=cosmossdk.io/math.Int" json:"gas_price"`
}

func (m *GasOracle) Reset()         { *m = GasOracle{} }
func (m *GasOracle) String() string { return proto.CompactTextString(m) }
func (*GasOracle) ProtoMessage()    {}
func (*GasOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f5bab7d9705187, []int{2}
}
func (m *GasOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasOracle.Merge(m, src)
}
func (m *GasOracle) XXX_Size() int {
	return m.Size()
}
func (m *GasOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_GasOracle.DiscardUnknown(m)
}

var xxx_messageInfo_GasOracle proto.InternalMessageInfo

// MerkleTreeHook ...
type MerkleTreeHook struct {
	// id ...
	InternalId uint64 `protobuf:"varint,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	// id is the hyperlane hex address
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	MailboxId string `protobuf:"bytes,3,opt,name=mailbox_id,json=mailboxId,proto3" json:"mailbox_id,omitempty"`
	// owner ...
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// tree ...
	Tree *Tree `protobuf:"bytes,5,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (m *MerkleTreeHook) Reset()         { *m = MerkleTreeHook{} }
func (m *MerkleTreeHook) String() string { return proto.CompactTextString(m) }
func (*MerkleTreeHook) ProtoMessage()    {}
func (*MerkleTreeHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f5bab7d9705187, []int{3}
}
func (m *MerkleTreeHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleTreeHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleTreeHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleTreeHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleTreeHook.Merge(m, src)
}
func (m *MerkleTreeHook) XXX_Size() int {
	return m.Size()
}
func (m *MerkleTreeHook) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleTreeHook.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleTreeHook proto.InternalMessageInfo

func (m *MerkleTreeHook) GetInternalId() uint64 {
	if m != nil {
		return m.InternalId
	}
	return 0
}

func (m *MerkleTreeHook) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MerkleTreeHook) GetMailboxId() string {
	if m != nil {
		return m.MailboxId
	}
	return ""
}

func (m *MerkleTreeHook) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MerkleTreeHook) GetTree() *Tree {
	if m != nil {
		return m.Tree
	}
	return nil
}

// Tree represents an incremental merkle tree.
// Contains current branch and the number of inserted leaves in the tree.
type Tree struct {
	// branch ...
	Branch [][]byte `protobuf:"bytes,1,rep,name=branch,proto3" json:"branch,omitempty"`
	// count ...
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}
func (*Tree) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f5bab7d9705187, []int{4}
}
func (m *Tree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tree.Merge(m, src)
}
func (m *Tree) XXX_Size() int {
	return m.Size()
}
func (m *Tree) XXX_DiscardUnknown() {
	xxx_messageInfo_Tree.DiscardUnknown(m)
}

var xxx_messageInfo_Tree proto.InternalMessageInfo

func (m *Tree) GetBranch() [][]byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *Tree) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// NoopHook ...
type NoopHook struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// owner ...
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *NoopHook) Reset()         { *m = NoopHook{} }
func (m *NoopHook) String() string { return proto.CompactTextString(m) }
func (*NoopHook) ProtoMessage()    {}
func (*NoopHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f5bab7d9705187, []int{5}
}
func (m *NoopHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoopHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoopHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoopHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoopHook.Merge(m, src)
}
func (m *NoopHook) XXX_Size() int {
	return m.Size()
}
func (m *NoopHook) XXX_DiscardUnknown() {
	xxx_messageInfo_NoopHook.DiscardUnknown(m)
}

var xxx_messageInfo_NoopHook proto.InternalMessageInfo

func (m *NoopHook) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NoopHook) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*InterchainGasPaymaster)(nil), "hyperlane.core.post_dispatch.v1.InterchainGasPaymaster")
	proto.RegisterType((*DestinationGasConfig)(nil), "hyperlane.core.post_dispatch.v1.DestinationGasConfig")
	proto.RegisterType((*GasOracle)(nil), "hyperlane.core.post_dispatch.v1.GasOracle")
	proto.RegisterType((*MerkleTreeHook)(nil), "hyperlane.core.post_dispatch.v1.MerkleTreeHook")
	proto.RegisterType((*Tree)(nil), "hyperlane.core.post_dispatch.v1.Tree")
	proto.RegisterType((*NoopHook)(nil), "hyperlane.core.post_dispatch.v1.NoopHook")
}

func init() {
	proto.RegisterFile("hyperlane/core/post_dispatch/v1/types.proto", fileDescriptor_d8f5bab7d9705187)
}

var fileDescriptor_d8f5bab7d9705187 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x51, 0x6b, 0x13, 0x4d,
	0x14, 0xcd, 0xb6, 0x69, 0x69, 0x26, 0x4d, 0xe1, 0xdb, 0x2f, 0x96, 0xb5, 0xd0, 0xa4, 0x44, 0x84,
	0xa2, 0x74, 0xd7, 0x56, 0x5f, 0xf4, 0x49, 0x6b, 0xb5, 0x46, 0xa8, 0x96, 0xd5, 0x27, 0x5f, 0x96,
	0xc9, 0xec, 0xed, 0xee, 0x90, 0xdd, 0xb9, 0xcb, 0xcc, 0x34, 0xb6, 0xff, 0xc2, 0x27, 0x7f, 0x89,
	0x3f, 0xa2, 0xe0, 0x4b, 0x11, 0x04, 0xf1, 0xa1, 0x48, 0xf3, 0x47, 0x64, 0x66, 0xd2, 0x60, 0xf1,
	0x21, 0xf5, 0x6d, 0xee, 0xd9, 0x73, 0x0e, 0xf7, 0xcc, 0xde, 0xb9, 0xe4, 0x7e, 0x7e, 0x5a, 0x81,
	0x2c, 0xa8, 0x80, 0x88, 0xa1, 0x84, 0xa8, 0x42, 0xa5, 0x93, 0x94, 0xab, 0x8a, 0x6a, 0x96, 0x47,
	0xa3, 0xed, 0x48, 0x9f, 0x56, 0xa0, 0xc2, 0x4a, 0xa2, 0x46, 0xbf, 0x3b, 0x25, 0x87, 0x86, 0x1c,
	0x5e, 0x23, 0x87, 0xa3, 0xed, 0xb5, 0xdb, 0x0c, 0x55, 0x89, 0x2a, 0xb1, 0xf4, 0xc8, 0x15, 0x4e,
	0xbb, 0xd6, 0xce, 0x30, 0x43, 0x87, 0x9b, 0x93, 0x43, 0x7b, 0xdf, 0x3d, 0xb2, 0xda, 0x17, 0x1a,
	0x24, 0xcb, 0x29, 0x17, 0xfb, 0x54, 0x1d, 0xd2, 0xd3, 0x92, 0x2a, 0x0d, 0xd2, 0xef, 0x92, 0x26,
	0x37, 0x5f, 0x04, 0x2d, 0x12, 0x9e, 0x06, 0xde, 0x86, 0xb7, 0x59, 0x8f, 0xc9, 0x15, 0xd4, 0x4f,
	0xfd, 0x15, 0x32, 0xc7, 0xd3, 0x60, 0x6e, 0xc3, 0xdb, 0x6c, 0xc4, 0x73, 0x3c, 0xf5, 0x43, 0xb2,
	0x80, 0x1f, 0x05, 0xc8, 0x60, 0xde, 0x40, 0xbb, 0xc1, 0xb7, 0x2f, 0x5b, 0xed, 0x49, 0x0b, 0xcf,
	0xd2, 0x54, 0x82, 0x52, 0xef, 0xb4, 0xe4, 0x22, 0x8b, 0x1d, 0xcd, 0x6f, 0x93, 0x85, 0x14, 0x04,
	0x96, 0x41, 0xdd, 0x5a, 0xb8, 0xc2, 0xdf, 0x23, 0x2b, 0xac, 0xa0, 0xbc, 0xa4, 0x83, 0x02, 0x92,
	0x23, 0x00, 0x15, 0x2c, 0x58, 0xbb, 0xf5, 0xb3, 0x8b, 0x6e, 0xed, 0xe7, 0x45, 0xf7, 0x96, 0xb3,
	0x54, 0xe9, 0x30, 0xe4, 0x18, 0x95, 0x54, 0xe7, 0x61, 0x5f, 0xe8, 0xb8, 0x35, 0x15, 0xbd, 0x04,
	0x50, 0xbd, 0x33, 0x8f, 0xb4, 0xf7, 0x40, 0x69, 0x2e, 0xa8, 0xe6, 0x68, 0x82, 0x3d, 0x47, 0x71,
	0xc4, 0x33, 0xff, 0x0e, 0x69, 0x49, 0x28, 0x51, 0x43, 0x92, 0x62, 0x49, 0xb9, 0xb0, 0xb9, 0x5a,
	0xf1, 0xb2, 0x03, 0xf7, 0x2c, 0xe6, 0xf7, 0x09, 0xc9, 0xa8, 0x4a, 0x50, 0x52, 0x56, 0x80, 0x4d,
	0xd8, 0xdc, 0xb9, 0x17, 0xce, 0xb8, 0xfc, 0x70, 0x9f, 0xaa, 0xb7, 0x56, 0x11, 0x37, 0xb2, 0xab,
	0xa3, 0xff, 0x94, 0x2c, 0x5b, 0xab, 0x11, 0xc8, 0x1c, 0x68, 0x3a, 0xb9, 0x9b, 0x19, 0x61, 0x9a,
	0x46, 0x3f, 0x51, 0xf4, 0x3e, 0x7b, 0xa4, 0x31, 0xb5, 0xf6, 0x0f, 0xc8, 0xff, 0x1a, 0x87, 0x20,
	0x12, 0x38, 0x61, 0x39, 0x15, 0x19, 0x24, 0x92, 0x6a, 0xb0, 0x29, 0x66, 0xda, 0xfe, 0x67, 0x95,
	0x2f, 0x26, 0xc2, 0x98, 0x6a, 0xf0, 0x9f, 0x10, 0xd3, 0x6b, 0x52, 0x49, 0xce, 0x5c, 0xd0, 0x99,
	0x26, 0x4b, 0x19, 0x55, 0x87, 0x86, 0xde, 0xfb, 0xea, 0x91, 0x95, 0x03, 0x90, 0xc3, 0x02, 0xde,
	0x4b, 0x80, 0x57, 0x88, 0xc3, 0x7f, 0x9f, 0x99, 0x75, 0x42, 0x4a, 0xca, 0x8b, 0x01, 0x9e, 0x18,
	0xbe, 0xbd, 0x9c, 0xb8, 0x31, 0x41, 0xfa, 0x7f, 0x8c, 0x54, 0xfd, 0x66, 0x23, 0xf5, 0x98, 0xd4,
	0xb5, 0x04, 0xb0, 0x23, 0xd3, 0xdc, 0xb9, 0x3b, 0xf3, 0x97, 0x99, 0xc6, 0x63, 0x2b, 0xe9, 0x3d,
	0x22, 0x75, 0x53, 0xf9, 0xab, 0x64, 0x71, 0x20, 0xa9, 0x60, 0x79, 0xe0, 0x6d, 0xcc, 0x6f, 0x2e,
	0xc7, 0x93, 0xca, 0x4c, 0x2b, 0xc3, 0x63, 0xa1, 0x6d, 0xf3, 0xad, 0xd8, 0x15, 0xbd, 0xd7, 0x64,
	0xe9, 0x0d, 0x62, 0x65, 0xc3, 0xbb, 0x6c, 0xde, 0xdf, 0xef, 0xe1, 0x66, 0xcd, 0xef, 0xb2, 0xb3,
	0xcb, 0x8e, 0x77, 0x7e, 0xd9, 0xf1, 0x7e, 0x5d, 0x76, 0xbc, 0x4f, 0xe3, 0x4e, 0xed, 0x7c, 0xdc,
	0xa9, 0xfd, 0x18, 0x77, 0x6a, 0x1f, 0xfa, 0x19, 0xd7, 0xf9, 0xf1, 0x20, 0x64, 0x58, 0x46, 0x03,
	0x56, 0x6d, 0x71, 0x21, 0x70, 0x64, 0x07, 0x5b, 0x45, 0xd3, 0x88, 0x5b, 0xce, 0x3b, 0x3a, 0x71,
	0x8b, 0xe4, 0xc1, 0x4e, 0x72, 0x7d, 0x97, 0xd8, 0x45, 0x32, 0x58, 0xb4, 0xef, 0xfe, 0xe1, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xf8, 0x5b, 0x83, 0x78, 0x04, 0x00, 0x00,
}

func (m *InterchainGasPaymaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainGasPaymaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainGasPaymaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ClaimableFees.Size()
		i -= size
		if _, err := m.ClaimableFees.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.InternalId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InternalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DestinationGasConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestinationGasConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DestinationGasConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GasOverhead.Size()
		i -= size
		if _, err := m.GasOverhead.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.GasOracle != nil {
		{
			size, err := m.GasOracle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GasOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GasPrice.Size()
		i -= size
		if _, err := m.GasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TokenExchangeRate.Size()
		i -= size
		if _, err := m.TokenExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MerkleTreeHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleTreeHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleTreeHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tree != nil {
		{
			size, err := m.Tree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MailboxId) > 0 {
		i -= len(m.MailboxId)
		copy(dAtA[i:], m.MailboxId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MailboxId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.InternalId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InternalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Branch) > 0 {
		for iNdEx := len(m.Branch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Branch[iNdEx])
			copy(dAtA[i:], m.Branch[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Branch[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoopHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoopHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoopHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainGasPaymaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InternalId != 0 {
		n += 1 + sovTypes(uint64(m.InternalId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.ClaimableFees.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *DestinationGasConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoteDomain != 0 {
		n += 1 + sovTypes(uint64(m.RemoteDomain))
	}
	if m.GasOracle != nil {
		l = m.GasOracle.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.GasOverhead.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *GasOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenExchangeRate.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.GasPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *MerkleTreeHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InternalId != 0 {
		n += 1 + sovTypes(uint64(m.InternalId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MailboxId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tree != nil {
		l = m.Tree.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Tree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Branch) > 0 {
		for _, b := range m.Branch {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	return n
}

func (m *NoopHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainGasPaymaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainGasPaymaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainGasPaymaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			m.InternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimableFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestinationGasConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestinationGasConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestinationGasConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasOracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasOracle == nil {
				m.GasOracle = &GasOracle{}
			}
			if err := m.GasOracle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasOverhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasOverhead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleTreeHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleTreeHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleTreeHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			m.InternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailboxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tree == nil {
				m.Tree = &Tree{}
			}
			if err := m.Tree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branch = append(m.Branch, make([]byte, postIndex-iNdEx))
			copy(m.Branch[len(m.Branch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoopHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoopHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoopHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
