// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/core/interchain_security/v1/events.proto

package types

import (
	fmt "fmt"
	github_com_bcp_innovations_hyperlane_cosmos_util "github.com/bcp-innovations/hyperlane-cosmos/util"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateNoopIsm ...
type EventCreateNoopIsm struct {
	// ism_id ...
	IsmId github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	// owner ...
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventCreateNoopIsm) Reset()         { *m = EventCreateNoopIsm{} }
func (m *EventCreateNoopIsm) String() string { return proto.CompactTextString(m) }
func (*EventCreateNoopIsm) ProtoMessage()    {}
func (*EventCreateNoopIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{0}
}
func (m *EventCreateNoopIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateNoopIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateNoopIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateNoopIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateNoopIsm.Merge(m, src)
}
func (m *EventCreateNoopIsm) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateNoopIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateNoopIsm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateNoopIsm proto.InternalMessageInfo

func (m *EventCreateNoopIsm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EventCreateMerkleRootMultisigIsm ...
type EventCreateMerkleRootMultisigIsm struct {
	IsmId      github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	Owner      string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Validators []string                                                    `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	Threshold  uint32                                                      `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *EventCreateMerkleRootMultisigIsm) Reset()         { *m = EventCreateMerkleRootMultisigIsm{} }
func (m *EventCreateMerkleRootMultisigIsm) String() string { return proto.CompactTextString(m) }
func (*EventCreateMerkleRootMultisigIsm) ProtoMessage()    {}
func (*EventCreateMerkleRootMultisigIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{1}
}
func (m *EventCreateMerkleRootMultisigIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateMerkleRootMultisigIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateMerkleRootMultisigIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateMerkleRootMultisigIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateMerkleRootMultisigIsm.Merge(m, src)
}
func (m *EventCreateMerkleRootMultisigIsm) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateMerkleRootMultisigIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateMerkleRootMultisigIsm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateMerkleRootMultisigIsm proto.InternalMessageInfo

func (m *EventCreateMerkleRootMultisigIsm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCreateMerkleRootMultisigIsm) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *EventCreateMerkleRootMultisigIsm) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

// EventCreateMessageIdMultisigIsm ...
type EventCreateMessageIdMultisigIsm struct {
	IsmId      github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	Owner      string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Validators []string                                                    `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	Threshold  uint32                                                      `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *EventCreateMessageIdMultisigIsm) Reset()         { *m = EventCreateMessageIdMultisigIsm{} }
func (m *EventCreateMessageIdMultisigIsm) String() string { return proto.CompactTextString(m) }
func (*EventCreateMessageIdMultisigIsm) ProtoMessage()    {}
func (*EventCreateMessageIdMultisigIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{2}
}
func (m *EventCreateMessageIdMultisigIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateMessageIdMultisigIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateMessageIdMultisigIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateMessageIdMultisigIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateMessageIdMultisigIsm.Merge(m, src)
}
func (m *EventCreateMessageIdMultisigIsm) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateMessageIdMultisigIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateMessageIdMultisigIsm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateMessageIdMultisigIsm proto.InternalMessageInfo

func (m *EventCreateMessageIdMultisigIsm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCreateMessageIdMultisigIsm) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *EventCreateMessageIdMultisigIsm) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

// EventCreateMessageIdMultisigIsm ...
type EventAnnounceStorageLocation struct {
	MailboxId       github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=mailbox_id,json=mailboxId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"mailbox_id"`
	Sender          string                                                      `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Validator       string                                                      `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	StorageLocation string                                                      `protobuf:"bytes,4,opt,name=storage_location,json=storageLocation,proto3" json:"storage_location,omitempty"`
}

func (m *EventAnnounceStorageLocation) Reset()         { *m = EventAnnounceStorageLocation{} }
func (m *EventAnnounceStorageLocation) String() string { return proto.CompactTextString(m) }
func (*EventAnnounceStorageLocation) ProtoMessage()    {}
func (*EventAnnounceStorageLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{3}
}
func (m *EventAnnounceStorageLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAnnounceStorageLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAnnounceStorageLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAnnounceStorageLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAnnounceStorageLocation.Merge(m, src)
}
func (m *EventAnnounceStorageLocation) XXX_Size() int {
	return m.Size()
}
func (m *EventAnnounceStorageLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAnnounceStorageLocation.DiscardUnknown(m)
}

var xxx_messageInfo_EventAnnounceStorageLocation proto.InternalMessageInfo

func (m *EventAnnounceStorageLocation) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventAnnounceStorageLocation) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *EventAnnounceStorageLocation) GetStorageLocation() string {
	if m != nil {
		return m.StorageLocation
	}
	return ""
}

// EventSetRoutingIsmDomain ...
type EventSetRoutingIsmDomain struct {
	IsmId       github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	Owner       string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	RouteIsmId  github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,3,opt,name=route_ism_id,json=routeIsmId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"route_ism_id"`
	RouteDomain uint32                                                      `protobuf:"varint,4,opt,name=route_domain,json=routeDomain,proto3" json:"route_domain,omitempty"`
}

func (m *EventSetRoutingIsmDomain) Reset()         { *m = EventSetRoutingIsmDomain{} }
func (m *EventSetRoutingIsmDomain) String() string { return proto.CompactTextString(m) }
func (*EventSetRoutingIsmDomain) ProtoMessage()    {}
func (*EventSetRoutingIsmDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{4}
}
func (m *EventSetRoutingIsmDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetRoutingIsmDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetRoutingIsmDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetRoutingIsmDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetRoutingIsmDomain.Merge(m, src)
}
func (m *EventSetRoutingIsmDomain) XXX_Size() int {
	return m.Size()
}
func (m *EventSetRoutingIsmDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetRoutingIsmDomain.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetRoutingIsmDomain proto.InternalMessageInfo

func (m *EventSetRoutingIsmDomain) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventSetRoutingIsmDomain) GetRouteDomain() uint32 {
	if m != nil {
		return m.RouteDomain
	}
	return 0
}

// EventRemoveRoutingIsmDomain ...
type EventRemoveRoutingIsmDomain struct {
	IsmId       github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	Owner       string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	RouteDomain uint32                                                      `protobuf:"varint,3,opt,name=route_domain,json=routeDomain,proto3" json:"route_domain,omitempty"`
}

func (m *EventRemoveRoutingIsmDomain) Reset()         { *m = EventRemoveRoutingIsmDomain{} }
func (m *EventRemoveRoutingIsmDomain) String() string { return proto.CompactTextString(m) }
func (*EventRemoveRoutingIsmDomain) ProtoMessage()    {}
func (*EventRemoveRoutingIsmDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{5}
}
func (m *EventRemoveRoutingIsmDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRemoveRoutingIsmDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRemoveRoutingIsmDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRemoveRoutingIsmDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRemoveRoutingIsmDomain.Merge(m, src)
}
func (m *EventRemoveRoutingIsmDomain) XXX_Size() int {
	return m.Size()
}
func (m *EventRemoveRoutingIsmDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRemoveRoutingIsmDomain.DiscardUnknown(m)
}

var xxx_messageInfo_EventRemoveRoutingIsmDomain proto.InternalMessageInfo

func (m *EventRemoveRoutingIsmDomain) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventRemoveRoutingIsmDomain) GetRouteDomain() uint32 {
	if m != nil {
		return m.RouteDomain
	}
	return 0
}

// EventRemoveRoutingIsmDomain ...
type EventSetRoutingIsm struct {
	IsmId             github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	Owner             string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	NewOwner          string                                                      `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	RenounceOwnership bool                                                        `protobuf:"varint,4,opt,name=renounce_ownership,json=renounceOwnership,proto3" json:"renounce_ownership,omitempty"`
}

func (m *EventSetRoutingIsm) Reset()         { *m = EventSetRoutingIsm{} }
func (m *EventSetRoutingIsm) String() string { return proto.CompactTextString(m) }
func (*EventSetRoutingIsm) ProtoMessage()    {}
func (*EventSetRoutingIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{6}
}
func (m *EventSetRoutingIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetRoutingIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetRoutingIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetRoutingIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetRoutingIsm.Merge(m, src)
}
func (m *EventSetRoutingIsm) XXX_Size() int {
	return m.Size()
}
func (m *EventSetRoutingIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetRoutingIsm.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetRoutingIsm proto.InternalMessageInfo

func (m *EventSetRoutingIsm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventSetRoutingIsm) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *EventSetRoutingIsm) GetRenounceOwnership() bool {
	if m != nil {
		return m.RenounceOwnership
	}
	return false
}

// EventCreateMessageIdMultisigIsm ...
type EventCreateRoutingIsm struct {
	IsmId github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id"`
	Owner string                                                      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventCreateRoutingIsm) Reset()         { *m = EventCreateRoutingIsm{} }
func (m *EventCreateRoutingIsm) String() string { return proto.CompactTextString(m) }
func (*EventCreateRoutingIsm) ProtoMessage()    {}
func (*EventCreateRoutingIsm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9752d6bb2f92366, []int{7}
}
func (m *EventCreateRoutingIsm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateRoutingIsm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateRoutingIsm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateRoutingIsm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateRoutingIsm.Merge(m, src)
}
func (m *EventCreateRoutingIsm) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateRoutingIsm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateRoutingIsm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateRoutingIsm proto.InternalMessageInfo

func (m *EventCreateRoutingIsm) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateNoopIsm)(nil), "hyperlane.core.interchain_security.v1.EventCreateNoopIsm")
	proto.RegisterType((*EventCreateMerkleRootMultisigIsm)(nil), "hyperlane.core.interchain_security.v1.EventCreateMerkleRootMultisigIsm")
	proto.RegisterType((*EventCreateMessageIdMultisigIsm)(nil), "hyperlane.core.interchain_security.v1.EventCreateMessageIdMultisigIsm")
	proto.RegisterType((*EventAnnounceStorageLocation)(nil), "hyperlane.core.interchain_security.v1.EventAnnounceStorageLocation")
	proto.RegisterType((*EventSetRoutingIsmDomain)(nil), "hyperlane.core.interchain_security.v1.EventSetRoutingIsmDomain")
	proto.RegisterType((*EventRemoveRoutingIsmDomain)(nil), "hyperlane.core.interchain_security.v1.EventRemoveRoutingIsmDomain")
	proto.RegisterType((*EventSetRoutingIsm)(nil), "hyperlane.core.interchain_security.v1.EventSetRoutingIsm")
	proto.RegisterType((*EventCreateRoutingIsm)(nil), "hyperlane.core.interchain_security.v1.EventCreateRoutingIsm")
}

func init() {
	proto.RegisterFile("hyperlane/core/interchain_security/v1/events.proto", fileDescriptor_d9752d6bb2f92366)
}

var fileDescriptor_d9752d6bb2f92366 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0xc1, 0x4f, 0xd4, 0x4e,
	0x14, 0xc7, 0x77, 0xd8, 0x1f, 0x84, 0x9d, 0x9f, 0x46, 0x6d, 0x30, 0xa9, 0x40, 0xca, 0xda, 0xc4,
	0x04, 0x0f, 0xdb, 0x82, 0x1e, 0x3d, 0x01, 0x9a, 0xb8, 0x89, 0x48, 0x52, 0x6e, 0x5c, 0x9a, 0x6e,
	0xfb, 0xd2, 0x4e, 0x6c, 0xe7, 0x35, 0x33, 0xd3, 0x02, 0xff, 0x85, 0x7f, 0x82, 0x89, 0xff, 0x80,
	0x07, 0xff, 0x08, 0x0e, 0x1e, 0x88, 0x27, 0xe3, 0x81, 0x18, 0x38, 0xca, 0xbf, 0x60, 0x62, 0x3a,
	0xd3, 0x05, 0x56, 0x39, 0x68, 0xc2, 0x61, 0xe3, 0x6d, 0xf7, 0xbd, 0xf7, 0x9d, 0xf9, 0x7e, 0xde,
	0x4c, 0xe7, 0xd1, 0x27, 0xd9, 0x61, 0x09, 0x22, 0x8f, 0x38, 0xf8, 0x31, 0x0a, 0xf0, 0x19, 0x57,
	0x20, 0xe2, 0x2c, 0x62, 0x3c, 0x94, 0x10, 0x57, 0x82, 0xa9, 0x43, 0xbf, 0x5e, 0xf7, 0xa1, 0x06,
	0xae, 0xa4, 0x57, 0x0a, 0x54, 0x68, 0x3d, 0xba, 0xd0, 0x78, 0x8d, 0xc6, 0xbb, 0x46, 0xe3, 0xd5,
	0xeb, 0x8b, 0x0b, 0x29, 0xa6, 0xa8, 0x15, 0x7e, 0xf3, 0xcb, 0x88, 0x17, 0x1f, 0xc4, 0x28, 0x0b,
	0x94, 0xa1, 0x49, 0x98, 0x3f, 0x26, 0xe5, 0xbe, 0x23, 0xd4, 0x7a, 0xd1, 0x6c, 0xb4, 0x25, 0x20,
	0x52, 0xf0, 0x1a, 0xb1, 0x1c, 0xca, 0xc2, 0xda, 0xa3, 0x73, 0x4c, 0x16, 0x21, 0x4b, 0x6c, 0xd2,
	0x27, 0xab, 0xbd, 0xcd, 0xad, 0xa3, 0x93, 0x95, 0xce, 0xd7, 0x93, 0x95, 0x67, 0x29, 0x53, 0x59,
	0x35, 0xf2, 0x62, 0x2c, 0xfc, 0x51, 0x5c, 0x0e, 0x18, 0xe7, 0x58, 0x47, 0x8a, 0x21, 0x97, 0xfe,
	0x85, 0xc3, 0x81, 0xd9, 0xc1, 0xaf, 0x14, 0xcb, 0xbd, 0x97, 0x70, 0xb0, 0x91, 0x24, 0x02, 0xa4,
	0x0c, 0x66, 0x99, 0x2c, 0x86, 0x89, 0xe5, 0xd1, 0x59, 0xdc, 0xe7, 0x20, 0xec, 0x19, 0xbd, 0xb4,
	0xfd, 0xf9, 0xe3, 0x60, 0xa1, 0xf5, 0xd4, 0x56, 0xee, 0x2a, 0xc1, 0x78, 0x1a, 0x98, 0x32, 0xf7,
	0x9c, 0xd0, 0xfe, 0x15, 0x8b, 0xdb, 0x20, 0xde, 0xe4, 0x10, 0x20, 0xaa, 0xed, 0x2a, 0x57, 0x4c,
	0xb2, 0x74, 0xca, 0x0c, 0x5b, 0x0e, 0xa5, 0x75, 0x94, 0xb3, 0x24, 0x52, 0x28, 0xa4, 0xdd, 0xed,
	0x77, 0x57, 0x7b, 0xc1, 0x95, 0x88, 0xb5, 0x4c, 0x7b, 0x2a, 0x13, 0x20, 0x33, 0xcc, 0x13, 0xfb,
	0xbf, 0x3e, 0x59, 0xbd, 0x1d, 0x5c, 0x06, 0xdc, 0xef, 0x84, 0xae, 0x4c, 0xe0, 0x4a, 0x19, 0xa5,
	0x30, 0x4c, 0xfe, 0x4d, 0xda, 0x1f, 0x84, 0x2e, 0x6b, 0xda, 0x0d, 0xce, 0xb1, 0xe2, 0x31, 0xec,
	0x2a, 0x14, 0x51, 0x0a, 0xaf, 0x30, 0xd6, 0xbe, 0xad, 0x11, 0xa5, 0x45, 0xc4, 0xf2, 0x11, 0x1e,
	0xdc, 0x30, 0x6e, 0xaf, 0x5d, 0x76, 0x98, 0x58, 0x6b, 0x74, 0x4e, 0x02, 0x4f, 0xfe, 0x80, 0xb9,
	0xad, 0x6b, 0xa0, 0x2e, 0x10, 0xed, 0x6e, 0x23, 0x0a, 0x2e, 0x03, 0xd6, 0x63, 0x7a, 0x57, 0x1a,
	0x8c, 0x30, 0x6f, 0x39, 0x34, 0x79, 0x2f, 0xb8, 0x23, 0x27, 0xf1, 0xdc, 0x0f, 0x33, 0xd4, 0xd6,
	0xfc, 0xbb, 0xa0, 0x02, 0xac, 0x14, 0xe3, 0xcd, 0x01, 0x3f, 0xc7, 0x22, 0x62, 0x7c, 0xaa, 0x8e,
	0x19, 0xe8, 0x2d, 0x81, 0x95, 0x82, 0xb0, 0x75, 0xd4, 0xbd, 0x39, 0x47, 0x54, 0x2f, 0x3c, 0xd4,
	0xb6, 0x1e, 0x8e, 0xb7, 0x49, 0x74, 0x0b, 0xda, 0x0b, 0xf3, 0xbf, 0x8e, 0x99, 0xae, 0xb8, 0x9f,
	0x08, 0x5d, 0xd2, 0x2d, 0x0b, 0xa0, 0xc0, 0x1a, 0xa6, 0xba, 0x6b, 0xbf, 0xe2, 0x74, 0x7f, 0xc7,
	0x39, 0x1f, 0xbf, 0xc0, 0x13, 0x37, 0x60, 0xaa, 0x28, 0x96, 0x68, 0x8f, 0xc3, 0x7e, 0x68, 0x34,
	0xe6, 0xb6, 0xcf, 0x73, 0xd8, 0xdf, 0xd1, 0xc9, 0x01, 0xb5, 0x04, 0x98, 0x6f, 0xd7, 0x54, 0xc8,
	0x8c, 0x95, 0xfa, 0xdc, 0xe6, 0x83, 0x7b, 0xe3, 0xcc, 0xce, 0x38, 0xe1, 0xbe, 0x27, 0xf4, 0xfe,
	0x95, 0xe7, 0x6d, 0x3a, 0x89, 0x37, 0xd9, 0xd1, 0xa9, 0x43, 0x8e, 0x4f, 0x1d, 0xf2, 0xed, 0xd4,
	0x21, 0x6f, 0xcf, 0x9c, 0xce, 0xf1, 0x99, 0xd3, 0xf9, 0x72, 0xe6, 0x74, 0xf6, 0x76, 0xfe, 0xc6,
	0xcd, 0x81, 0x19, 0xf0, 0x6b, 0xeb, 0xe1, 0x75, 0x33, 0x5e, 0x1d, 0x96, 0x20, 0x47, 0x73, 0x7a,
	0x10, 0x3f, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x07, 0xf5, 0x93, 0x16, 0x08, 0x00, 0x00,
}

func (m *EventCreateNoopIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateNoopIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateNoopIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventCreateMerkleRootMultisigIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateMerkleRootMultisigIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateMerkleRootMultisigIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventCreateMessageIdMultisigIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateMessageIdMultisigIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateMessageIdMultisigIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventAnnounceStorageLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAnnounceStorageLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAnnounceStorageLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageLocation) > 0 {
		i -= len(m.StorageLocation)
		copy(dAtA[i:], m.StorageLocation)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StorageLocation)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.MailboxId.Size()
		i -= size
		if _, err := m.MailboxId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventSetRoutingIsmDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetRoutingIsmDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetRoutingIsmDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteDomain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RouteDomain))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.RouteIsmId.Size()
		i -= size
		if _, err := m.RouteIsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventRemoveRoutingIsmDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRemoveRoutingIsmDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRemoveRoutingIsmDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteDomain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RouteDomain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventSetRoutingIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetRoutingIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetRoutingIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RenounceOwnership {
		i--
		if m.RenounceOwnership {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventCreateRoutingIsm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateRoutingIsm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateRoutingIsm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.IsmId.Size()
		i -= size
		if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateNoopIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCreateMerkleRootMultisigIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovEvents(uint64(m.Threshold))
	}
	return n
}

func (m *EventCreateMessageIdMultisigIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovEvents(uint64(m.Threshold))
	}
	return n
}

func (m *EventAnnounceStorageLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MailboxId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StorageLocation)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSetRoutingIsmDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RouteIsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.RouteDomain != 0 {
		n += 1 + sovEvents(uint64(m.RouteDomain))
	}
	return n
}

func (m *EventRemoveRoutingIsmDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RouteDomain != 0 {
		n += 1 + sovEvents(uint64(m.RouteDomain))
	}
	return n
}

func (m *EventSetRoutingIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RenounceOwnership {
		n += 2
	}
	return n
}

func (m *EventCreateRoutingIsm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IsmId.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateNoopIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateNoopIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateNoopIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateMerkleRootMultisigIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateMerkleRootMultisigIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateMerkleRootMultisigIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateMessageIdMultisigIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateMessageIdMultisigIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateMessageIdMultisigIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAnnounceStorageLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAnnounceStorageLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAnnounceStorageLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MailboxId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetRoutingIsmDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetRoutingIsmDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetRoutingIsmDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteIsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteIsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDomain", wireType)
			}
			m.RouteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRemoveRoutingIsmDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRemoveRoutingIsmDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRemoveRoutingIsmDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDomain", wireType)
			}
			m.RouteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetRoutingIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetRoutingIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetRoutingIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenounceOwnership", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RenounceOwnership = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateRoutingIsm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateRoutingIsm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateRoutingIsm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
