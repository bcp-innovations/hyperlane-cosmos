// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/warp/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateCollateralToken ...
type MsgCreateCollateralToken struct {
	// owner is the message sender.
	Owner         string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	OriginMailbox string `protobuf:"bytes,2,opt,name=origin_mailbox,json=originMailbox,proto3" json:"origin_mailbox,omitempty"`
	OriginDenom   string `protobuf:"bytes,3,opt,name=origin_denom,json=originDenom,proto3" json:"origin_denom,omitempty"`
}

func (m *MsgCreateCollateralToken) Reset()         { *m = MsgCreateCollateralToken{} }
func (m *MsgCreateCollateralToken) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCollateralToken) ProtoMessage()    {}
func (*MsgCreateCollateralToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{0}
}
func (m *MsgCreateCollateralToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCollateralToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCollateralToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCollateralToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCollateralToken.Merge(m, src)
}
func (m *MsgCreateCollateralToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCollateralToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCollateralToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCollateralToken proto.InternalMessageInfo

func (m *MsgCreateCollateralToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateCollateralToken) GetOriginMailbox() string {
	if m != nil {
		return m.OriginMailbox
	}
	return ""
}

func (m *MsgCreateCollateralToken) GetOriginDenom() string {
	if m != nil {
		return m.OriginDenom
	}
	return ""
}

// MsgCreateCollateralTokenResponse ...
type MsgCreateCollateralTokenResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateCollateralTokenResponse) Reset()         { *m = MsgCreateCollateralTokenResponse{} }
func (m *MsgCreateCollateralTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCollateralTokenResponse) ProtoMessage()    {}
func (*MsgCreateCollateralTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{1}
}
func (m *MsgCreateCollateralTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCollateralTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCollateralTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCollateralTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCollateralTokenResponse.Merge(m, src)
}
func (m *MsgCreateCollateralTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCollateralTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCollateralTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCollateralTokenResponse proto.InternalMessageInfo

func (m *MsgCreateCollateralTokenResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// MsgCreateSyntheticToken ...
type MsgCreateSyntheticToken struct {
	// owner is the message sender.
	Owner         string         `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	OriginMailbox string         `protobuf:"bytes,2,opt,name=origin_mailbox,json=originMailbox,proto3" json:"origin_mailbox,omitempty"`
	Metadata      *TokenMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgCreateSyntheticToken) Reset()         { *m = MsgCreateSyntheticToken{} }
func (m *MsgCreateSyntheticToken) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSyntheticToken) ProtoMessage()    {}
func (*MsgCreateSyntheticToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{2}
}
func (m *MsgCreateSyntheticToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSyntheticToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSyntheticToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSyntheticToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSyntheticToken.Merge(m, src)
}
func (m *MsgCreateSyntheticToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSyntheticToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSyntheticToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSyntheticToken proto.InternalMessageInfo

func (m *MsgCreateSyntheticToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateSyntheticToken) GetOriginMailbox() string {
	if m != nil {
		return m.OriginMailbox
	}
	return ""
}

func (m *MsgCreateSyntheticToken) GetMetadata() *TokenMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// MsgCreateSyntheticTokenResponse ...
type MsgCreateSyntheticTokenResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateSyntheticTokenResponse) Reset()         { *m = MsgCreateSyntheticTokenResponse{} }
func (m *MsgCreateSyntheticTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSyntheticTokenResponse) ProtoMessage()    {}
func (*MsgCreateSyntheticTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{3}
}
func (m *MsgCreateSyntheticTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSyntheticTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSyntheticTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSyntheticTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSyntheticTokenResponse.Merge(m, src)
}
func (m *MsgCreateSyntheticTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSyntheticTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSyntheticTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSyntheticTokenResponse proto.InternalMessageInfo

func (m *MsgCreateSyntheticTokenResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// MsgEnrollRemoteRouter ...
type MsgEnrollRemoteRouter struct {
	// owner is the message sender.
	Owner        string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenId      string        `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	RemoteRouter *RemoteRouter `protobuf:"bytes,3,opt,name=remote_router,json=remoteRouter,proto3" json:"remote_router,omitempty"`
}

func (m *MsgEnrollRemoteRouter) Reset()         { *m = MsgEnrollRemoteRouter{} }
func (m *MsgEnrollRemoteRouter) String() string { return proto.CompactTextString(m) }
func (*MsgEnrollRemoteRouter) ProtoMessage()    {}
func (*MsgEnrollRemoteRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{4}
}
func (m *MsgEnrollRemoteRouter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnrollRemoteRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnrollRemoteRouter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnrollRemoteRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnrollRemoteRouter.Merge(m, src)
}
func (m *MsgEnrollRemoteRouter) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnrollRemoteRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnrollRemoteRouter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnrollRemoteRouter proto.InternalMessageInfo

func (m *MsgEnrollRemoteRouter) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgEnrollRemoteRouter) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgEnrollRemoteRouter) GetRemoteRouter() *RemoteRouter {
	if m != nil {
		return m.RemoteRouter
	}
	return nil
}

// MsgEnrollRemoteRouterResponse ...
type MsgEnrollRemoteRouterResponse struct {
}

func (m *MsgEnrollRemoteRouterResponse) Reset()         { *m = MsgEnrollRemoteRouterResponse{} }
func (m *MsgEnrollRemoteRouterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEnrollRemoteRouterResponse) ProtoMessage()    {}
func (*MsgEnrollRemoteRouterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{5}
}
func (m *MsgEnrollRemoteRouterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnrollRemoteRouterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnrollRemoteRouterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnrollRemoteRouterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnrollRemoteRouterResponse.Merge(m, src)
}
func (m *MsgEnrollRemoteRouterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnrollRemoteRouterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnrollRemoteRouterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnrollRemoteRouterResponse proto.InternalMessageInfo

// MsgSetRemoteRouter ...
type MsgSetRemoteRouter struct {
	// owner is the message sender.
	Owner        string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenId      string        `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	RemoteRouter *RemoteRouter `protobuf:"bytes,3,opt,name=remote_router,json=remoteRouter,proto3" json:"remote_router,omitempty"`
}

func (m *MsgSetRemoteRouter) Reset()         { *m = MsgSetRemoteRouter{} }
func (m *MsgSetRemoteRouter) String() string { return proto.CompactTextString(m) }
func (*MsgSetRemoteRouter) ProtoMessage()    {}
func (*MsgSetRemoteRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{6}
}
func (m *MsgSetRemoteRouter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRemoteRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRemoteRouter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRemoteRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRemoteRouter.Merge(m, src)
}
func (m *MsgSetRemoteRouter) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRemoteRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRemoteRouter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRemoteRouter proto.InternalMessageInfo

func (m *MsgSetRemoteRouter) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetRemoteRouter) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgSetRemoteRouter) GetRemoteRouter() *RemoteRouter {
	if m != nil {
		return m.RemoteRouter
	}
	return nil
}

// MsgSetRemoteRouterResponse ...
type MsgSetRemoteRouterResponse struct {
}

func (m *MsgSetRemoteRouterResponse) Reset()         { *m = MsgSetRemoteRouterResponse{} }
func (m *MsgSetRemoteRouterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetRemoteRouterResponse) ProtoMessage()    {}
func (*MsgSetRemoteRouterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{7}
}
func (m *MsgSetRemoteRouterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetRemoteRouterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetRemoteRouterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetRemoteRouterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetRemoteRouterResponse.Merge(m, src)
}
func (m *MsgSetRemoteRouterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetRemoteRouterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetRemoteRouterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetRemoteRouterResponse proto.InternalMessageInfo

// MsgUnrollRemoteRouter ...
type MsgUnrollRemoteRouter struct {
	// owner is the message sender.
	Owner          string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenId        string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	ReceiverDomain uint32 `protobuf:"varint,3,opt,name=receiver_domain,json=receiverDomain,proto3" json:"receiver_domain,omitempty"`
}

func (m *MsgUnrollRemoteRouter) Reset()         { *m = MsgUnrollRemoteRouter{} }
func (m *MsgUnrollRemoteRouter) String() string { return proto.CompactTextString(m) }
func (*MsgUnrollRemoteRouter) ProtoMessage()    {}
func (*MsgUnrollRemoteRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{8}
}
func (m *MsgUnrollRemoteRouter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnrollRemoteRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnrollRemoteRouter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnrollRemoteRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnrollRemoteRouter.Merge(m, src)
}
func (m *MsgUnrollRemoteRouter) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnrollRemoteRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnrollRemoteRouter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnrollRemoteRouter proto.InternalMessageInfo

func (m *MsgUnrollRemoteRouter) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgUnrollRemoteRouter) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgUnrollRemoteRouter) GetReceiverDomain() uint32 {
	if m != nil {
		return m.ReceiverDomain
	}
	return 0
}

// MsgUnrollRemoteRouterResponse ...
type MsgUnrollRemoteRouterResponse struct {
}

func (m *MsgUnrollRemoteRouterResponse) Reset()         { *m = MsgUnrollRemoteRouterResponse{} }
func (m *MsgUnrollRemoteRouterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnrollRemoteRouterResponse) ProtoMessage()    {}
func (*MsgUnrollRemoteRouterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{9}
}
func (m *MsgUnrollRemoteRouterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnrollRemoteRouterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnrollRemoteRouterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnrollRemoteRouterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnrollRemoteRouterResponse.Merge(m, src)
}
func (m *MsgUnrollRemoteRouterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnrollRemoteRouterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnrollRemoteRouterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnrollRemoteRouterResponse proto.InternalMessageInfo

// MsgSetInterchainSecurityModule ...
type MsgSetInterchainSecurityModule struct {
	// owner is the message sender.
	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	IsmId   string `protobuf:"bytes,3,opt,name=ism_id,json=ismId,proto3" json:"ism_id,omitempty"`
}

func (m *MsgSetInterchainSecurityModule) Reset()         { *m = MsgSetInterchainSecurityModule{} }
func (m *MsgSetInterchainSecurityModule) String() string { return proto.CompactTextString(m) }
func (*MsgSetInterchainSecurityModule) ProtoMessage()    {}
func (*MsgSetInterchainSecurityModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{10}
}
func (m *MsgSetInterchainSecurityModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetInterchainSecurityModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetInterchainSecurityModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetInterchainSecurityModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetInterchainSecurityModule.Merge(m, src)
}
func (m *MsgSetInterchainSecurityModule) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetInterchainSecurityModule) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetInterchainSecurityModule.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetInterchainSecurityModule proto.InternalMessageInfo

func (m *MsgSetInterchainSecurityModule) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetInterchainSecurityModule) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgSetInterchainSecurityModule) GetIsmId() string {
	if m != nil {
		return m.IsmId
	}
	return ""
}

// MsgSetInterchainSecurityModuleResponse ...
type MsgSetInterchainSecurityModuleResponse struct {
}

func (m *MsgSetInterchainSecurityModuleResponse) Reset() {
	*m = MsgSetInterchainSecurityModuleResponse{}
}
func (m *MsgSetInterchainSecurityModuleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetInterchainSecurityModuleResponse) ProtoMessage()    {}
func (*MsgSetInterchainSecurityModuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{11}
}
func (m *MsgSetInterchainSecurityModuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetInterchainSecurityModuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetInterchainSecurityModuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetInterchainSecurityModuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetInterchainSecurityModuleResponse.Merge(m, src)
}
func (m *MsgSetInterchainSecurityModuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetInterchainSecurityModuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetInterchainSecurityModuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetInterchainSecurityModuleResponse proto.InternalMessageInfo

// MsgRemoteTransfer ...
type MsgRemoteTransfer struct {
	Sender            string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TokenId           string                `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	DestinationDomain uint32                `protobuf:"varint,3,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	Recipient         string                `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// IGP
	IgpId    string                `protobuf:"bytes,6,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	GasLimit cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=gas_limit,json=gasLimit,proto3,customtype=cosmossdk.io/math.Int" json:"gas_limit"`
	MaxFee   types.Coin            `protobuf:"bytes,8,opt,name=max_fee,json=maxFee,proto3" json:"max_fee"`
}

func (m *MsgRemoteTransfer) Reset()         { *m = MsgRemoteTransfer{} }
func (m *MsgRemoteTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgRemoteTransfer) ProtoMessage()    {}
func (*MsgRemoteTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{12}
}
func (m *MsgRemoteTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoteTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoteTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoteTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoteTransfer.Merge(m, src)
}
func (m *MsgRemoteTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoteTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoteTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoteTransfer proto.InternalMessageInfo

func (m *MsgRemoteTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRemoteTransfer) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgRemoteTransfer) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *MsgRemoteTransfer) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgRemoteTransfer) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *MsgRemoteTransfer) GetMaxFee() types.Coin {
	if m != nil {
		return m.MaxFee
	}
	return types.Coin{}
}

// MsgRemoteTransferResponse ...
type MsgRemoteTransferResponse struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *MsgRemoteTransferResponse) Reset()         { *m = MsgRemoteTransferResponse{} }
func (m *MsgRemoteTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoteTransferResponse) ProtoMessage()    {}
func (*MsgRemoteTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d1a3f4c9d53a091, []int{13}
}
func (m *MsgRemoteTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoteTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoteTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoteTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoteTransferResponse.Merge(m, src)
}
func (m *MsgRemoteTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoteTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoteTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoteTransferResponse proto.InternalMessageInfo

func (m *MsgRemoteTransferResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateCollateralToken)(nil), "hyperlane.warp.v1.MsgCreateCollateralToken")
	proto.RegisterType((*MsgCreateCollateralTokenResponse)(nil), "hyperlane.warp.v1.MsgCreateCollateralTokenResponse")
	proto.RegisterType((*MsgCreateSyntheticToken)(nil), "hyperlane.warp.v1.MsgCreateSyntheticToken")
	proto.RegisterType((*MsgCreateSyntheticTokenResponse)(nil), "hyperlane.warp.v1.MsgCreateSyntheticTokenResponse")
	proto.RegisterType((*MsgEnrollRemoteRouter)(nil), "hyperlane.warp.v1.MsgEnrollRemoteRouter")
	proto.RegisterType((*MsgEnrollRemoteRouterResponse)(nil), "hyperlane.warp.v1.MsgEnrollRemoteRouterResponse")
	proto.RegisterType((*MsgSetRemoteRouter)(nil), "hyperlane.warp.v1.MsgSetRemoteRouter")
	proto.RegisterType((*MsgSetRemoteRouterResponse)(nil), "hyperlane.warp.v1.MsgSetRemoteRouterResponse")
	proto.RegisterType((*MsgUnrollRemoteRouter)(nil), "hyperlane.warp.v1.MsgUnrollRemoteRouter")
	proto.RegisterType((*MsgUnrollRemoteRouterResponse)(nil), "hyperlane.warp.v1.MsgUnrollRemoteRouterResponse")
	proto.RegisterType((*MsgSetInterchainSecurityModule)(nil), "hyperlane.warp.v1.MsgSetInterchainSecurityModule")
	proto.RegisterType((*MsgSetInterchainSecurityModuleResponse)(nil), "hyperlane.warp.v1.MsgSetInterchainSecurityModuleResponse")
	proto.RegisterType((*MsgRemoteTransfer)(nil), "hyperlane.warp.v1.MsgRemoteTransfer")
	proto.RegisterType((*MsgRemoteTransferResponse)(nil), "hyperlane.warp.v1.MsgRemoteTransferResponse")
}

func init() { proto.RegisterFile("hyperlane/warp/v1/tx.proto", fileDescriptor_9d1a3f4c9d53a091) }

var fileDescriptor_9d1a3f4c9d53a091 = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0x36, 0xed, 0x5a, 0xb6, 0x5e, 0x62, 0x07, 0x26, 0x6c, 0x44, 0x66, 0x63, 0xc9, 0x11, 0xf2,
	0xc3, 0x70, 0x2b, 0xd2, 0xb2, 0xd1, 0xa2, 0x15, 0xd2, 0xa1, 0xb6, 0x5b, 0x54, 0x40, 0xb5, 0xd0,
	0xd1, 0xd2, 0x45, 0x38, 0x89, 0x17, 0xea, 0x10, 0xf1, 0x8e, 0xb8, 0x3b, 0x29, 0xd2, 0x56, 0x74,
	0x6c, 0x97, 0xfe, 0x19, 0x1d, 0x3d, 0x64, 0xeb, 0xe2, 0x31, 0x43, 0x87, 0x20, 0x4b, 0x8b, 0x02,
	0x0d, 0x0a, 0x1b, 0x85, 0xff, 0x8d, 0x82, 0xe4, 0x99, 0x35, 0x25, 0x52, 0x90, 0x81, 0x06, 0xc8,
	0x22, 0x90, 0xef, 0x7d, 0xf7, 0xde, 0xfb, 0xbe, 0xa7, 0x7b, 0x8f, 0x60, 0x74, 0x47, 0x3e, 0xe6,
	0x3d, 0x44, 0xb1, 0xf5, 0x02, 0x71, 0xdf, 0x1a, 0x54, 0x2d, 0x39, 0x34, 0x7d, 0xce, 0x24, 0xd3,
	0xd7, 0x62, 0x9f, 0x19, 0xf8, 0xcc, 0x41, 0xd5, 0xb8, 0xdb, 0x61, 0xc2, 0x63, 0xc2, 0xf2, 0x84,
	0x1b, 0x40, 0x3d, 0xe1, 0x46, 0x58, 0x63, 0xdd, 0x65, 0x2e, 0x0b, 0x1f, 0xad, 0xe0, 0x49, 0x59,
	0xd7, 0x90, 0x47, 0x28, 0xb3, 0xc2, 0x5f, 0x65, 0xda, 0x8c, 0x22, 0xb4, 0x22, 0x6c, 0xf4, 0xa2,
	0x5c, 0x45, 0x15, 0xbc, 0x8d, 0x04, 0xb6, 0x06, 0xd5, 0x36, 0x96, 0xa8, 0x6a, 0x75, 0x18, 0xa1,
	0xca, 0xbf, 0x95, 0x52, 0xeb, 0xc8, 0xc7, 0xea, 0x78, 0xf9, 0x37, 0x0d, 0x0a, 0x0d, 0xe1, 0x1e,
	0x71, 0x8c, 0x24, 0x3e, 0x62, 0xbd, 0x1e, 0x92, 0x98, 0xa3, 0xde, 0x53, 0xf6, 0x1c, 0x53, 0xdd,
	0x84, 0x45, 0xf6, 0x82, 0x62, 0x5e, 0xd0, 0xb6, 0xb5, 0x9d, 0xfc, 0x61, 0xe1, 0xcd, 0xcb, 0xca,
	0xba, 0x4a, 0xfe, 0xa5, 0xe3, 0x70, 0x2c, 0xc4, 0x89, 0xe4, 0x84, 0xba, 0x76, 0x04, 0xd3, 0x1f,
	0xc2, 0x2a, 0xe3, 0xc4, 0x25, 0xb4, 0xe5, 0x21, 0xd2, 0x6b, 0xb3, 0x61, 0x61, 0x3e, 0x38, 0x68,
	0xaf, 0x44, 0xd6, 0x46, 0x64, 0xd4, 0xef, 0xc3, 0x6d, 0x05, 0x73, 0x30, 0x65, 0x5e, 0x61, 0x21,
	0x04, 0xdd, 0x8a, 0x6c, 0xc7, 0x81, 0xa9, 0xf6, 0xe9, 0x0f, 0x97, 0xa7, 0xbb, 0x51, 0xd4, 0x1f,
	0x2f, 0x4f, 0x77, 0x1f, 0x8f, 0x91, 0xc8, 0xaa, 0xb8, 0xbc, 0x0f, 0xdb, 0x59, 0x3e, 0x1b, 0x0b,
	0x9f, 0x51, 0x81, 0xf5, 0x55, 0x98, 0x27, 0x4e, 0x44, 0xc9, 0x9e, 0x27, 0x4e, 0xf9, 0x1f, 0x0d,
	0xee, 0xc6, 0x87, 0x4e, 0x46, 0x54, 0x76, 0xb1, 0x24, 0x9d, 0x77, 0xaa, 0xc0, 0x13, 0x58, 0xf6,
	0xb0, 0x44, 0x0e, 0x92, 0x28, 0x64, 0x7f, 0x6b, 0x7f, 0xdb, 0x9c, 0xf8, 0xdf, 0x98, 0x61, 0x09,
	0x0d, 0x85, 0xb3, 0xe3, 0x13, 0xb5, 0x4f, 0x92, 0xe2, 0x3c, 0xca, 0x12, 0x27, 0xc9, 0xa5, 0x5c,
	0x85, 0x52, 0x86, 0x2b, 0x53, 0x9a, 0xbf, 0x34, 0xd8, 0x68, 0x08, 0xf7, 0x2b, 0xca, 0x59, 0xaf,
	0x67, 0x63, 0x8f, 0x49, 0x6c, 0xb3, 0xbe, 0xc4, 0xfc, 0xc6, 0xc2, 0x6c, 0xc2, 0xb2, 0x0c, 0x52,
	0xb5, 0x88, 0xa3, 0x24, 0x59, 0x0a, 0xdf, 0xeb, 0x8e, 0x7e, 0x0c, 0x2b, 0x3c, 0x0c, 0xdd, 0xe2,
	0x61, 0x6c, 0xa5, 0x48, 0x29, 0x45, 0x91, 0xeb, 0x25, 0xd8, 0xb7, 0xf9, 0xb5, 0xb7, 0xda, 0x41,
	0x52, 0x94, 0x07, 0x93, 0xa2, 0x4c, 0xb2, 0x28, 0x97, 0x60, 0x2b, 0xd5, 0x71, 0x25, 0x48, 0xf9,
	0x77, 0x0d, 0xf4, 0x86, 0x70, 0x4f, 0xb0, 0x7c, 0xbf, 0xd9, 0xef, 0x25, 0xd9, 0xdf, 0x9f, 0x64,
	0x3f, 0x46, 0xa1, 0x7c, 0x0f, 0x8c, 0x49, 0x6b, 0xcc, 0xfb, 0x2c, 0x6a, 0x7c, 0xf3, 0x9d, 0x36,
	0xfe, 0x31, 0xdc, 0xe1, 0xb8, 0x83, 0xc9, 0x00, 0xf3, 0x96, 0xc3, 0x3c, 0x44, 0x68, 0x48, 0x7e,
	0xc5, 0x5e, 0xbd, 0x32, 0x1f, 0x87, 0xd6, 0x19, 0x7a, 0xdb, 0xcc, 0xea, 0x6d, 0x33, 0xbb, 0xb7,
	0x67, 0x1a, 0x14, 0x23, 0x09, 0xea, 0x54, 0x62, 0xde, 0xe9, 0x22, 0x42, 0x4f, 0x70, 0xa7, 0xcf,
	0x89, 0x1c, 0x35, 0x98, 0xd3, 0xef, 0xe1, 0xff, 0x93, 0xec, 0x06, 0xe4, 0x88, 0xf0, 0x02, 0x47,
	0x34, 0xee, 0x16, 0x89, 0xf0, 0xea, 0x4e, 0xed, 0x49, 0x92, 0x5a, 0x25, 0xb5, 0x71, 0x59, 0xf5,
	0x95, 0x77, 0xe0, 0xd1, 0x74, 0x44, 0x4c, 0xf6, 0xd7, 0x05, 0x58, 0x6b, 0x08, 0x37, 0x12, 0xe2,
	0x29, 0x47, 0x54, 0x3c, 0xc3, 0x5c, 0xdf, 0x83, 0x9c, 0xc0, 0xd4, 0x99, 0x81, 0xa0, 0xc2, 0x4d,
	0x63, 0x58, 0x01, 0xdd, 0xc1, 0x42, 0x12, 0x8a, 0x24, 0x61, 0x34, 0xd9, 0xd1, 0xb5, 0x6b, 0x9e,
	0xa8, 0xa9, 0xfa, 0x3d, 0xc8, 0x73, 0xdc, 0x21, 0x3e, 0xc1, 0x54, 0x16, 0x3e, 0x08, 0x43, 0xfd,
	0x67, 0xd0, 0xbf, 0x81, 0x1c, 0xf2, 0x58, 0x9f, 0xca, 0xc2, 0x62, 0x58, 0xd9, 0xde, 0xab, 0xb7,
	0xa5, 0xb9, 0x3f, 0xdf, 0x96, 0x36, 0xa2, 0xea, 0x84, 0xf3, 0xdc, 0x24, 0xcc, 0xf2, 0x90, 0xec,
	0x9a, 0x75, 0x2a, 0xdf, 0xbc, 0xac, 0x80, 0x2a, 0xbb, 0x4e, 0xe5, 0x2f, 0x97, 0xa7, 0xbb, 0x9a,
	0xad, 0xce, 0x87, 0xc2, 0xbb, 0x7e, 0x50, 0x6f, 0x4e, 0x09, 0xef, 0xfa, 0x75, 0x47, 0xaf, 0x41,
	0xde, 0x45, 0xa2, 0xd5, 0x23, 0x1e, 0x91, 0x85, 0xa5, 0x30, 0xc7, 0xd6, 0xd4, 0x1c, 0xf6, 0xb2,
	0x8b, 0xc4, 0xb7, 0x01, 0x5c, 0xff, 0x02, 0x96, 0x3c, 0x34, 0x6c, 0x3d, 0xc3, 0xb8, 0xb0, 0x1c,
	0xde, 0xd6, 0x4d, 0x53, 0x65, 0x0f, 0xb6, 0xb0, 0xa9, 0xb6, 0xb0, 0x79, 0xc4, 0x08, 0x3d, 0xcc,
	0x07, 0x41, 0x55, 0x45, 0x1e, 0x1a, 0x7e, 0x8d, 0x71, 0x74, 0x59, 0x95, 0xa0, 0x41, 0xd3, 0xb7,
	0x27, 0x9b, 0x9e, 0xec, 0x53, 0xb9, 0x06, 0x9b, 0x13, 0xc6, 0x78, 0x68, 0x6f, 0x01, 0x78, 0x58,
	0x08, 0xe4, 0xe2, 0x56, 0x3c, 0xbc, 0xf3, 0xca, 0x52, 0x77, 0xf6, 0xcf, 0x72, 0xb0, 0xd0, 0x10,
	0xae, 0x3e, 0x82, 0x8d, 0xf4, 0x2d, 0xff, 0x51, 0xca, 0xa8, 0xc9, 0x5a, 0xa2, 0xc6, 0xc1, 0x0d,
	0xc0, 0x71, 0x85, 0x03, 0x58, 0x4f, 0xdd, 0xae, 0xbb, 0xd3, 0x82, 0x25, 0xb1, 0xc6, 0xfe, 0xec,
	0xd8, 0x38, 0xaf, 0x0f, 0x7a, 0xca, 0xea, 0xda, 0x49, 0x8f, 0x34, 0x89, 0x34, 0xf6, 0x66, 0x45,
	0xc6, 0x19, 0x5d, 0xb8, 0x33, 0xbe, 0x2b, 0x1e, 0xa6, 0x07, 0x19, 0x83, 0x19, 0x95, 0x99, 0x60,
	0xd7, 0xa9, 0x35, 0x67, 0xa6, 0xd6, 0x9c, 0x99, 0x5a, 0xf6, 0xb8, 0xd4, 0x7f, 0xd2, 0xe0, 0xc3,
	0x69, 0xb3, 0xb2, 0x9a, 0x49, 0x20, 0xeb, 0x88, 0xf1, 0xf9, 0x8d, 0x8f, 0xc4, 0xd5, 0x38, 0xb0,
	0x3a, 0x36, 0xcb, 0x1e, 0xa4, 0x07, 0x4b, 0xa2, 0x8c, 0x8f, 0x67, 0x41, 0x5d, 0x65, 0x31, 0x16,
	0xbf, 0x0f, 0x2e, 0xee, 0xa1, 0xfd, 0xea, 0xbc, 0xa8, 0xbd, 0x3e, 0x2f, 0x6a, 0x7f, 0x9f, 0x17,
	0xb5, 0x9f, 0x2f, 0x8a, 0x73, 0xaf, 0x2f, 0x8a, 0x73, 0x7f, 0x5c, 0x14, 0xe7, 0xbe, 0xfb, 0xcc,
	0x25, 0xb2, 0xdb, 0x6f, 0x9b, 0x1d, 0xe6, 0x59, 0xed, 0x8e, 0x5f, 0x21, 0x94, 0xb2, 0x41, 0x38,
	0xe5, 0x84, 0x15, 0x27, 0xaa, 0xa8, 0x4f, 0xf4, 0x61, 0x74, 0xbd, 0xc3, 0xcf, 0xef, 0x76, 0x2e,
	0xfc, 0xfe, 0x3e, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x73, 0xf1, 0x57, 0xf3, 0x4c, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCollateralToken ...
	CreateCollateralToken(ctx context.Context, in *MsgCreateCollateralToken, opts ...grpc.CallOption) (*MsgCreateCollateralTokenResponse, error)
	// CreateSyntheticToken ...
	CreateSyntheticToken(ctx context.Context, in *MsgCreateSyntheticToken, opts ...grpc.CallOption) (*MsgCreateSyntheticTokenResponse, error)
	// EnrollRemoteRouter ...
	EnrollRemoteRouter(ctx context.Context, in *MsgEnrollRemoteRouter, opts ...grpc.CallOption) (*MsgEnrollRemoteRouterResponse, error)
	// SetRemoteRouter ...
	SetRemoteRouter(ctx context.Context, in *MsgSetRemoteRouter, opts ...grpc.CallOption) (*MsgSetRemoteRouterResponse, error)
	// UnrollRemoteRouter ...
	UnrollRemoteRouter(ctx context.Context, in *MsgUnrollRemoteRouter, opts ...grpc.CallOption) (*MsgUnrollRemoteRouterResponse, error)
	// SetInterchainSecurityModule ...
	SetInterchainSecurityModule(ctx context.Context, in *MsgSetInterchainSecurityModule, opts ...grpc.CallOption) (*MsgSetInterchainSecurityModuleResponse, error)
	// RemoteTransfer ...
	RemoteTransfer(ctx context.Context, in *MsgRemoteTransfer, opts ...grpc.CallOption) (*MsgRemoteTransferResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCollateralToken(ctx context.Context, in *MsgCreateCollateralToken, opts ...grpc.CallOption) (*MsgCreateCollateralTokenResponse, error) {
	out := new(MsgCreateCollateralTokenResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/CreateCollateralToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSyntheticToken(ctx context.Context, in *MsgCreateSyntheticToken, opts ...grpc.CallOption) (*MsgCreateSyntheticTokenResponse, error) {
	out := new(MsgCreateSyntheticTokenResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/CreateSyntheticToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnrollRemoteRouter(ctx context.Context, in *MsgEnrollRemoteRouter, opts ...grpc.CallOption) (*MsgEnrollRemoteRouterResponse, error) {
	out := new(MsgEnrollRemoteRouterResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/EnrollRemoteRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRemoteRouter(ctx context.Context, in *MsgSetRemoteRouter, opts ...grpc.CallOption) (*MsgSetRemoteRouterResponse, error) {
	out := new(MsgSetRemoteRouterResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/SetRemoteRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnrollRemoteRouter(ctx context.Context, in *MsgUnrollRemoteRouter, opts ...grpc.CallOption) (*MsgUnrollRemoteRouterResponse, error) {
	out := new(MsgUnrollRemoteRouterResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/UnrollRemoteRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetInterchainSecurityModule(ctx context.Context, in *MsgSetInterchainSecurityModule, opts ...grpc.CallOption) (*MsgSetInterchainSecurityModuleResponse, error) {
	out := new(MsgSetInterchainSecurityModuleResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/SetInterchainSecurityModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoteTransfer(ctx context.Context, in *MsgRemoteTransfer, opts ...grpc.CallOption) (*MsgRemoteTransferResponse, error) {
	out := new(MsgRemoteTransferResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.warp.v1.Msg/RemoteTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCollateralToken ...
	CreateCollateralToken(context.Context, *MsgCreateCollateralToken) (*MsgCreateCollateralTokenResponse, error)
	// CreateSyntheticToken ...
	CreateSyntheticToken(context.Context, *MsgCreateSyntheticToken) (*MsgCreateSyntheticTokenResponse, error)
	// EnrollRemoteRouter ...
	EnrollRemoteRouter(context.Context, *MsgEnrollRemoteRouter) (*MsgEnrollRemoteRouterResponse, error)
	// SetRemoteRouter ...
	SetRemoteRouter(context.Context, *MsgSetRemoteRouter) (*MsgSetRemoteRouterResponse, error)
	// UnrollRemoteRouter ...
	UnrollRemoteRouter(context.Context, *MsgUnrollRemoteRouter) (*MsgUnrollRemoteRouterResponse, error)
	// SetInterchainSecurityModule ...
	SetInterchainSecurityModule(context.Context, *MsgSetInterchainSecurityModule) (*MsgSetInterchainSecurityModuleResponse, error)
	// RemoteTransfer ...
	RemoteTransfer(context.Context, *MsgRemoteTransfer) (*MsgRemoteTransferResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCollateralToken(ctx context.Context, req *MsgCreateCollateralToken) (*MsgCreateCollateralTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollateralToken not implemented")
}
func (*UnimplementedMsgServer) CreateSyntheticToken(ctx context.Context, req *MsgCreateSyntheticToken) (*MsgCreateSyntheticTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyntheticToken not implemented")
}
func (*UnimplementedMsgServer) EnrollRemoteRouter(ctx context.Context, req *MsgEnrollRemoteRouter) (*MsgEnrollRemoteRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollRemoteRouter not implemented")
}
func (*UnimplementedMsgServer) SetRemoteRouter(ctx context.Context, req *MsgSetRemoteRouter) (*MsgSetRemoteRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRemoteRouter not implemented")
}
func (*UnimplementedMsgServer) UnrollRemoteRouter(ctx context.Context, req *MsgUnrollRemoteRouter) (*MsgUnrollRemoteRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnrollRemoteRouter not implemented")
}
func (*UnimplementedMsgServer) SetInterchainSecurityModule(ctx context.Context, req *MsgSetInterchainSecurityModule) (*MsgSetInterchainSecurityModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInterchainSecurityModule not implemented")
}
func (*UnimplementedMsgServer) RemoteTransfer(ctx context.Context, req *MsgRemoteTransfer) (*MsgRemoteTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteTransfer not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCollateralToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCollateralToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCollateralToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/CreateCollateralToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCollateralToken(ctx, req.(*MsgCreateCollateralToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSyntheticToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSyntheticToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSyntheticToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/CreateSyntheticToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSyntheticToken(ctx, req.(*MsgCreateSyntheticToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnrollRemoteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnrollRemoteRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnrollRemoteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/EnrollRemoteRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnrollRemoteRouter(ctx, req.(*MsgEnrollRemoteRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRemoteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRemoteRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRemoteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/SetRemoteRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRemoteRouter(ctx, req.(*MsgSetRemoteRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnrollRemoteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnrollRemoteRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnrollRemoteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/UnrollRemoteRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnrollRemoteRouter(ctx, req.(*MsgUnrollRemoteRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetInterchainSecurityModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetInterchainSecurityModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetInterchainSecurityModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/SetInterchainSecurityModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetInterchainSecurityModule(ctx, req.(*MsgSetInterchainSecurityModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoteTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoteTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoteTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.warp.v1.Msg/RemoteTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoteTransfer(ctx, req.(*MsgRemoteTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.warp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollateralToken",
			Handler:    _Msg_CreateCollateralToken_Handler,
		},
		{
			MethodName: "CreateSyntheticToken",
			Handler:    _Msg_CreateSyntheticToken_Handler,
		},
		{
			MethodName: "EnrollRemoteRouter",
			Handler:    _Msg_EnrollRemoteRouter_Handler,
		},
		{
			MethodName: "SetRemoteRouter",
			Handler:    _Msg_SetRemoteRouter_Handler,
		},
		{
			MethodName: "UnrollRemoteRouter",
			Handler:    _Msg_UnrollRemoteRouter_Handler,
		},
		{
			MethodName: "SetInterchainSecurityModule",
			Handler:    _Msg_SetInterchainSecurityModule_Handler,
		},
		{
			MethodName: "RemoteTransfer",
			Handler:    _Msg_RemoteTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/warp/v1/tx.proto",
}

func (m *MsgCreateCollateralToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCollateralToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCollateralToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginDenom) > 0 {
		i -= len(m.OriginDenom)
		copy(dAtA[i:], m.OriginDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginMailbox) > 0 {
		i -= len(m.OriginMailbox)
		copy(dAtA[i:], m.OriginMailbox)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginMailbox)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCollateralTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCollateralTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCollateralTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSyntheticToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSyntheticToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSyntheticToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginMailbox) > 0 {
		i -= len(m.OriginMailbox)
		copy(dAtA[i:], m.OriginMailbox)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginMailbox)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSyntheticTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSyntheticTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSyntheticTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnrollRemoteRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnrollRemoteRouter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnrollRemoteRouter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoteRouter != nil {
		{
			size, err := m.RemoteRouter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnrollRemoteRouterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnrollRemoteRouterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnrollRemoteRouterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetRemoteRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRemoteRouter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRemoteRouter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoteRouter != nil {
		{
			size, err := m.RemoteRouter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetRemoteRouterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetRemoteRouterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetRemoteRouterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnrollRemoteRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnrollRemoteRouter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnrollRemoteRouter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReceiverDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceiverDomain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnrollRemoteRouterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnrollRemoteRouterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnrollRemoteRouterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetInterchainSecurityModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetInterchainSecurityModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetInterchainSecurityModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IsmId) > 0 {
		i -= len(m.IsmId)
		copy(dAtA[i:], m.IsmId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IsmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetInterchainSecurityModuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetInterchainSecurityModuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetInterchainSecurityModuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoteTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoteTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoteTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.GasLimit.Size()
		i -= size
		if _, err := m.GasLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoteTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoteTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoteTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCollateralToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginMailbox)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCollateralTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSyntheticToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginMailbox)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSyntheticTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEnrollRemoteRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RemoteRouter != nil {
		l = m.RemoteRouter.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEnrollRemoteRouterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetRemoteRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RemoteRouter != nil {
		l = m.RemoteRouter.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetRemoteRouterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnrollRemoteRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReceiverDomain != 0 {
		n += 1 + sovTx(uint64(m.ReceiverDomain))
	}
	return n
}

func (m *MsgUnrollRemoteRouterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetInterchainSecurityModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IsmId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetInterchainSecurityModuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoteTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.GasLimit.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxFee.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoteTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCollateralToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCollateralToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCollateralToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginMailbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginMailbox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCollateralTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCollateralTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCollateralTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSyntheticToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSyntheticToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSyntheticToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginMailbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginMailbox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &TokenMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSyntheticTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSyntheticTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSyntheticTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnrollRemoteRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnrollRemoteRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnrollRemoteRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteRouter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteRouter == nil {
				m.RemoteRouter = &RemoteRouter{}
			}
			if err := m.RemoteRouter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnrollRemoteRouterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnrollRemoteRouterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnrollRemoteRouterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRemoteRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRemoteRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRemoteRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteRouter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteRouter == nil {
				m.RemoteRouter = &RemoteRouter{}
			}
			if err := m.RemoteRouter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetRemoteRouterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetRemoteRouterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetRemoteRouterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnrollRemoteRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnrollRemoteRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnrollRemoteRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverDomain", wireType)
			}
			m.ReceiverDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnrollRemoteRouterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnrollRemoteRouterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnrollRemoteRouterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetInterchainSecurityModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetInterchainSecurityModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetInterchainSecurityModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetInterchainSecurityModuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetInterchainSecurityModuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetInterchainSecurityModuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoteTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoteTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoteTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoteTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoteTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoteTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
