// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/warp/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HypTokenType int32

const (
	// HYP_TOKEN_COLLATERAL ...
	HYP_TOKEN_COLLATERAL HypTokenType = 0
	// HYP_TOKEN ...
	HYP_TOKEN_SYNTHETIC HypTokenType = 1
)

var HypTokenType_name = map[int32]string{
	0: "HYP_TOKEN_COLLATERAL",
	1: "HYP_TOKEN_SYNTHETIC",
}

var HypTokenType_value = map[string]int32{
	"HYP_TOKEN_COLLATERAL": 0,
	"HYP_TOKEN_SYNTHETIC":  1,
}

func (x HypTokenType) String() string {
	return proto.EnumName(HypTokenType_name, int32(x))
}

func (HypTokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{0}
}

// Params defines the parameters of the module.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params     Params     `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Tokens     []HypToken `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens"`
	TokenCount int64      `protobuf:"varint,3,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetTokens() []HypToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GenesisState) GetTokenCount() int64 {
	if m != nil {
		return m.TokenCount
	}
	return 0
}

type HypToken struct {
	Id                []byte                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator           string                `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	TokenType         HypTokenType          `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3,enum=hyperlane.warp.v1.HypTokenType" json:"token_type,omitempty"`
	OriginMailbox     []byte                `protobuf:"bytes,4,opt,name=origin_mailbox,json=originMailbox,proto3" json:"origin_mailbox,omitempty"`
	OriginDenom       string                `protobuf:"bytes,5,opt,name=origin_denom,json=originDenom,proto3" json:"origin_denom,omitempty"`
	ReceiverDomain    uint32                `protobuf:"varint,6,opt,name=receiver_domain,json=receiverDomain,proto3" json:"receiver_domain,omitempty"`
	ReceiverContract  []byte                `protobuf:"bytes,7,opt,name=receiver_contract,json=receiverContract,proto3" json:"receiver_contract,omitempty"`
	CollateralBalance cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=collateral_balance,json=collateralBalance,proto3,customtype=cosmossdk.io/math.Int" json:"collateral_balance"`
}

func (m *HypToken) Reset()         { *m = HypToken{} }
func (m *HypToken) String() string { return proto.CompactTextString(m) }
func (*HypToken) ProtoMessage()    {}
func (*HypToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{2}
}
func (m *HypToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HypToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HypToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HypToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HypToken.Merge(m, src)
}
func (m *HypToken) XXX_Size() int {
	return m.Size()
}
func (m *HypToken) XXX_DiscardUnknown() {
	xxx_messageInfo_HypToken.DiscardUnknown(m)
}

var xxx_messageInfo_HypToken proto.InternalMessageInfo

func (m *HypToken) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HypToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *HypToken) GetTokenType() HypTokenType {
	if m != nil {
		return m.TokenType
	}
	return HYP_TOKEN_COLLATERAL
}

func (m *HypToken) GetOriginMailbox() []byte {
	if m != nil {
		return m.OriginMailbox
	}
	return nil
}

func (m *HypToken) GetOriginDenom() string {
	if m != nil {
		return m.OriginDenom
	}
	return ""
}

func (m *HypToken) GetReceiverDomain() uint32 {
	if m != nil {
		return m.ReceiverDomain
	}
	return 0
}

func (m *HypToken) GetReceiverContract() []byte {
	if m != nil {
		return m.ReceiverContract
	}
	return nil
}

func init() {
	proto.RegisterEnum("hyperlane.warp.v1.HypTokenType", HypTokenType_name, HypTokenType_value)
	proto.RegisterType((*Params)(nil), "hyperlane.warp.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "hyperlane.warp.v1.GenesisState")
	proto.RegisterType((*HypToken)(nil), "hyperlane.warp.v1.HypToken")
}

func init() { proto.RegisterFile("hyperlane/warp/v1/types.proto", fileDescriptor_7372986c61417e18) }

var fileDescriptor_7372986c61417e18 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x4f, 0xdb, 0x30,
	0x18, 0xc6, 0x9b, 0xc2, 0x0a, 0xb8, 0xa5, 0xa3, 0x1e, 0x68, 0xa1, 0x13, 0x69, 0x87, 0x36, 0xad,
	0x62, 0x22, 0x11, 0xdd, 0x65, 0x9a, 0x26, 0x24, 0x5a, 0x10, 0xa0, 0x75, 0x80, 0x42, 0x2e, 0xec,
	0x12, 0x39, 0x89, 0x17, 0x2c, 0x12, 0x3b, 0x72, 0x4c, 0x47, 0xbf, 0xc1, 0xb4, 0xd3, 0xbe, 0xc3,
	0x2e, 0xbb, 0x4c, 0xe2, 0xb0, 0x0f, 0xc1, 0x11, 0xed, 0x34, 0xed, 0x80, 0x26, 0x38, 0xf0, 0x25,
	0x76, 0x98, 0x62, 0xa7, 0x65, 0xff, 0xb4, 0x4b, 0x64, 0xff, 0x9e, 0xf7, 0xb1, 0x1f, 0xbd, 0xaf,
	0x03, 0x16, 0x0e, 0x07, 0x09, 0xe6, 0x11, 0xa2, 0xd8, 0x7a, 0x83, 0x78, 0x62, 0xf5, 0x57, 0x2c,
	0x31, 0x48, 0x70, 0x6a, 0x26, 0x9c, 0x09, 0x06, 0x6b, 0x23, 0xd9, 0xcc, 0x64, 0xb3, 0xbf, 0x52,
	0x9f, 0xf7, 0x59, 0x1a, 0xb3, 0xd4, 0x95, 0x05, 0x96, 0xda, 0xa8, 0xea, 0xfa, 0x6c, 0xc8, 0x42,
	0xa6, 0x78, 0xb6, 0xca, 0x69, 0x0d, 0xc5, 0x84, 0x32, 0x4b, 0x7e, 0x73, 0x34, 0x1f, 0x32, 0x16,
	0x46, 0xd8, 0x92, 0x3b, 0xef, 0xf8, 0xb5, 0x85, 0xe8, 0x40, 0x49, 0x8b, 0x0f, 0x40, 0x69, 0x0f,
	0x71, 0x14, 0xa7, 0xcf, 0xea, 0xef, 0xae, 0x4f, 0x97, 0xe6, 0xfe, 0xc8, 0xa7, 0xb4, 0xc5, 0x4f,
	0x1a, 0xa8, 0x6c, 0x62, 0x8a, 0x53, 0x92, 0xee, 0x0b, 0x24, 0x30, 0x7c, 0x0e, 0x4a, 0x89, 0x94,
	0x74, 0xad, 0xa9, 0xb5, 0xca, 0xed, 0x79, 0xf3, 0xaf, 0xe4, 0xa6, 0xf2, 0x76, 0xa6, 0xce, 0x2e,
	0x1a, 0x85, 0x8f, 0xd7, 0xa7, 0x4b, 0x9a, 0x9d, 0x7b, 0xe0, 0x2a, 0x28, 0x09, 0x76, 0x84, 0x69,
	0xaa, 0x17, 0x9b, 0x63, 0xad, 0x72, 0xfb, 0xde, 0x3f, 0xdc, 0x5b, 0x83, 0xc4, 0xc9, 0x6a, 0x7e,
	0xf3, 0x2b, 0x17, 0x6c, 0x80, 0xb2, 0x5c, 0xb9, 0x3e, 0x3b, 0xa6, 0x42, 0x1f, 0x6b, 0x6a, 0xad,
	0x31, 0x1b, 0x48, 0xd4, 0xcd, 0xc8, 0xe2, 0x8f, 0x22, 0x98, 0x1c, 0x1e, 0x00, 0xab, 0xa0, 0x48,
	0x02, 0x99, 0xb3, 0x62, 0x17, 0x49, 0x00, 0xdb, 0x60, 0xc2, 0xe7, 0x18, 0x09, 0xc6, 0xf5, 0x62,
	0x53, 0x6b, 0x4d, 0x75, 0xf4, 0x2f, 0x9f, 0x97, 0x67, 0xf3, 0xce, 0xae, 0x05, 0x01, 0xc7, 0x69,
	0xba, 0x2f, 0x38, 0xa1, 0xa1, 0x3d, 0x2c, 0x84, 0xab, 0x40, 0x1d, 0xef, 0x66, 0xd3, 0x92, 0x17,
	0x56, 0xdb, 0x8d, 0xff, 0xa4, 0x76, 0x06, 0x09, 0xb6, 0xa7, 0xc4, 0x70, 0x09, 0x1f, 0x82, 0x2a,
	0xe3, 0x24, 0x24, 0xd4, 0x8d, 0x11, 0x89, 0x3c, 0x76, 0xa2, 0x8f, 0xcb, 0x3c, 0xd3, 0x8a, 0xbe,
	0x54, 0x10, 0xde, 0x07, 0x95, 0xbc, 0x2c, 0xc0, 0x94, 0xc5, 0xfa, 0xad, 0x2c, 0x9f, 0x5d, 0x56,
	0x6c, 0x3d, 0x43, 0xf0, 0x11, 0xb8, 0xcd, 0xb1, 0x8f, 0x49, 0x1f, 0x73, 0x37, 0x60, 0x31, 0x22,
	0x54, 0x2f, 0x35, 0xb5, 0xd6, 0xb4, 0x5d, 0x1d, 0xe2, 0x75, 0x49, 0xe1, 0x63, 0x50, 0x1b, 0x15,
	0xfa, 0x8c, 0x0a, 0x8e, 0x7c, 0xa1, 0x4f, 0xc8, 0x5b, 0x67, 0x86, 0x42, 0x37, 0xe7, 0xb0, 0x07,
	0xa0, 0xcf, 0xa2, 0x08, 0x09, 0xcc, 0x51, 0xe4, 0x7a, 0x28, 0x42, 0xd4, 0xc7, 0xfa, 0xa4, 0x6c,
	0xcf, 0x42, 0x36, 0x80, 0x6f, 0x17, 0x8d, 0x39, 0xd5, 0xa2, 0x34, 0x38, 0x32, 0x09, 0xb3, 0x62,
	0x24, 0x0e, 0xcd, 0x6d, 0x2a, 0xec, 0xda, 0x8d, 0xb1, 0xa3, 0x7c, 0x4b, 0x9b, 0xa0, 0xf2, 0x6b,
	0x23, 0xa0, 0x0e, 0x66, 0xb7, 0x0e, 0xf6, 0x5c, 0x67, 0xf7, 0xc5, 0xc6, 0x8e, 0xdb, 0xdd, 0xed,
	0xf5, 0xd6, 0x9c, 0x0d, 0x7b, 0xad, 0x37, 0x53, 0x80, 0x77, 0xc1, 0x9d, 0x1b, 0x65, 0xff, 0x60,
	0xc7, 0xd9, 0xda, 0x70, 0xb6, 0xbb, 0x33, 0x5a, 0x7d, 0xfc, 0xed, 0x07, 0xa3, 0xd0, 0xb1, 0xcf,
	0x2e, 0x0d, 0xed, 0xfc, 0xd2, 0xd0, 0xbe, 0x5f, 0x1a, 0xda, 0xfb, 0x2b, 0xa3, 0x70, 0x7e, 0x65,
	0x14, 0xbe, 0x5e, 0x19, 0x85, 0x57, 0x4f, 0x43, 0x22, 0x0e, 0x8f, 0x3d, 0xd3, 0x67, 0xb1, 0xe5,
	0xf9, 0xc9, 0x32, 0xa1, 0x94, 0xf5, 0x91, 0x20, 0x8c, 0xa6, 0xd6, 0x68, 0x2c, 0xcb, 0x2a, 0xb1,
	0x75, 0xa2, 0x1e, 0xb3, 0xfc, 0xd3, 0xbc, 0x92, 0x7c, 0xf8, 0x4f, 0x7e, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x94, 0x89, 0xaa, 0x8b, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TokenCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HypToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HypToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HypToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CollateralBalance.Size()
		i -= size
		if _, err := m.CollateralBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ReceiverContract) > 0 {
		i -= len(m.ReceiverContract)
		copy(dAtA[i:], m.ReceiverContract)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReceiverContract)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReceiverDomain != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ReceiverDomain))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OriginDenom) > 0 {
		i -= len(m.OriginDenom)
		copy(dAtA[i:], m.OriginDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OriginMailbox) > 0 {
		i -= len(m.OriginMailbox)
		copy(dAtA[i:], m.OriginMailbox)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginMailbox)))
		i--
		dAtA[i] = 0x22
	}
	if m.TokenType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TokenCount != 0 {
		n += 1 + sovTypes(uint64(m.TokenCount))
	}
	return n
}

func (m *HypToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovTypes(uint64(m.TokenType))
	}
	l = len(m.OriginMailbox)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OriginDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ReceiverDomain != 0 {
		n += 1 + sovTypes(uint64(m.ReceiverDomain))
	}
	l = len(m.ReceiverContract)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.CollateralBalance.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, HypToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenCount", wireType)
			}
			m.TokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HypToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HypToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HypToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= HypTokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginMailbox", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginMailbox = append(m.OriginMailbox[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginMailbox == nil {
				m.OriginMailbox = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverDomain", wireType)
			}
			m.ReceiverDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverContract", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverContract = append(m.ReceiverContract[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiverContract == nil {
				m.ReceiverContract = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
