// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/warp/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_bcp_innovations_hyperlane_cosmos_util "github.com/bcp-innovations/hyperlane-cosmos/util"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HypTokenType ...
type HypTokenType int32

const (
	// HYP_TOKEN_TYPE_UNSPECIFIED ...
	HYP_TOKEN_TYPE_UNSPECIFIED HypTokenType = 0
	// HYP_TOKEN_TYPE_COLLATERAL ...
	HYP_TOKEN_TYPE_COLLATERAL HypTokenType = 1
	// HYP_TOKEN_TYPE_SYNTHETIC ...
	HYP_TOKEN_TYPE_SYNTHETIC HypTokenType = 2
)

var HypTokenType_name = map[int32]string{
	0: "HYP_TOKEN_TYPE_UNSPECIFIED",
	1: "HYP_TOKEN_TYPE_COLLATERAL",
	2: "HYP_TOKEN_TYPE_SYNTHETIC",
}

var HypTokenType_value = map[string]int32{
	"HYP_TOKEN_TYPE_UNSPECIFIED": 0,
	"HYP_TOKEN_TYPE_COLLATERAL":  1,
	"HYP_TOKEN_TYPE_SYNTHETIC":   2,
}

func (x HypTokenType) String() string {
	return proto.EnumName(HypTokenType_name, int32(x))
}

func (HypTokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{0}
}

// Params
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// HypToken ...
type HypToken struct {
	Id                github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress  `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"id"`
	Owner             string                                                       `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	TokenType         HypTokenType                                                 `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3,enum=hyperlane.warp.v1.HypTokenType" json:"token_type,omitempty"`
	OriginMailbox     github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress  `protobuf:"bytes,4,opt,name=origin_mailbox,json=originMailbox,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"origin_mailbox"`
	OriginDenom       string                                                       `protobuf:"bytes,5,opt,name=origin_denom,json=originDenom,proto3" json:"origin_denom,omitempty"`
	CollateralBalance cosmossdk_io_math.Int                                        `protobuf:"bytes,6,opt,name=collateral_balance,json=collateralBalance,proto3,customtype=cosmossdk.io/math.Int" json:"collateral_balance"`
	IsmId             *github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress `protobuf:"bytes,7,opt,name=ism_id,json=ismId,proto3,customtype=github.com/bcp-innovations/hyperlane-cosmos/util.HexAddress" json:"ism_id,omitempty"`
}

func (m *HypToken) Reset()         { *m = HypToken{} }
func (m *HypToken) String() string { return proto.CompactTextString(m) }
func (*HypToken) ProtoMessage()    {}
func (*HypToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{1}
}
func (m *HypToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HypToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HypToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HypToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HypToken.Merge(m, src)
}
func (m *HypToken) XXX_Size() int {
	return m.Size()
}
func (m *HypToken) XXX_DiscardUnknown() {
	xxx_messageInfo_HypToken.DiscardUnknown(m)
}

var xxx_messageInfo_HypToken proto.InternalMessageInfo

func (m *HypToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *HypToken) GetTokenType() HypTokenType {
	if m != nil {
		return m.TokenType
	}
	return HYP_TOKEN_TYPE_UNSPECIFIED
}

func (m *HypToken) GetOriginDenom() string {
	if m != nil {
		return m.OriginDenom
	}
	return ""
}

// RemoteRouter ...
type RemoteRouter struct {
	ReceiverDomain   uint32                `protobuf:"varint,1,opt,name=receiver_domain,json=receiverDomain,proto3" json:"receiver_domain,omitempty"`
	ReceiverContract string                `protobuf:"bytes,2,opt,name=receiver_contract,json=receiverContract,proto3" json:"receiver_contract,omitempty"`
	Gas              cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=gas,proto3,customtype=cosmossdk.io/math.Int" json:"gas"`
}

func (m *RemoteRouter) Reset()         { *m = RemoteRouter{} }
func (m *RemoteRouter) String() string { return proto.CompactTextString(m) }
func (*RemoteRouter) ProtoMessage()    {}
func (*RemoteRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_7372986c61417e18, []int{2}
}
func (m *RemoteRouter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteRouter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteRouter.Merge(m, src)
}
func (m *RemoteRouter) XXX_Size() int {
	return m.Size()
}
func (m *RemoteRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteRouter.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteRouter proto.InternalMessageInfo

func (m *RemoteRouter) GetReceiverDomain() uint32 {
	if m != nil {
		return m.ReceiverDomain
	}
	return 0
}

func (m *RemoteRouter) GetReceiverContract() string {
	if m != nil {
		return m.ReceiverContract
	}
	return ""
}

func init() {
	proto.RegisterEnum("hyperlane.warp.v1.HypTokenType", HypTokenType_name, HypTokenType_value)
	proto.RegisterType((*Params)(nil), "hyperlane.warp.v1.Params")
	proto.RegisterType((*HypToken)(nil), "hyperlane.warp.v1.HypToken")
	proto.RegisterType((*RemoteRouter)(nil), "hyperlane.warp.v1.RemoteRouter")
}

func init() { proto.RegisterFile("hyperlane/warp/v1/types.proto", fileDescriptor_7372986c61417e18) }

var fileDescriptor_7372986c61417e18 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xb5, 0xd3, 0x36, 0xd0, 0xa5, 0x2d, 0xc9, 0xaa, 0x95, 0xdc, 0x88, 0xba, 0xa5, 0x42, 0xa2,
	0x2a, 0xaa, 0xad, 0xc2, 0x05, 0x81, 0x84, 0xd4, 0xa6, 0x46, 0x89, 0x08, 0x6d, 0xe4, 0x98, 0x43,
	0x7a, 0xb1, 0x36, 0xf6, 0xca, 0x59, 0x6a, 0xef, 0x9a, 0xf5, 0x26, 0x4d, 0xfe, 0xa0, 0xe2, 0xc4,
	0x85, 0x2f, 0xe0, 0x07, 0x38, 0xf0, 0x11, 0x3d, 0x56, 0x9c, 0x10, 0x87, 0x0a, 0x25, 0x07, 0x7e,
	0x03, 0xd9, 0xeb, 0x04, 0x14, 0x0e, 0x08, 0xc1, 0xc5, 0x5a, 0xbf, 0xf7, 0x76, 0xe6, 0xcd, 0xcc,
	0x0e, 0xd8, 0xe8, 0x0e, 0x63, 0xcc, 0x43, 0x44, 0xb1, 0x79, 0x8e, 0x78, 0x6c, 0xf6, 0xf7, 0x4d,
	0x31, 0x8c, 0x71, 0x62, 0xc4, 0x9c, 0x09, 0x06, 0xcb, 0x53, 0xda, 0x48, 0x69, 0xa3, 0xbf, 0x5f,
	0x59, 0xf7, 0x58, 0x12, 0xb1, 0xc4, 0xcd, 0x04, 0xa6, 0xfc, 0x91, 0xea, 0xca, 0x6a, 0xc0, 0x02,
	0x26, 0xf1, 0xf4, 0x94, 0xa3, 0x65, 0x14, 0x11, 0xca, 0xcc, 0xec, 0x2b, 0xa1, 0xed, 0x7b, 0xa0,
	0xd8, 0x44, 0x1c, 0x45, 0xc9, 0x93, 0xca, 0xdb, 0xef, 0x1f, 0x77, 0xd7, 0x66, 0x4c, 0x48, 0x6e,
	0xfb, 0x62, 0x1e, 0xdc, 0xac, 0x0d, 0x63, 0x87, 0x9d, 0x61, 0x0a, 0x5b, 0xa0, 0x40, 0x7c, 0x4d,
	0xdd, 0x52, 0x77, 0x16, 0x0f, 0xab, 0x97, 0xd7, 0x9b, 0xca, 0xd7, 0xeb, 0xcd, 0xa7, 0x01, 0x11,
	0xdd, 0x5e, 0xc7, 0xf0, 0x58, 0x64, 0x76, 0xbc, 0x78, 0x8f, 0x50, 0xca, 0xfa, 0x48, 0x10, 0x46,
	0x13, 0x73, 0x1a, 0x72, 0x4f, 0x5a, 0x34, 0x7b, 0x82, 0x84, 0x46, 0x0d, 0x0f, 0x0e, 0x7c, 0x9f,
	0xe3, 0x24, 0xb1, 0x0b, 0xc4, 0x87, 0x06, 0x58, 0x60, 0xe7, 0x14, 0x73, 0xad, 0x90, 0xc5, 0xd5,
	0x3e, 0x7f, 0xda, 0x5b, 0xcd, 0x2b, 0xca, 0x65, 0x2d, 0xc1, 0x09, 0x0d, 0x6c, 0x29, 0x83, 0xcf,
	0x00, 0x10, 0xa9, 0x1b, 0x37, 0xed, 0x91, 0x36, 0xb7, 0xa5, 0xee, 0xac, 0x3c, 0xdc, 0x34, 0x7e,
	0xeb, 0x91, 0x31, 0x71, 0xed, 0x0c, 0x63, 0x6c, 0x2f, 0x8a, 0xc9, 0x11, 0xbe, 0x06, 0x2b, 0x8c,
	0x93, 0x80, 0x50, 0x37, 0x42, 0x24, 0xec, 0xb0, 0x81, 0x36, 0xff, 0xff, 0x0a, 0x5a, 0x96, 0xa1,
	0x5f, 0xca, 0xc8, 0xf0, 0x2e, 0x58, 0xca, 0x73, 0xf9, 0x98, 0xb2, 0x48, 0x5b, 0x48, 0x33, 0xd9,
	0xb7, 0x24, 0x76, 0x94, 0x42, 0xb0, 0x01, 0xa0, 0xc7, 0xc2, 0x10, 0x09, 0xcc, 0x51, 0xe8, 0x76,
	0x50, 0x88, 0xa8, 0x87, 0xb5, 0x62, 0x66, 0x69, 0x23, 0xb7, 0xb4, 0x26, 0xb3, 0x25, 0xfe, 0x99,
	0x41, 0x98, 0x19, 0x21, 0xd1, 0x35, 0xea, 0x54, 0xd8, 0xe5, 0x9f, 0x17, 0x0f, 0xe5, 0x3d, 0x78,
	0x0a, 0x8a, 0x24, 0x89, 0x5c, 0xe2, 0x6b, 0x37, 0xa6, 0x45, 0xa9, 0xff, 0x5a, 0xd4, 0x02, 0x49,
	0xa2, 0xba, 0xbf, 0xfd, 0x5e, 0x05, 0x4b, 0x36, 0x8e, 0x98, 0xc0, 0x36, 0xeb, 0x09, 0xcc, 0xe1,
	0x7d, 0x70, 0x9b, 0x63, 0x0f, 0x93, 0x3e, 0xe6, 0xae, 0xcf, 0x22, 0x44, 0x68, 0xf6, 0x36, 0x96,
	0xed, 0x95, 0x09, 0x7c, 0x94, 0xa1, 0xf0, 0x01, 0x28, 0x4f, 0x85, 0x1e, 0xa3, 0x82, 0x23, 0x4f,
	0xc8, 0x71, 0xdb, 0xa5, 0x09, 0x51, 0xcd, 0x71, 0x68, 0x82, 0xb9, 0x00, 0x25, 0xd9, 0x60, 0xff,
	0xd8, 0x81, 0x54, 0xb9, 0xfb, 0x06, 0x2c, 0xfd, 0x3a, 0x6b, 0xa8, 0x83, 0x4a, 0xad, 0xdd, 0x74,
	0x9d, 0x93, 0x17, 0xd6, 0xb1, 0xeb, 0xb4, 0x9b, 0x96, 0xfb, 0xea, 0xb8, 0xd5, 0xb4, 0xaa, 0xf5,
	0xe7, 0x75, 0xeb, 0xa8, 0xa4, 0xc0, 0x0d, 0xb0, 0x3e, 0xc3, 0x57, 0x4f, 0x1a, 0x8d, 0x03, 0xc7,
	0xb2, 0x0f, 0x1a, 0x25, 0x15, 0xde, 0x01, 0xda, 0x0c, 0xdd, 0x6a, 0x1f, 0x3b, 0x35, 0xcb, 0xa9,
	0x57, 0x4b, 0x85, 0xca, 0xfc, 0xc5, 0x07, 0x5d, 0x39, 0xb4, 0x2f, 0x47, 0xba, 0x7a, 0x35, 0xd2,
	0xd5, 0x6f, 0x23, 0x5d, 0x7d, 0x37, 0xd6, 0x95, 0xab, 0xb1, 0xae, 0x7c, 0x19, 0xeb, 0xca, 0xe9,
	0xe3, 0xbf, 0x69, 0xf4, 0x40, 0xae, 0x5a, 0xb6, 0xec, 0x9d, 0x62, 0xb6, 0x96, 0x8f, 0x7e, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xca, 0x37, 0xa7, 0x0e, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HypToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HypToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HypToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsmId != nil {
		{
			size := m.IsmId.Size()
			i -= size
			if _, err := m.IsmId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.CollateralBalance.Size()
		i -= size
		if _, err := m.CollateralBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.OriginDenom) > 0 {
		i -= len(m.OriginDenom)
		copy(dAtA[i:], m.OriginDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginDenom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.OriginMailbox.Size()
		i -= size
		if _, err := m.OriginMailbox.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.TokenType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RemoteRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteRouter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteRouter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Gas.Size()
		i -= size
		if _, err := m.Gas.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ReceiverContract) > 0 {
		i -= len(m.ReceiverContract)
		copy(dAtA[i:], m.ReceiverContract)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReceiverContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReceiverDomain != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ReceiverDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HypToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovTypes(uint64(m.TokenType))
	}
	l = m.OriginMailbox.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.OriginDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.CollateralBalance.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.IsmId != nil {
		l = m.IsmId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RemoteRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceiverDomain != 0 {
		n += 1 + sovTypes(uint64(m.ReceiverDomain))
	}
	l = len(m.ReceiverContract)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Gas.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HypToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HypToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HypToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= HypTokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginMailbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OriginMailbox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_bcp_innovations_hyperlane_cosmos_util.HexAddress
			m.IsmId = &v
			if err := m.IsmId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverDomain", wireType)
			}
			m.ReceiverDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
