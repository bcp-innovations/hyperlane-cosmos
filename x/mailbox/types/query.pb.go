// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/mailbox/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMailboxesRequest struct {
}

func (m *QueryMailboxesRequest) Reset()         { *m = QueryMailboxesRequest{} }
func (m *QueryMailboxesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxesRequest) ProtoMessage()    {}
func (*QueryMailboxesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{0}
}
func (m *QueryMailboxesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxesRequest.Merge(m, src)
}
func (m *QueryMailboxesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxesRequest proto.InternalMessageInfo

type QueryMailboxesResponse struct {
	Mailboxes []Mailbox `protobuf:"bytes,1,rep,name=mailboxes,proto3" json:"mailboxes"`
}

func (m *QueryMailboxesResponse) Reset()         { *m = QueryMailboxesResponse{} }
func (m *QueryMailboxesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxesResponse) ProtoMessage()    {}
func (*QueryMailboxesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{1}
}
func (m *QueryMailboxesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxesResponse.Merge(m, src)
}
func (m *QueryMailboxesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxesResponse proto.InternalMessageInfo

func (m *QueryMailboxesResponse) GetMailboxes() []Mailbox {
	if m != nil {
		return m.Mailboxes
	}
	return nil
}

type QueryMailboxRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMailboxRequest) Reset()         { *m = QueryMailboxRequest{} }
func (m *QueryMailboxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxRequest) ProtoMessage()    {}
func (*QueryMailboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{2}
}
func (m *QueryMailboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxRequest.Merge(m, src)
}
func (m *QueryMailboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxRequest proto.InternalMessageInfo

func (m *QueryMailboxRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryMailboxResponse struct {
	Mailbox Mailbox `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox"`
}

func (m *QueryMailboxResponse) Reset()         { *m = QueryMailboxResponse{} }
func (m *QueryMailboxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxResponse) ProtoMessage()    {}
func (*QueryMailboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{3}
}
func (m *QueryMailboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxResponse.Merge(m, src)
}
func (m *QueryMailboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxResponse proto.InternalMessageInfo

func (m *QueryMailboxResponse) GetMailbox() Mailbox {
	if m != nil {
		return m.Mailbox
	}
	return Mailbox{}
}

type QueryCountRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryCountRequest) Reset()         { *m = QueryCountRequest{} }
func (m *QueryCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCountRequest) ProtoMessage()    {}
func (*QueryCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{4}
}
func (m *QueryCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountRequest.Merge(m, src)
}
func (m *QueryCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountRequest proto.InternalMessageInfo

func (m *QueryCountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryCountResponse struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryCountResponse) Reset()         { *m = QueryCountResponse{} }
func (m *QueryCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCountResponse) ProtoMessage()    {}
func (*QueryCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{5}
}
func (m *QueryCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountResponse.Merge(m, src)
}
func (m *QueryCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountResponse proto.InternalMessageInfo

func (m *QueryCountResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryRootRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRootRequest) Reset()         { *m = QueryRootRequest{} }
func (m *QueryRootRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRootRequest) ProtoMessage()    {}
func (*QueryRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{6}
}
func (m *QueryRootRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRootRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRootRequest.Merge(m, src)
}
func (m *QueryRootRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRootRequest proto.InternalMessageInfo

func (m *QueryRootRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryRootResponse struct {
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *QueryRootResponse) Reset()         { *m = QueryRootResponse{} }
func (m *QueryRootResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRootResponse) ProtoMessage()    {}
func (*QueryRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{7}
}
func (m *QueryRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRootResponse.Merge(m, src)
}
func (m *QueryRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRootResponse proto.InternalMessageInfo

func (m *QueryRootResponse) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type QueryDeliveredRequest struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *QueryDeliveredRequest) Reset()         { *m = QueryDeliveredRequest{} }
func (m *QueryDeliveredRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeliveredRequest) ProtoMessage()    {}
func (*QueryDeliveredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{8}
}
func (m *QueryDeliveredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeliveredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeliveredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeliveredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeliveredRequest.Merge(m, src)
}
func (m *QueryDeliveredRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeliveredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeliveredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeliveredRequest proto.InternalMessageInfo

func (m *QueryDeliveredRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type QueryDeliveredResponse struct {
	Delivered bool `protobuf:"varint,1,opt,name=delivered,proto3" json:"delivered,omitempty"`
}

func (m *QueryDeliveredResponse) Reset()         { *m = QueryDeliveredResponse{} }
func (m *QueryDeliveredResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeliveredResponse) ProtoMessage()    {}
func (*QueryDeliveredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{9}
}
func (m *QueryDeliveredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeliveredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeliveredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeliveredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeliveredResponse.Merge(m, src)
}
func (m *QueryDeliveredResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeliveredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeliveredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeliveredResponse proto.InternalMessageInfo

func (m *QueryDeliveredResponse) GetDelivered() bool {
	if m != nil {
		return m.Delivered
	}
	return false
}

type QueryLatestCheckpointRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLatestCheckpointRequest) Reset()         { *m = QueryLatestCheckpointRequest{} }
func (m *QueryLatestCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestCheckpointRequest) ProtoMessage()    {}
func (*QueryLatestCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{10}
}
func (m *QueryLatestCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestCheckpointRequest.Merge(m, src)
}
func (m *QueryLatestCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestCheckpointRequest proto.InternalMessageInfo

func (m *QueryLatestCheckpointRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryLatestCheckpointResponse struct {
	Root  []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryLatestCheckpointResponse) Reset()         { *m = QueryLatestCheckpointResponse{} }
func (m *QueryLatestCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestCheckpointResponse) ProtoMessage()    {}
func (*QueryLatestCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{11}
}
func (m *QueryLatestCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestCheckpointResponse.Merge(m, src)
}
func (m *QueryLatestCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestCheckpointResponse proto.InternalMessageInfo

func (m *QueryLatestCheckpointResponse) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *QueryLatestCheckpointResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RecipientIsmRequest struct {
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *RecipientIsmRequest) Reset()         { *m = RecipientIsmRequest{} }
func (m *RecipientIsmRequest) String() string { return proto.CompactTextString(m) }
func (*RecipientIsmRequest) ProtoMessage()    {}
func (*RecipientIsmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{12}
}
func (m *RecipientIsmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipientIsmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipientIsmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipientIsmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipientIsmRequest.Merge(m, src)
}
func (m *RecipientIsmRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecipientIsmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipientIsmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecipientIsmRequest proto.InternalMessageInfo

func (m *RecipientIsmRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type RecipientIsmResponse struct {
	IsmId string `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3" json:"ism_id,omitempty"`
}

func (m *RecipientIsmResponse) Reset()         { *m = RecipientIsmResponse{} }
func (m *RecipientIsmResponse) String() string { return proto.CompactTextString(m) }
func (*RecipientIsmResponse) ProtoMessage()    {}
func (*RecipientIsmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{13}
}
func (m *RecipientIsmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipientIsmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipientIsmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipientIsmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipientIsmResponse.Merge(m, src)
}
func (m *RecipientIsmResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecipientIsmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipientIsmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecipientIsmResponse proto.InternalMessageInfo

func (m *RecipientIsmResponse) GetIsmId() string {
	if m != nil {
		return m.IsmId
	}
	return ""
}

type QueryValidatorsRequest struct {
}

func (m *QueryValidatorsRequest) Reset()         { *m = QueryValidatorsRequest{} }
func (m *QueryValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsRequest) ProtoMessage()    {}
func (*QueryValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{14}
}
func (m *QueryValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsRequest.Merge(m, src)
}
func (m *QueryValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsRequest proto.InternalMessageInfo

type QueryValidatorsResponse struct {
	Validators []Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
}

func (m *QueryValidatorsResponse) Reset()         { *m = QueryValidatorsResponse{} }
func (m *QueryValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsResponse) ProtoMessage()    {}
func (*QueryValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{15}
}
func (m *QueryValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsResponse.Merge(m, src)
}
func (m *QueryValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsResponse proto.InternalMessageInfo

func (m *QueryValidatorsResponse) GetValidators() []Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type QueryAnnouncedStorageLocationsRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryAnnouncedStorageLocationsRequest) Reset()         { *m = QueryAnnouncedStorageLocationsRequest{} }
func (m *QueryAnnouncedStorageLocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAnnouncedStorageLocationsRequest) ProtoMessage()    {}
func (*QueryAnnouncedStorageLocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{16}
}
func (m *QueryAnnouncedStorageLocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAnnouncedStorageLocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAnnouncedStorageLocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAnnouncedStorageLocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAnnouncedStorageLocationsRequest.Merge(m, src)
}
func (m *QueryAnnouncedStorageLocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAnnouncedStorageLocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAnnouncedStorageLocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAnnouncedStorageLocationsRequest proto.InternalMessageInfo

func (m *QueryAnnouncedStorageLocationsRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryAnnouncedStorageLocationsResponse struct {
	StorageLocations []string `protobuf:"bytes,1,rep,name=storage_locations,json=storageLocations,proto3" json:"storage_locations,omitempty"`
}

func (m *QueryAnnouncedStorageLocationsResponse) Reset() {
	*m = QueryAnnouncedStorageLocationsResponse{}
}
func (m *QueryAnnouncedStorageLocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAnnouncedStorageLocationsResponse) ProtoMessage()    {}
func (*QueryAnnouncedStorageLocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{17}
}
func (m *QueryAnnouncedStorageLocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAnnouncedStorageLocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAnnouncedStorageLocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAnnouncedStorageLocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAnnouncedStorageLocationsResponse.Merge(m, src)
}
func (m *QueryAnnouncedStorageLocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAnnouncedStorageLocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAnnouncedStorageLocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAnnouncedStorageLocationsResponse proto.InternalMessageInfo

func (m *QueryAnnouncedStorageLocationsResponse) GetStorageLocations() []string {
	if m != nil {
		return m.StorageLocations
	}
	return nil
}

// IGP
type QueryIgpsRequest struct {
}

func (m *QueryIgpsRequest) Reset()         { *m = QueryIgpsRequest{} }
func (m *QueryIgpsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIgpsRequest) ProtoMessage()    {}
func (*QueryIgpsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{18}
}
func (m *QueryIgpsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpsRequest.Merge(m, src)
}
func (m *QueryIgpsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpsRequest proto.InternalMessageInfo

type QueryIgpsResponse struct {
	Igps []Igp `protobuf:"bytes,1,rep,name=igps,proto3" json:"igps"`
}

func (m *QueryIgpsResponse) Reset()         { *m = QueryIgpsResponse{} }
func (m *QueryIgpsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIgpsResponse) ProtoMessage()    {}
func (*QueryIgpsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{19}
}
func (m *QueryIgpsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpsResponse.Merge(m, src)
}
func (m *QueryIgpsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpsResponse proto.InternalMessageInfo

func (m *QueryIgpsResponse) GetIgps() []Igp {
	if m != nil {
		return m.Igps
	}
	return nil
}

type QueryIgpRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryIgpRequest) Reset()         { *m = QueryIgpRequest{} }
func (m *QueryIgpRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIgpRequest) ProtoMessage()    {}
func (*QueryIgpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{20}
}
func (m *QueryIgpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpRequest.Merge(m, src)
}
func (m *QueryIgpRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpRequest proto.InternalMessageInfo

func (m *QueryIgpRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryIgpResponse struct {
	Igp Igp `protobuf:"bytes,1,opt,name=igp,proto3" json:"igp"`
}

func (m *QueryIgpResponse) Reset()         { *m = QueryIgpResponse{} }
func (m *QueryIgpResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIgpResponse) ProtoMessage()    {}
func (*QueryIgpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{21}
}
func (m *QueryIgpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIgpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIgpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIgpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIgpResponse.Merge(m, src)
}
func (m *QueryIgpResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIgpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIgpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIgpResponse proto.InternalMessageInfo

func (m *QueryIgpResponse) GetIgp() Igp {
	if m != nil {
		return m.Igp
	}
	return Igp{}
}

type QueryDestinationGasConfigsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDestinationGasConfigsRequest) Reset()         { *m = QueryDestinationGasConfigsRequest{} }
func (m *QueryDestinationGasConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDestinationGasConfigsRequest) ProtoMessage()    {}
func (*QueryDestinationGasConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{22}
}
func (m *QueryDestinationGasConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDestinationGasConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDestinationGasConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDestinationGasConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDestinationGasConfigsRequest.Merge(m, src)
}
func (m *QueryDestinationGasConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDestinationGasConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDestinationGasConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDestinationGasConfigsRequest proto.InternalMessageInfo

func (m *QueryDestinationGasConfigsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryDestinationGasConfigsResponse struct {
	DestinationGasConfigs []*DestinationGasConfig `protobuf:"bytes,1,rep,name=destination_gas_configs,json=destinationGasConfigs,proto3" json:"destination_gas_configs,omitempty"`
}

func (m *QueryDestinationGasConfigsResponse) Reset()         { *m = QueryDestinationGasConfigsResponse{} }
func (m *QueryDestinationGasConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDestinationGasConfigsResponse) ProtoMessage()    {}
func (*QueryDestinationGasConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{23}
}
func (m *QueryDestinationGasConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDestinationGasConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDestinationGasConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDestinationGasConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDestinationGasConfigsResponse.Merge(m, src)
}
func (m *QueryDestinationGasConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDestinationGasConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDestinationGasConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDestinationGasConfigsResponse proto.InternalMessageInfo

func (m *QueryDestinationGasConfigsResponse) GetDestinationGasConfigs() []*DestinationGasConfig {
	if m != nil {
		return m.DestinationGasConfigs
	}
	return nil
}

type QueryQuoteGasPaymentRequest struct {
	IgpId             string `protobuf:"bytes,1,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	DestinationDomain string `protobuf:"bytes,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	GasLimit          string `protobuf:"bytes,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *QueryQuoteGasPaymentRequest) Reset()         { *m = QueryQuoteGasPaymentRequest{} }
func (m *QueryQuoteGasPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteGasPaymentRequest) ProtoMessage()    {}
func (*QueryQuoteGasPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{24}
}
func (m *QueryQuoteGasPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteGasPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteGasPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteGasPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteGasPaymentRequest.Merge(m, src)
}
func (m *QueryQuoteGasPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteGasPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteGasPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteGasPaymentRequest proto.InternalMessageInfo

func (m *QueryQuoteGasPaymentRequest) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *QueryQuoteGasPaymentRequest) GetDestinationDomain() string {
	if m != nil {
		return m.DestinationDomain
	}
	return ""
}

func (m *QueryQuoteGasPaymentRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

type QueryQuoteGasPaymentResponse struct {
	GasPayment string `protobuf:"bytes,1,opt,name=gas_payment,json=gasPayment,proto3" json:"gas_payment,omitempty"`
}

func (m *QueryQuoteGasPaymentResponse) Reset()         { *m = QueryQuoteGasPaymentResponse{} }
func (m *QueryQuoteGasPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteGasPaymentResponse) ProtoMessage()    {}
func (*QueryQuoteGasPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{25}
}
func (m *QueryQuoteGasPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteGasPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteGasPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteGasPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteGasPaymentResponse.Merge(m, src)
}
func (m *QueryQuoteGasPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteGasPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteGasPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteGasPaymentResponse proto.InternalMessageInfo

func (m *QueryQuoteGasPaymentResponse) GetGasPayment() string {
	if m != nil {
		return m.GasPayment
	}
	return ""
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{26}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dd9a34f8715cd, []int{27}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryMailboxesRequest)(nil), "hyperlane.mailbox.v1.QueryMailboxesRequest")
	proto.RegisterType((*QueryMailboxesResponse)(nil), "hyperlane.mailbox.v1.QueryMailboxesResponse")
	proto.RegisterType((*QueryMailboxRequest)(nil), "hyperlane.mailbox.v1.QueryMailboxRequest")
	proto.RegisterType((*QueryMailboxResponse)(nil), "hyperlane.mailbox.v1.QueryMailboxResponse")
	proto.RegisterType((*QueryCountRequest)(nil), "hyperlane.mailbox.v1.QueryCountRequest")
	proto.RegisterType((*QueryCountResponse)(nil), "hyperlane.mailbox.v1.QueryCountResponse")
	proto.RegisterType((*QueryRootRequest)(nil), "hyperlane.mailbox.v1.QueryRootRequest")
	proto.RegisterType((*QueryRootResponse)(nil), "hyperlane.mailbox.v1.QueryRootResponse")
	proto.RegisterType((*QueryDeliveredRequest)(nil), "hyperlane.mailbox.v1.QueryDeliveredRequest")
	proto.RegisterType((*QueryDeliveredResponse)(nil), "hyperlane.mailbox.v1.QueryDeliveredResponse")
	proto.RegisterType((*QueryLatestCheckpointRequest)(nil), "hyperlane.mailbox.v1.QueryLatestCheckpointRequest")
	proto.RegisterType((*QueryLatestCheckpointResponse)(nil), "hyperlane.mailbox.v1.QueryLatestCheckpointResponse")
	proto.RegisterType((*RecipientIsmRequest)(nil), "hyperlane.mailbox.v1.RecipientIsmRequest")
	proto.RegisterType((*RecipientIsmResponse)(nil), "hyperlane.mailbox.v1.RecipientIsmResponse")
	proto.RegisterType((*QueryValidatorsRequest)(nil), "hyperlane.mailbox.v1.QueryValidatorsRequest")
	proto.RegisterType((*QueryValidatorsResponse)(nil), "hyperlane.mailbox.v1.QueryValidatorsResponse")
	proto.RegisterType((*QueryAnnouncedStorageLocationsRequest)(nil), "hyperlane.mailbox.v1.QueryAnnouncedStorageLocationsRequest")
	proto.RegisterType((*QueryAnnouncedStorageLocationsResponse)(nil), "hyperlane.mailbox.v1.QueryAnnouncedStorageLocationsResponse")
	proto.RegisterType((*QueryIgpsRequest)(nil), "hyperlane.mailbox.v1.QueryIgpsRequest")
	proto.RegisterType((*QueryIgpsResponse)(nil), "hyperlane.mailbox.v1.QueryIgpsResponse")
	proto.RegisterType((*QueryIgpRequest)(nil), "hyperlane.mailbox.v1.QueryIgpRequest")
	proto.RegisterType((*QueryIgpResponse)(nil), "hyperlane.mailbox.v1.QueryIgpResponse")
	proto.RegisterType((*QueryDestinationGasConfigsRequest)(nil), "hyperlane.mailbox.v1.QueryDestinationGasConfigsRequest")
	proto.RegisterType((*QueryDestinationGasConfigsResponse)(nil), "hyperlane.mailbox.v1.QueryDestinationGasConfigsResponse")
	proto.RegisterType((*QueryQuoteGasPaymentRequest)(nil), "hyperlane.mailbox.v1.QueryQuoteGasPaymentRequest")
	proto.RegisterType((*QueryQuoteGasPaymentResponse)(nil), "hyperlane.mailbox.v1.QueryQuoteGasPaymentResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "hyperlane.mailbox.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "hyperlane.mailbox.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("hyperlane/mailbox/v1/query.proto", fileDescriptor_567dd9a34f8715cd) }

var fileDescriptor_567dd9a34f8715cd = []byte{
	// 1349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xe3, 0xfc, 0x6a, 0xf7, 0xb5, 0x40, 0x32, 0x4d, 0xda, 0x74, 0x93, 0x6c, 0xd2, 0x69,
	0xf3, 0xa3, 0x69, 0xb3, 0xd6, 0x26, 0xd0, 0x16, 0x15, 0xa9, 0xea, 0x0f, 0xa8, 0xb6, 0x6a, 0x44,
	0xbb, 0xd0, 0x1e, 0x7a, 0x59, 0xbc, 0xeb, 0xc1, 0x1d, 0xb1, 0xf6, 0xb8, 0x3b, 0x4e, 0x68, 0xb4,
	0x5a, 0x09, 0x81, 0x90, 0xe0, 0x02, 0x48, 0xbd, 0x22, 0xce, 0x1c, 0x39, 0xf1, 0x2f, 0x50, 0x89,
	0x03, 0x95, 0xb8, 0x70, 0x42, 0xa8, 0x05, 0xf1, 0x6f, 0x20, 0xcf, 0x3c, 0x7b, 0x9d, 0xac, 0xed,
	0x4d, 0xb8, 0x44, 0xf1, 0x9b, 0xf7, 0xe3, 0x33, 0xcf, 0x6f, 0x3c, 0x5f, 0x2d, 0x2c, 0x3e, 0xde,
	0xf5, 0x59, 0xbb, 0x65, 0x79, 0xcc, 0x74, 0x2d, 0xde, 0x6a, 0x88, 0xa7, 0xe6, 0x4e, 0xc5, 0x7c,
	0xb2, 0xcd, 0xda, 0xbb, 0x65, 0xbf, 0x2d, 0x02, 0x41, 0xa6, 0x62, 0x8f, 0x32, 0x7a, 0x94, 0x77,
	0x2a, 0xc5, 0xb5, 0xa6, 0x90, 0xae, 0x90, 0x66, 0xc3, 0x92, 0x4c, 0xbb, 0x9b, 0x3b, 0x95, 0x06,
	0x0b, 0xac, 0x8a, 0xe9, 0x5b, 0x0e, 0xf7, 0xac, 0x80, 0x0b, 0x4f, 0x67, 0x28, 0xa6, 0xd7, 0x08,
	0x76, 0x7d, 0x26, 0xd1, 0x63, 0xce, 0x11, 0xc2, 0x69, 0x31, 0xd3, 0xf2, 0xb9, 0x69, 0x79, 0x9e,
	0x08, 0x54, 0x78, 0xb4, 0x3a, 0x8b, 0xb5, 0xa2, 0x32, 0x49, 0xbc, 0xe2, 0xa4, 0xe5, 0x72, 0x4f,
	0x98, 0xea, 0x2f, 0x9a, 0xa6, 0x1c, 0xe1, 0x08, 0xf5, 0xaf, 0x19, 0xfe, 0x87, 0xd6, 0xd3, 0x3a,
	0x4b, 0x5d, 0x2f, 0xe8, 0x07, 0xbd, 0x44, 0x4f, 0xc1, 0xf4, 0xfd, 0x30, 0xe5, 0x96, 0xa6, 0x63,
	0xb2, 0xc6, 0x9e, 0x6c, 0x33, 0x19, 0xd0, 0x8f, 0xe0, 0xe4, 0xfe, 0x05, 0xe9, 0x0b, 0x4f, 0x32,
	0xf2, 0x1e, 0x14, 0xdc, 0xc8, 0x38, 0x63, 0x2c, 0x8e, 0xac, 0x1e, 0xdb, 0x98, 0x2f, 0xa7, 0x75,
	0xaa, 0x8c, 0xb1, 0x37, 0x0a, 0xcf, 0xff, 0x5c, 0x18, 0xfa, 0xf1, 0xdf, 0x9f, 0xd6, 0x8c, 0x5a,
	0x2f, 0x94, 0x2e, 0xc1, 0x89, 0x64, 0x05, 0x2c, 0x4c, 0x5e, 0x87, 0x61, 0x6e, 0xcf, 0x18, 0x8b,
	0xc6, 0x6a, 0xa1, 0x36, 0xcc, 0x6d, 0xfa, 0x08, 0xa6, 0xf6, 0xba, 0x21, 0xc6, 0x0d, 0x38, 0x82,
	0xb9, 0x94, 0xf3, 0x61, 0x20, 0xa2, 0x40, 0x7a, 0x16, 0x26, 0x55, 0xee, 0x9b, 0x62, 0xdb, 0x0b,
	0xb2, 0x00, 0xd6, 0x80, 0x24, 0x9d, 0xb0, 0xfc, 0x14, 0x8c, 0x35, 0x43, 0x83, 0x72, 0x7c, 0xad,
	0xa6, 0x1f, 0x28, 0x85, 0x09, 0xe5, 0x5b, 0x13, 0x22, 0x33, 0xdf, 0x0a, 0x16, 0xd5, 0x3e, 0x98,
	0x8e, 0xc0, 0x68, 0x5b, 0x08, 0x9d, 0xed, 0x78, 0x4d, 0xfd, 0x4f, 0x2f, 0xe1, 0xbb, 0xb9, 0xc5,
	0x5a, 0x7c, 0x87, 0xb5, 0x99, 0x1d, 0x65, 0x9c, 0x07, 0x70, 0x99, 0x94, 0x96, 0xc3, 0xea, 0x71,
	0xe6, 0x02, 0x5a, 0xaa, 0x36, 0xbd, 0x84, 0xaf, 0x2e, 0x11, 0x87, 0x55, 0xe6, 0xa0, 0x60, 0x47,
	0x46, 0x15, 0x77, 0xb4, 0xd6, 0x33, 0xd0, 0x32, 0xcc, 0xa9, 0xb8, 0xbb, 0x56, 0xc0, 0x64, 0x70,
	0xf3, 0x31, 0x6b, 0x7e, 0xe2, 0x0b, 0x9e, 0xdd, 0x98, 0x2a, 0xcc, 0x67, 0xf8, 0x67, 0x6f, 0xaa,
	0xd7, 0xb7, 0xe1, 0x64, 0xdf, 0x36, 0xe1, 0x44, 0x8d, 0x35, 0xb9, 0xcf, 0x99, 0x17, 0x54, 0xa5,
	0x1b, 0x55, 0x9c, 0x83, 0x42, 0x3b, 0x32, 0x47, 0xfb, 0x8c, 0x0d, 0x74, 0x1d, 0xa6, 0xf6, 0x06,
	0x61, 0xd9, 0x69, 0x18, 0xe7, 0xd2, 0xed, 0xb5, 0x66, 0x8c, 0x4b, 0xb7, 0x6a, 0xd3, 0x19, 0x6c,
	0xcb, 0x43, 0xab, 0xc5, 0x6d, 0x2b, 0x10, 0xed, 0x78, 0xd6, 0x19, 0x9c, 0xea, 0x5b, 0xc1, 0x5c,
	0x77, 0x00, 0x76, 0x62, 0x2b, 0x4e, 0xfb, 0x42, 0xfa, 0xa0, 0xc5, 0xd1, 0xc9, 0x51, 0x4b, 0x44,
	0xd3, 0x0f, 0x61, 0x49, 0x95, 0xb9, 0xee, 0x79, 0x62, 0xdb, 0x6b, 0x32, 0xfb, 0x83, 0x40, 0xb4,
	0x2d, 0x87, 0xdd, 0x15, 0x4d, 0x7d, 0xe8, 0xa3, 0x6d, 0x5f, 0x80, 0xc9, 0x38, 0xac, 0x6e, 0xd9,
	0x76, 0x9b, 0x49, 0x89, 0x7b, 0x99, 0x88, 0x17, 0xae, 0x6b, 0x3b, 0x7d, 0x00, 0xcb, 0x83, 0xb2,
	0xe2, 0x5e, 0x2e, 0xc0, 0xa4, 0xd4, 0x6b, 0xf5, 0x56, 0xb4, 0xa8, 0xb6, 0x54, 0xa8, 0x4d, 0xc8,
	0x7d, 0x41, 0x94, 0xe0, 0x24, 0x57, 0x1d, 0x3f, 0xee, 0xd3, 0x16, 0x4e, 0xae, 0xb6, 0x61, 0xd6,
	0x2b, 0x30, 0xca, 0x1d, 0x3f, 0xea, 0xcd, 0xe9, 0xf4, 0xde, 0x54, 0x1d, 0x3f, 0xd9, 0x15, 0x15,
	0x41, 0xcf, 0xc0, 0x1b, 0x51, 0xba, 0xac, 0x11, 0xbb, 0xd3, 0xa3, 0x88, 0x0b, 0x5e, 0x82, 0x11,
	0xee, 0xf8, 0x78, 0xe8, 0x0f, 0x56, 0x2f, 0x0c, 0xa0, 0x9b, 0x70, 0x06, 0x8f, 0x85, 0x0c, 0xf0,
	0x2b, 0x7d, 0xdb, 0x92, 0x37, 0x85, 0xf7, 0x31, 0x77, 0x64, 0x16, 0xc0, 0x57, 0x06, 0xd0, 0xbc,
	0x28, 0x64, 0x6a, 0xc0, 0x29, 0xbb, 0xe7, 0x50, 0x77, 0x2c, 0x59, 0x6f, 0x6a, 0x17, 0xec, 0xcb,
	0x5a, 0x3a, 0x67, 0x5a, 0xd6, 0xda, 0xb4, 0x9d, 0x56, 0x8b, 0x7e, 0x66, 0xc0, 0xac, 0x42, 0xb9,
	0xbf, 0x2d, 0x02, 0x76, 0xdb, 0x92, 0xf7, 0xac, 0x5d, 0x97, 0xf5, 0x8e, 0x67, 0x38, 0xf6, 0x8e,
	0x9f, 0x1c, 0x7b, 0xc7, 0xaf, 0xda, 0x64, 0x1d, 0x48, 0x12, 0xcd, 0x16, 0xae, 0xc5, 0x3d, 0x75,
	0xfa, 0x0a, 0xb5, 0xc9, 0xc4, 0xca, 0x2d, 0xb5, 0x40, 0x66, 0xa1, 0x10, 0xd2, 0xb7, 0xb8, 0xcb,
	0x83, 0x99, 0x11, 0xe5, 0x75, 0xd4, 0xb1, 0xe4, 0xdd, 0xf0, 0x99, 0x5e, 0xc3, 0x2f, 0x44, 0x1f,
	0x01, 0xb6, 0x61, 0x01, 0x8e, 0x85, 0xc1, 0xbe, 0x36, 0x23, 0x07, 0x38, 0xb1, 0x23, 0x9d, 0xc2,
	0x6f, 0xe9, 0x3d, 0xab, 0x6d, 0xb9, 0xf1, 0x5c, 0x3d, 0xc4, 0x9b, 0x20, 0xb2, 0x62, 0xb6, 0x6b,
	0x30, 0xee, 0x2b, 0x0b, 0xbe, 0xeb, 0xb9, 0xf4, 0x1e, 0xea, 0xa8, 0xe4, 0xeb, 0xc6, 0xb0, 0x8d,
	0x5f, 0x27, 0x61, 0x4c, 0x25, 0x26, 0x5f, 0x18, 0x30, 0xae, 0xfd, 0xc8, 0x6a, 0x7a, 0x96, 0x7e,
	0xac, 0xe2, 0xf9, 0x03, 0x78, 0x6a, 0x54, 0x7a, 0xee, 0xf3, 0xdf, 0xff, 0x7e, 0x36, 0x5c, 0x22,
	0x73, 0x66, 0xea, 0x85, 0xaf, 0x79, 0xc8, 0xb7, 0x06, 0x14, 0xe2, 0xfb, 0x94, 0x5c, 0xc8, 0x49,
	0xbf, 0xff, 0x3a, 0x2e, 0x5e, 0x3c, 0x98, 0x33, 0xe2, 0xac, 0x28, 0x9c, 0x33, 0x64, 0x21, 0x1d,
	0x27, 0xbe, 0x83, 0xc9, 0x37, 0x06, 0x1c, 0xc1, 0x70, 0x72, 0x7e, 0x70, 0x89, 0x88, 0x66, 0xed,
	0x20, 0xae, 0xc8, 0x72, 0x51, 0xb1, 0x2c, 0x93, 0x73, 0x03, 0x58, 0xcc, 0x0e, 0xb7, 0xbb, 0xe4,
	0x6b, 0x03, 0xc6, 0xd4, 0x45, 0x4b, 0x56, 0x72, 0x6a, 0x24, 0xef, 0xeb, 0xe2, 0xea, 0x60, 0x47,
	0x44, 0x59, 0x57, 0x28, 0x2b, 0x64, 0x29, 0x1d, 0x25, 0x68, 0x33, 0x66, 0xaa, 0xfb, 0x48, 0xb3,
	0x7c, 0x69, 0xc0, 0x68, 0x78, 0x49, 0x93, 0xe5, 0x9c, 0x0a, 0x89, 0x9b, 0xbe, 0xb8, 0x32, 0xd0,
	0xef, 0x60, 0x3d, 0x51, 0x20, 0xe1, 0x6d, 0xa9, 0x39, 0xbe, 0x37, 0xa0, 0x10, 0xdf, 0xe5, 0xb9,
	0x63, 0xb3, 0x5f, 0x29, 0xe4, 0x8e, 0x4d, 0x9f, 0x3c, 0xa0, 0x6f, 0x2a, 0xac, 0x32, 0xb9, 0x98,
	0x8e, 0x15, 0x2b, 0x05, 0xb3, 0xd3, 0x93, 0x1f, 0x5d, 0xf2, 0xb3, 0x01, 0x13, 0xfb, 0x25, 0x00,
	0xd9, 0xc8, 0x29, 0x9c, 0xa1, 0x2f, 0x8a, 0x9b, 0x87, 0x8a, 0x41, 0xe6, 0xb7, 0x15, 0xf3, 0x26,
	0xa9, 0xe4, 0xb4, 0xb2, 0xa5, 0x82, 0xeb, 0xcd, 0x38, 0x5a, 0xf7, 0xf5, 0x07, 0x03, 0x8e, 0x27,
	0x05, 0x44, 0xd6, 0x09, 0x48, 0x51, 0x26, 0x59, 0x27, 0x20, 0x4d, 0x8f, 0xd0, 0xcb, 0x0a, 0xb1,
	0x42, 0xcc, 0x74, 0xc4, 0x58, 0xd0, 0xd4, 0xb9, 0x74, 0xcd, 0x4e, 0xfc, 0xd8, 0x25, 0xcf, 0x0c,
	0x80, 0x9e, 0x26, 0x21, 0x79, 0x2f, 0xb3, 0x4f, 0xd4, 0x14, 0xd7, 0x0f, 0xe8, 0x8d, 0x90, 0xab,
	0x0a, 0x92, 0x92, 0xc5, 0x74, 0xc8, 0x9e, 0x8c, 0x21, 0xff, 0x18, 0x70, 0x3a, 0x53, 0x6c, 0x90,
	0xab, 0x39, 0x65, 0x07, 0x09, 0x9f, 0xe2, 0x3b, 0xff, 0x2f, 0x18, 0xb7, 0xb0, 0xa5, 0xb6, 0x70,
	0x9b, 0xbc, 0x9b, 0xbe, 0x05, 0x2b, 0x4a, 0x50, 0xef, 0x53, 0x41, 0x66, 0xa7, 0x4f, 0x6f, 0x75,
	0xc9, 0xa7, 0x30, 0x1a, 0x0a, 0x9d, 0xdc, 0xd3, 0x9f, 0x50, 0x47, 0xb9, 0xa7, 0x3f, 0xa9, 0x98,
	0x68, 0x49, 0x71, 0xce, 0x90, 0x93, 0x09, 0x4e, 0xee, 0xf8, 0x21, 0x63, 0xa8, 0x8b, 0xc8, 0x2e,
	0x8c, 0x54, 0x1d, 0x9f, 0x2c, 0xe5, 0xe7, 0x8b, 0xca, 0x2e, 0x0f, 0x72, 0xc3, 0xaa, 0x67, 0x55,
	0xd5, 0x79, 0x32, 0x9b, 0x5e, 0x55, 0x1f, 0x89, 0x5f, 0x0c, 0x98, 0x4e, 0x55, 0x3a, 0xe4, 0x72,
	0xee, 0x97, 0x24, 0x5b, 0x51, 0x15, 0xaf, 0x1c, 0x3e, 0x10, 0x89, 0xaf, 0x2a, 0xe2, 0xb7, 0xc8,
	0x66, 0x0e, 0xb1, 0x99, 0x21, 0xbb, 0xc8, 0x6f, 0x46, 0xa8, 0x2e, 0xf7, 0xc8, 0x14, 0x52, 0xc9,
	0x41, 0x49, 0x17, 0x55, 0xc5, 0x8d, 0xc3, 0x84, 0x20, 0xf7, 0x03, 0xc5, 0xfd, 0x3e, 0xd9, 0xea,
	0xe7, 0x7e, 0x12, 0x86, 0xd4, 0x13, 0x1a, 0xc9, 0xec, 0x68, 0xcd, 0xd6, 0x35, 0x3b, 0xfd, 0x2a,
	0xad, 0x6b, 0x76, 0x62, 0x2d, 0xd6, 0xbd, 0xf1, 0xe0, 0xf9, 0xcb, 0x92, 0xf1, 0xe2, 0x65, 0xc9,
	0xf8, 0xeb, 0x65, 0xc9, 0xf8, 0xee, 0x55, 0x69, 0xe8, 0xc5, 0xab, 0xd2, 0xd0, 0x1f, 0xaf, 0x4a,
	0x43, 0x8f, 0xae, 0x3a, 0x3c, 0x78, 0xbc, 0xdd, 0x28, 0x37, 0x85, 0x6b, 0x36, 0x9a, 0xfe, 0x3a,
	0xf7, 0x3c, 0xb1, 0x83, 0x93, 0x1d, 0x23, 0xac, 0xe3, 0x4f, 0x09, 0x4f, 0xe3, 0x33, 0xa1, 0x7e,
	0x86, 0x68, 0x8c, 0xab, 0x1f, 0x02, 0x36, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x13, 0x0c, 0x10,
	0x67, 0x0f, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Mailboxes(ctx context.Context, in *QueryMailboxesRequest, opts ...grpc.CallOption) (*QueryMailboxesResponse, error)
	Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error)
	Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error)
	Root(ctx context.Context, in *QueryRootRequest, opts ...grpc.CallOption) (*QueryRootResponse, error)
	Delivered(ctx context.Context, in *QueryDeliveredRequest, opts ...grpc.CallOption) (*QueryDeliveredResponse, error)
	LatestCheckpoint(ctx context.Context, in *QueryLatestCheckpointRequest, opts ...grpc.CallOption) (*QueryLatestCheckpointResponse, error)
	RecipientIsm(ctx context.Context, in *RecipientIsmRequest, opts ...grpc.CallOption) (*RecipientIsmResponse, error)
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	AnnouncedStorageLocations(ctx context.Context, in *QueryAnnouncedStorageLocationsRequest, opts ...grpc.CallOption) (*QueryAnnouncedStorageLocationsResponse, error)
	// IGP
	Igps(ctx context.Context, in *QueryIgpsRequest, opts ...grpc.CallOption) (*QueryIgpsResponse, error)
	Igp(ctx context.Context, in *QueryIgpRequest, opts ...grpc.CallOption) (*QueryIgpResponse, error)
	DestinationGasConfigs(ctx context.Context, in *QueryDestinationGasConfigsRequest, opts ...grpc.CallOption) (*QueryDestinationGasConfigsResponse, error)
	QuoteGasPayment(ctx context.Context, in *QueryQuoteGasPaymentRequest, opts ...grpc.CallOption) (*QueryQuoteGasPaymentResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mailboxes(ctx context.Context, in *QueryMailboxesRequest, opts ...grpc.CallOption) (*QueryMailboxesResponse, error) {
	out := new(QueryMailboxesResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Mailboxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error) {
	out := new(QueryMailboxResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Mailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error) {
	out := new(QueryCountResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Root(ctx context.Context, in *QueryRootRequest, opts ...grpc.CallOption) (*QueryRootResponse, error) {
	out := new(QueryRootResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Root", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Delivered(ctx context.Context, in *QueryDeliveredRequest, opts ...grpc.CallOption) (*QueryDeliveredResponse, error) {
	out := new(QueryDeliveredResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Delivered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestCheckpoint(ctx context.Context, in *QueryLatestCheckpointRequest, opts ...grpc.CallOption) (*QueryLatestCheckpointResponse, error) {
	out := new(QueryLatestCheckpointResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/LatestCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecipientIsm(ctx context.Context, in *RecipientIsmRequest, opts ...grpc.CallOption) (*RecipientIsmResponse, error) {
	out := new(RecipientIsmResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/RecipientIsm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AnnouncedStorageLocations(ctx context.Context, in *QueryAnnouncedStorageLocationsRequest, opts ...grpc.CallOption) (*QueryAnnouncedStorageLocationsResponse, error) {
	out := new(QueryAnnouncedStorageLocationsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/AnnouncedStorageLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Igps(ctx context.Context, in *QueryIgpsRequest, opts ...grpc.CallOption) (*QueryIgpsResponse, error) {
	out := new(QueryIgpsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Igps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Igp(ctx context.Context, in *QueryIgpRequest, opts ...grpc.CallOption) (*QueryIgpResponse, error) {
	out := new(QueryIgpResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/Igp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DestinationGasConfigs(ctx context.Context, in *QueryDestinationGasConfigsRequest, opts ...grpc.CallOption) (*QueryDestinationGasConfigsResponse, error) {
	out := new(QueryDestinationGasConfigsResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/DestinationGasConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteGasPayment(ctx context.Context, in *QueryQuoteGasPaymentRequest, opts ...grpc.CallOption) (*QueryQuoteGasPaymentResponse, error) {
	out := new(QueryQuoteGasPaymentResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.mailbox.v1.Query/QuoteGasPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Mailboxes(context.Context, *QueryMailboxesRequest) (*QueryMailboxesResponse, error)
	Mailbox(context.Context, *QueryMailboxRequest) (*QueryMailboxResponse, error)
	Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error)
	Root(context.Context, *QueryRootRequest) (*QueryRootResponse, error)
	Delivered(context.Context, *QueryDeliveredRequest) (*QueryDeliveredResponse, error)
	LatestCheckpoint(context.Context, *QueryLatestCheckpointRequest) (*QueryLatestCheckpointResponse, error)
	RecipientIsm(context.Context, *RecipientIsmRequest) (*RecipientIsmResponse, error)
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	AnnouncedStorageLocations(context.Context, *QueryAnnouncedStorageLocationsRequest) (*QueryAnnouncedStorageLocationsResponse, error)
	// IGP
	Igps(context.Context, *QueryIgpsRequest) (*QueryIgpsResponse, error)
	Igp(context.Context, *QueryIgpRequest) (*QueryIgpResponse, error)
	DestinationGasConfigs(context.Context, *QueryDestinationGasConfigsRequest) (*QueryDestinationGasConfigsResponse, error)
	QuoteGasPayment(context.Context, *QueryQuoteGasPaymentRequest) (*QueryQuoteGasPaymentResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Mailboxes(ctx context.Context, req *QueryMailboxesRequest) (*QueryMailboxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailboxes not implemented")
}
func (*UnimplementedQueryServer) Mailbox(ctx context.Context, req *QueryMailboxRequest) (*QueryMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailbox not implemented")
}
func (*UnimplementedQueryServer) Count(ctx context.Context, req *QueryCountRequest) (*QueryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedQueryServer) Root(ctx context.Context, req *QueryRootRequest) (*QueryRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Root not implemented")
}
func (*UnimplementedQueryServer) Delivered(ctx context.Context, req *QueryDeliveredRequest) (*QueryDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delivered not implemented")
}
func (*UnimplementedQueryServer) LatestCheckpoint(ctx context.Context, req *QueryLatestCheckpointRequest) (*QueryLatestCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestCheckpoint not implemented")
}
func (*UnimplementedQueryServer) RecipientIsm(ctx context.Context, req *RecipientIsmRequest) (*RecipientIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipientIsm not implemented")
}
func (*UnimplementedQueryServer) Validators(ctx context.Context, req *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) AnnouncedStorageLocations(ctx context.Context, req *QueryAnnouncedStorageLocationsRequest) (*QueryAnnouncedStorageLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnouncedStorageLocations not implemented")
}
func (*UnimplementedQueryServer) Igps(ctx context.Context, req *QueryIgpsRequest) (*QueryIgpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Igps not implemented")
}
func (*UnimplementedQueryServer) Igp(ctx context.Context, req *QueryIgpRequest) (*QueryIgpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Igp not implemented")
}
func (*UnimplementedQueryServer) DestinationGasConfigs(ctx context.Context, req *QueryDestinationGasConfigsRequest) (*QueryDestinationGasConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestinationGasConfigs not implemented")
}
func (*UnimplementedQueryServer) QuoteGasPayment(ctx context.Context, req *QueryQuoteGasPaymentRequest) (*QueryQuoteGasPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteGasPayment not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mailboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Mailboxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailboxes(ctx, req.(*QueryMailboxesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Mailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailbox(ctx, req.(*QueryMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Count(ctx, req.(*QueryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Root",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Root(ctx, req.(*QueryRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Delivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Delivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Delivered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Delivered(ctx, req.(*QueryDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/LatestCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestCheckpoint(ctx, req.(*QueryLatestCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecipientIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipientIsmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecipientIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/RecipientIsm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecipientIsm(ctx, req.(*RecipientIsmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AnnouncedStorageLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnnouncedStorageLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AnnouncedStorageLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/AnnouncedStorageLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AnnouncedStorageLocations(ctx, req.(*QueryAnnouncedStorageLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Igps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIgpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Igps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Igps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Igps(ctx, req.(*QueryIgpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Igp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Igp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/Igp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Igp(ctx, req.(*QueryIgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DestinationGasConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDestinationGasConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DestinationGasConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/DestinationGasConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DestinationGasConfigs(ctx, req.(*QueryDestinationGasConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteGasPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteGasPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteGasPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.mailbox.v1.Query/QuoteGasPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteGasPayment(ctx, req.(*QueryQuoteGasPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.mailbox.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Mailboxes",
			Handler:    _Query_Mailboxes_Handler,
		},
		{
			MethodName: "Mailbox",
			Handler:    _Query_Mailbox_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Query_Count_Handler,
		},
		{
			MethodName: "Root",
			Handler:    _Query_Root_Handler,
		},
		{
			MethodName: "Delivered",
			Handler:    _Query_Delivered_Handler,
		},
		{
			MethodName: "LatestCheckpoint",
			Handler:    _Query_LatestCheckpoint_Handler,
		},
		{
			MethodName: "RecipientIsm",
			Handler:    _Query_RecipientIsm_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "AnnouncedStorageLocations",
			Handler:    _Query_AnnouncedStorageLocations_Handler,
		},
		{
			MethodName: "Igps",
			Handler:    _Query_Igps_Handler,
		},
		{
			MethodName: "Igp",
			Handler:    _Query_Igp_Handler,
		},
		{
			MethodName: "DestinationGasConfigs",
			Handler:    _Query_DestinationGasConfigs_Handler,
		},
		{
			MethodName: "QuoteGasPayment",
			Handler:    _Query_QuoteGasPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/mailbox/v1/query.proto",
}

func (m *QueryMailboxesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMailboxesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mailboxes) > 0 {
		for iNdEx := len(m.Mailboxes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mailboxes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mailbox.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRootRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRootRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRootRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeliveredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeliveredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeliveredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeliveredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeliveredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeliveredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delivered {
		i--
		if m.Delivered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecipientIsmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipientIsmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipientIsmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecipientIsmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipientIsmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipientIsmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IsmId) > 0 {
		i -= len(m.IsmId)
		copy(dAtA[i:], m.IsmId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IsmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAnnouncedStorageLocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAnnouncedStorageLocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAnnouncedStorageLocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAnnouncedStorageLocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAnnouncedStorageLocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAnnouncedStorageLocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageLocations) > 0 {
		for iNdEx := len(m.StorageLocations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StorageLocations[iNdEx])
			copy(dAtA[i:], m.StorageLocations[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.StorageLocations[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIgpsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIgpsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Igps) > 0 {
		for iNdEx := len(m.Igps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Igps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIgpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIgpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIgpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIgpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Igp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDestinationGasConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDestinationGasConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDestinationGasConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDestinationGasConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDestinationGasConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDestinationGasConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationGasConfigs) > 0 {
		for iNdEx := len(m.DestinationGasConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DestinationGasConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteGasPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteGasPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteGasPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationDomain) > 0 {
		i -= len(m.DestinationDomain)
		copy(dAtA[i:], m.DestinationDomain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationDomain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteGasPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteGasPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteGasPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasPayment) > 0 {
		i -= len(m.GasPayment)
		copy(dAtA[i:], m.GasPayment)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasPayment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMailboxesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMailboxesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mailboxes) > 0 {
		for _, e := range m.Mailboxes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMailboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMailboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Mailbox.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryRootRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeliveredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeliveredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delivered {
		n += 2
	}
	return n
}

func (m *QueryLatestCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *RecipientIsmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecipientIsmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IsmId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAnnouncedStorageLocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAnnouncedStorageLocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StorageLocations) > 0 {
		for _, s := range m.StorageLocations {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIgpsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIgpsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Igps) > 0 {
		for _, e := range m.Igps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIgpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIgpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Igp.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDestinationGasConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDestinationGasConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DestinationGasConfigs) > 0 {
		for _, e := range m.DestinationGasConfigs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQuoteGasPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationDomain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQuoteGasPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GasPayment)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMailboxesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailboxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mailboxes = append(m.Mailboxes, Mailbox{})
			if err := m.Mailboxes[len(m.Mailboxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mailbox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRootRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRootRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRootRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeliveredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeliveredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeliveredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeliveredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeliveredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeliveredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delivered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delivered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecipientIsmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipientIsmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipientIsmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecipientIsmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipientIsmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipientIsmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAnnouncedStorageLocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAnnouncedStorageLocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAnnouncedStorageLocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAnnouncedStorageLocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAnnouncedStorageLocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAnnouncedStorageLocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageLocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageLocations = append(m.StorageLocations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Igps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Igps = append(m.Igps, Igp{})
			if err := m.Igps[len(m.Igps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIgpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIgpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIgpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Igp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Igp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDestinationGasConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDestinationGasConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDestinationGasConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationGasConfigs = append(m.DestinationGasConfigs, &DestinationGasConfig{})
			if err := m.DestinationGasConfigs[len(m.DestinationGasConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteGasPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteGasPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteGasPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPayment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
