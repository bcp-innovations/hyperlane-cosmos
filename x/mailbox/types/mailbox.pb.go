// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/mailbox/v1/mailbox.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mailbox struct {
	// TODO: Should be bytes32
	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ism             string `protobuf:"bytes,2,opt,name=ism,proto3" json:"ism,omitempty"`
	MessageSent     uint32 `protobuf:"varint,3,opt,name=message_sent,json=messageSent,proto3" json:"message_sent,omitempty"`
	MessageReceived uint32 `protobuf:"varint,4,opt,name=message_received,json=messageReceived,proto3" json:"message_received,omitempty"`
	Tree            *Tree  `protobuf:"bytes,5,opt,name=tree,proto3" json:"tree,omitempty"`
	Creator         string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Mailbox) Reset()         { *m = Mailbox{} }
func (m *Mailbox) String() string { return proto.CompactTextString(m) }
func (*Mailbox) ProtoMessage()    {}
func (*Mailbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_1595523b0fd95f7d, []int{0}
}
func (m *Mailbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mailbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mailbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mailbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mailbox.Merge(m, src)
}
func (m *Mailbox) XXX_Size() int {
	return m.Size()
}
func (m *Mailbox) XXX_DiscardUnknown() {
	xxx_messageInfo_Mailbox.DiscardUnknown(m)
}

var xxx_messageInfo_Mailbox proto.InternalMessageInfo

func (m *Mailbox) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Mailbox) GetIsm() string {
	if m != nil {
		return m.Ism
	}
	return ""
}

func (m *Mailbox) GetMessageSent() uint32 {
	if m != nil {
		return m.MessageSent
	}
	return 0
}

func (m *Mailbox) GetMessageReceived() uint32 {
	if m != nil {
		return m.MessageReceived
	}
	return 0
}

func (m *Mailbox) GetTree() *Tree {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *Mailbox) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MailboxMessage struct {
	MailboxId string `protobuf:"bytes,1,opt,name=mailbox_id,json=mailboxId,proto3" json:"mailbox_id,omitempty"`
	MessageId int64  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Received  bool   `protobuf:"varint,3,opt,name=received,proto3" json:"received,omitempty"`
}

func (m *MailboxMessage) Reset()         { *m = MailboxMessage{} }
func (m *MailboxMessage) String() string { return proto.CompactTextString(m) }
func (*MailboxMessage) ProtoMessage()    {}
func (*MailboxMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1595523b0fd95f7d, []int{1}
}
func (m *MailboxMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailboxMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailboxMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailboxMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailboxMessage.Merge(m, src)
}
func (m *MailboxMessage) XXX_Size() int {
	return m.Size()
}
func (m *MailboxMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MailboxMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MailboxMessage proto.InternalMessageInfo

func (m *MailboxMessage) GetMailboxId() string {
	if m != nil {
		return m.MailboxId
	}
	return ""
}

func (m *MailboxMessage) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *MailboxMessage) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

// Tree represents an incremental merkle tree.
// Contains current branch and the number of inserted leaves in the tree.
type Tree struct {
	Branch [][]byte `protobuf:"bytes,1,rep,name=branch,proto3" json:"branch,omitempty"`
	Count  uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}
func (*Tree) Descriptor() ([]byte, []int) {
	return fileDescriptor_1595523b0fd95f7d, []int{2}
}
func (m *Tree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tree.Merge(m, src)
}
func (m *Tree) XXX_Size() int {
	return m.Size()
}
func (m *Tree) XXX_DiscardUnknown() {
	xxx_messageInfo_Tree.DiscardUnknown(m)
}

var xxx_messageInfo_Tree proto.InternalMessageInfo

func (m *Tree) GetBranch() [][]byte {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *Tree) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Mailbox)(nil), "hyperlane.mailbox.v1.Mailbox")
	proto.RegisterType((*MailboxMessage)(nil), "hyperlane.mailbox.v1.MailboxMessage")
	proto.RegisterType((*Tree)(nil), "hyperlane.mailbox.v1.Tree")
}

func init() {
	proto.RegisterFile("hyperlane/mailbox/v1/mailbox.proto", fileDescriptor_1595523b0fd95f7d)
}

var fileDescriptor_1595523b0fd95f7d = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0xeb, 0xa6, 0xd3, 0x99, 0x7a, 0x7e, 0x18, 0x59, 0x15, 0x32, 0x95, 0x88, 0x42, 0x56,
	0x61, 0x31, 0x89, 0x66, 0x40, 0x62, 0x4d, 0x25, 0x16, 0x15, 0x2a, 0x12, 0x2e, 0x42, 0x82, 0x4d,
	0x95, 0xc4, 0x57, 0xad, 0xa1, 0x89, 0x2b, 0xdb, 0x2d, 0xed, 0x5b, 0xf0, 0x30, 0x3c, 0x04, 0xcb,
	0x8a, 0x15, 0x1b, 0x24, 0xd4, 0xbe, 0x08, 0x8a, 0xe3, 0x64, 0xc5, 0xce, 0xe7, 0xdc, 0x93, 0x9b,
	0xf3, 0x25, 0xc6, 0xe1, 0x72, 0xbf, 0x06, 0xb5, 0x4a, 0x4b, 0x48, 0x8a, 0x54, 0xac, 0x32, 0xb9,
	0x4b, 0xb6, 0xf7, 0xcd, 0x31, 0x5e, 0x2b, 0x69, 0x24, 0x19, 0xb6, 0x99, 0xb8, 0x19, 0x6c, 0xef,
	0x47, 0x4f, 0x72, 0xa9, 0x0b, 0xa9, 0xe7, 0x36, 0x93, 0xd4, 0xa2, 0x7e, 0x20, 0xfc, 0x83, 0xf0,
	0xf9, 0xb4, 0x4e, 0x92, 0x1b, 0xdc, 0x15, 0x9c, 0xa2, 0x00, 0x45, 0x03, 0xd6, 0x15, 0x9c, 0xdc,
	0x62, 0x4f, 0xe8, 0x82, 0x76, 0xad, 0x51, 0x1d, 0xc9, 0x33, 0x7c, 0x55, 0x80, 0xd6, 0xe9, 0x02,
	0xe6, 0x1a, 0x4a, 0x43, 0xbd, 0x00, 0x45, 0xd7, 0xec, 0xd2, 0x79, 0x33, 0x28, 0x0d, 0x79, 0x8e,
	0x6f, 0x9b, 0x88, 0x82, 0x1c, 0xc4, 0x16, 0x38, 0xed, 0xd9, 0xd8, 0x23, 0xe7, 0x33, 0x67, 0x93,
	0x18, 0xf7, 0x8c, 0x02, 0xa0, 0x67, 0x01, 0x8a, 0x2e, 0x1f, 0x46, 0xf1, 0xff, 0xba, 0xc7, 0x1f,
	0x14, 0x00, 0xb3, 0x39, 0xf2, 0x80, 0xcf, 0x73, 0x05, 0xa9, 0x91, 0x8a, 0xf6, 0xab, 0x4e, 0x63,
	0xfa, 0xeb, 0xc7, 0xdd, 0xd0, 0xe1, 0xbc, 0xe6, 0x5c, 0x81, 0xd6, 0x33, 0xa3, 0x44, 0xb9, 0x60,
	0x4d, 0x30, 0xfc, 0x82, 0x6f, 0x1c, 0xde, 0xb4, 0x7e, 0x3b, 0x79, 0x8a, 0xb1, 0x5b, 0x3f, 0x6f,
	0x69, 0x07, 0xce, 0x99, 0x70, 0x3b, 0x76, 0xfd, 0x05, 0xb7, 0xec, 0x1e, 0x1b, 0x38, 0x67, 0xc2,
	0xc9, 0x08, 0x5f, 0xb4, 0x58, 0x15, 0xfd, 0x05, 0x6b, 0x75, 0xf8, 0x12, 0xf7, 0xaa, 0xb6, 0xe4,
	0x31, 0xee, 0x67, 0x2a, 0x2d, 0xf3, 0x25, 0x45, 0x81, 0x17, 0x5d, 0x31, 0xa7, 0xc8, 0x10, 0x9f,
	0xe5, 0x72, 0x53, 0x1a, 0xbb, 0xf5, 0x9a, 0xd5, 0x62, 0xfc, 0xfe, 0xe7, 0xd1, 0x47, 0x87, 0xa3,
	0x8f, 0xfe, 0x1e, 0x7d, 0xf4, 0xfd, 0xe4, 0x77, 0x0e, 0x27, 0xbf, 0xf3, 0xfb, 0xe4, 0x77, 0x3e,
	0xbf, 0x5a, 0x08, 0xb3, 0xdc, 0x64, 0x71, 0x2e, 0x8b, 0xe4, 0xed, 0xa7, 0x8f, 0x6f, 0xde, 0x81,
	0xf9, 0x26, 0xd5, 0xd7, 0xa4, 0xfd, 0x4e, 0x77, 0x35, 0x7b, 0xb2, 0x6b, 0x2f, 0x84, 0xd9, 0xaf,
	0x41, 0x67, 0x7d, 0xfb, 0x6f, 0x5f, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x79, 0x2c, 0x09,
	0x32, 0x02, 0x00, 0x00,
}

func (m *Mailbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mailbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mailbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Tree != nil {
		{
			size, err := m.Tree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMailbox(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageReceived != 0 {
		i = encodeVarintMailbox(dAtA, i, uint64(m.MessageReceived))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageSent != 0 {
		i = encodeVarintMailbox(dAtA, i, uint64(m.MessageSent))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ism) > 0 {
		i -= len(m.Ism)
		copy(dAtA[i:], m.Ism)
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.Ism)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MailboxMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailboxMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailboxMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Received {
		i--
		if m.Received {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MessageId != 0 {
		i = encodeVarintMailbox(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MailboxId) > 0 {
		i -= len(m.MailboxId)
		copy(dAtA[i:], m.MailboxId)
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.MailboxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintMailbox(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Branch) > 0 {
		for iNdEx := len(m.Branch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Branch[iNdEx])
			copy(dAtA[i:], m.Branch[iNdEx])
			i = encodeVarintMailbox(dAtA, i, uint64(len(m.Branch[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMailbox(dAtA []byte, offset int, v uint64) int {
	offset -= sovMailbox(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mailbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	l = len(m.Ism)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	if m.MessageSent != 0 {
		n += 1 + sovMailbox(uint64(m.MessageSent))
	}
	if m.MessageReceived != 0 {
		n += 1 + sovMailbox(uint64(m.MessageReceived))
	}
	if m.Tree != nil {
		l = m.Tree.Size()
		n += 1 + l + sovMailbox(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	return n
}

func (m *MailboxMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MailboxId)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovMailbox(uint64(m.MessageId))
	}
	if m.Received {
		n += 2
	}
	return n
}

func (m *Tree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Branch) > 0 {
		for _, b := range m.Branch {
			l = len(b)
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovMailbox(uint64(m.Count))
	}
	return n
}

func sovMailbox(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMailbox(x uint64) (n int) {
	return sovMailbox(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mailbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mailbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mailbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailbox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ism", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailbox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ism = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSent", wireType)
			}
			m.MessageSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReceived", wireType)
			}
			m.MessageReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageReceived |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMailbox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tree == nil {
				m.Tree = &Tree{}
			}
			if err := m.Tree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailbox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailboxMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailboxMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailboxMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailbox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailboxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Received", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Received = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMailbox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branch = append(m.Branch, make([]byte, postIndex-iNdEx))
			copy(m.Branch[len(m.Branch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMailbox(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMailbox
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMailbox
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMailbox
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMailbox        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMailbox          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMailbox = fmt.Errorf("proto: unexpected end of group")
)
