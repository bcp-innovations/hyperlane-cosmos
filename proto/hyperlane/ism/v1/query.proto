syntax = "proto3";
package hyperlane.ism.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/ism/types";

import "gogoproto/gogo.proto";
import "hyperlane/ism/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";

// Msg defines the module Msg service.
service Query {
  rpc Isms(QueryIsmsRequest) returns (QueryIsmsResponse) {
    option (google.api.http).get = "/hyperlane/v1/isms";
  }

// Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hyperlane/v1/params";
  }

  rpc VerifyDryRun(QueryVerifyDryRunRequest) returns (QueryVerifyDryRunResponse) {
    option (google.api.http).get = "/hyperlane/v1/verify_dry_run/{ism_id}/{message}/{metadata}";
  }
}

message QueryIsmsRequest {}

message QueryIsmsResponse {
  repeated Ism isms = 1
  [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message QueryVerifyDryRunRequest {
  string ism_id = 1;
  string message = 2;
  string metadata = 3;
}

message QueryVerifyDryRunResponse {
  bool verified = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
