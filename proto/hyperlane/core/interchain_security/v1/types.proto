syntax = "proto3";
package hyperlane.core.interchain_security.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/_interchain_security/types";

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// MerkleRootMultiSigISM ...
message MerkleRootMultiSigISM {
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) =
      "hyperlane.core.v1._interchain_security."
      "HyperlaneInterchainSecurityModule";

  // XXX ...
  uint64 id = 1;

  // owner ...
  string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // validators
  // these are 20 byte long ethereum style addresses
  repeated string validators = 3;

  // threshold ...
  uint32 threshold = 4;
}

// NoopISM ...
message NoopISM {
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) =
      "hyperlane.core.v1._interchain_security."
      "HyperlaneInterchainSecurityModule";

  // id ...
  uint64 id = 1;

  // owner ...
  string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// StorageLocation ...
message StorageLocation {
  option (gogoproto.goproto_getters) = false;

  // address ...
  string location = 1;

  // id ...
  uint64 id = 2;
}