syntax = "proto3";
package hyperlane.core.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/types";

import "cosmos/base/query/v1beta1/pagination.proto";
import "hyperlane/core/v1/types.proto";
import "google/api/annotations.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Msg defines the module Msg service.
service Query {
  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hyperlane/v1/params";
  }

  // Mailboxes ...
  rpc Mailboxes(QueryMailboxesRequest) returns (QueryMailboxesResponse) {
    option (google.api.http).get = "/hyperlane/v1/mailboxes";
  }

  // Mailbox ...
  rpc Mailbox(QueryMailboxRequest) returns (QueryMailboxResponse) {
    option (google.api.http).get = "/hyperlane/v1/mailboxes/{id}";
  }

  // Count ...
  rpc Count(QueryCountRequest) returns (QueryCountResponse) {
    option (google.api.http).get = "/hyperlane/v1/mailboxes/{id}/tree/count";
  }

  // Root ...
  rpc Root(QueryRootRequest) returns (QueryRootResponse) {
    option (google.api.http).get = "/hyperlane/v1/mailboxes/{id}/tree/root";
  }

  // LatestCheckpoint ...
  rpc LatestCheckpoint(QueryLatestCheckpointRequest)
      returns (QueryLatestCheckpointResponse) {
    option (google.api.http).get =
        "/hyperlane/v1/mailboxes/{id}/tree/latest_checkpoint";
  }

  // Delivered ...
  rpc Delivered(QueryDeliveredRequest) returns (QueryDeliveredResponse) {
    option (google.api.http).get = "/hyperlane/v1/delivered/{message_id}";
  }

  // RecipientIsm ...
  rpc RecipientIsm(RecipientIsmRequest) returns (RecipientIsmResponse) {
    option (google.api.http).get = "/hyperlane/v1/recipient_ism/{recipient}";
  }

  // TODO: Remove
  // Validators ...
  rpc Validators(QueryValidatorsRequest) returns (QueryValidatorsResponse) {
    option (google.api.http).get = "/hyperlane/v1/validators";
  }

  // TODO: Remove
  // AnnouncedStorageLocations ...
  rpc AnnouncedStorageLocations(QueryAnnouncedStorageLocationsRequest)
      returns (QueryAnnouncedStorageLocationsResponse) {
    option (google.api.http).get =
        "/hyperlane/v1/announced_storage_locations/{validator_address}";
  }

  // TODO: Remove
  // LatestAnnouncedStorageLocation ...
  rpc LatestAnnouncedStorageLocation(QueryLatestAnnouncedStorageLocationRequest)
      returns (QueryLatestAnnouncedStorageLocationResponse) {
    option (google.api.http).get =
        "/hyperlane/v1/announced_storage_locations/{validator_address}/latest";
  }

  // Igps ...
  rpc Igps(QueryIgpsRequest) returns (QueryIgpsResponse) {
    option (google.api.http).get = "/hyperlane/v1/igps";
  }

  // Igp ...
  rpc Igp(QueryIgpRequest) returns (QueryIgpResponse) {
    option (google.api.http).get = "/hyperlane/v1/igps/{id}";
  }

  // DestinationGasConfigs ...
  rpc DestinationGasConfigs(QueryDestinationGasConfigsRequest)
      returns (QueryDestinationGasConfigsResponse) {
    option (google.api.http).get =
        "/hyperlane/v1/igps/{id}/destination_gas_configs";
  }

  // QuoteGasPayment ...
  rpc QuoteGasPayment(QueryQuoteGasPaymentRequest)
      returns (QueryQuoteGasPaymentResponse) {
    option (google.api.http).get = "/hyperlane/v1/quote_gas_payment";
  }

  // VerifyDryRun ...
  rpc VerifyDryRun(QueryVerifyDryRunRequest)
      returns (QueryVerifyDryRunResponse) {
    option (google.api.http).get = "/hyperlane/v1/verify_dry_run";
  }
}

// QueryMailboxesRequest ...
message QueryMailboxesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryMailboxesResponse ...
message QueryMailboxesResponse {
  repeated Mailbox mailboxes = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryMailboxRequest ...
message QueryMailboxRequest { string id = 1; }

// QueryMailboxResponse ...
message QueryMailboxResponse {
  Mailbox mailbox = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryCountRequest ...
message QueryCountRequest { string id = 1; }

// QueryCountResponse ...
message QueryCountResponse { uint32 count = 1; }

// QueryRootRequest ...
message QueryRootRequest { string id = 1; }

// QueryRootResponse ...
message QueryRootResponse { bytes root = 1; }

// QueryDeliveredRequest ...
message QueryDeliveredRequest { string message_id = 1; }

// QueryDeliveredResponse ...
message QueryDeliveredResponse { bool delivered = 1; }

// QueryLatestCheckpointRequest ...
message QueryLatestCheckpointRequest { string id = 1; }

// QueryLatestCheckpointResponse ...
message QueryLatestCheckpointResponse {
  bytes root = 1;
  uint32 count = 2;
}

// RecipientIsmRequest ...
message RecipientIsmRequest { string recipient = 1; }

// RecipientIsmResponse ...
message RecipientIsmResponse { string ism_id = 1; }

// TODO: Remove
// QueryValidatorsRequest ...
message QueryValidatorsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryValidatorsResponse ...
message QueryValidatorsResponse {
  repeated Validator validators = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// TODO: Remove
// QueryAnnouncedStorageLocationsRequest ...
message QueryAnnouncedStorageLocationsRequest { string validator_address = 1; }

// QueryAnnouncedStorageLocationsResponse ...
message QueryAnnouncedStorageLocationsResponse {
  repeated StorageLocation storage_locations = 1;
}

// TODO: Remove
// QueryAnnouncedStorageLocationsRequest ...
message QueryLatestAnnouncedStorageLocationRequest {
  string validator_address = 1;
}

// QueryAnnouncedStorageLocationsResponse ...
message QueryLatestAnnouncedStorageLocationResponse {
  string storage_location = 1;
}

// QueryIgpsRequest ...
message QueryIgpsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryIgpsResponse ...
message QueryIgpsResponse {
  repeated Igp igps = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryIgpRequest ...
message QueryIgpRequest { string id = 1; }

// QueryIgpResponse ...
message QueryIgpResponse {
  Igp igp = 1 [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryDestinationGasConfigsRequest ...
message QueryDestinationGasConfigsRequest { string id = 1; }

// QueryDestinationGasConfigsResponse ...
message QueryDestinationGasConfigsResponse {
  // TODO support pagination
  repeated DestinationGasConfig destination_gas_configs = 1;
}

// QueryQuoteGasPaymentRequest ...
message QueryQuoteGasPaymentRequest {
  string igp_id = 1;
  string destination_domain = 2;
  string gas_limit = 3;
}

// QueryQuoteGasPaymentResponse ...
message QueryQuoteGasPaymentResponse { string gas_payment = 1; }

// QueryVerifyDryRunRequest ...
message QueryVerifyDryRunRequest {
  string ism_id = 1;
  string message = 2;
  string metadata = 3;
}

// QueryVerifyDryRunResponse ...
message QueryVerifyDryRunResponse { bool verified = 1; }

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
