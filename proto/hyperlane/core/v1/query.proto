syntax = "proto3";
package hyperlane.core.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/types";

import "cosmos/base/query/v1beta1/pagination.proto";
import "hyperlane/core/v1/types.proto";
import "google/api/annotations.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Msg defines the module Msg service.
service Query {
  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hyperlane/v1/params";
  }

  // Mailboxes ...
  rpc Mailboxes(QueryMailboxesRequest) returns (QueryMailboxesResponse) {
    option (google.api.http).get = "/hyperlane/v1/mailboxes";
  }

  // Mailbox ...
  rpc Mailbox(QueryMailboxRequest) returns (QueryMailboxResponse) {
    option (google.api.http).get = "/hyperlane/v1/mailboxes/{id}";
  }

  // Delivered ... TODO: must be per mailbox
  rpc Delivered(QueryDeliveredRequest) returns (QueryDeliveredResponse) {
    option (google.api.http).get = "/hyperlane/v1/delivered/{message_id}";
  }

  // RecipientIsm ...
  rpc RecipientIsm(RecipientIsmRequest) returns (RecipientIsmResponse) {
    option (google.api.http).get = "/hyperlane/v1/recipient_ism/{recipient}";
  }

  // VerifyDryRun ...
  rpc VerifyDryRun(QueryVerifyDryRunRequest)
      returns (QueryVerifyDryRunResponse) {
    option (google.api.http).get = "/hyperlane/v1/verify_dry_run";
  }
}

// QueryMailboxesRequest ...
message QueryMailboxesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryMailboxesResponse ...
message QueryMailboxesResponse {
  repeated Mailbox mailboxes = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryMailboxRequest ...
message QueryMailboxRequest { string id = 1; }

// QueryMailboxResponse ...
message QueryMailboxResponse {
  Mailbox mailbox = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryDeliveredRequest ...
message QueryDeliveredRequest { string message_id = 1; }

// QueryDeliveredResponse ...
message QueryDeliveredResponse { bool delivered = 1; }

// RecipientIsmRequest ...
message RecipientIsmRequest { string recipient = 1; }

// RecipientIsmResponse ...
message RecipientIsmResponse { string ism_id = 1; }

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryVerifyDryRunRequest ...
message QueryVerifyDryRunRequest {
  string ism_id = 1;
  string message = 2;
  string metadata = 3;
}

// QueryVerifyDryRunResponse ...
message QueryVerifyDryRunResponse { bool verified = 1; }
