syntax = "proto3";
package hyperlane.core.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "hyperlane/core/v1/types.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateMailbox ...
  rpc CreateMailbox(MsgCreateMailbox) returns (MsgCreateMailboxResponse);

  // SetMailbox ...
  rpc SetMailbox(MsgSetMailbox) returns (MsgSetMailboxResponse);

  // DispatchMessage ...
  rpc DispatchMessage(MsgDispatchMessage) returns (MsgDispatchMessageResponse);

  // ProcessMessage ...
  rpc ProcessMessage(MsgProcessMessage) returns (MsgProcessMessageResponse);

  // UpdateParams updates the module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateMailbox ...
message MsgCreateMailbox {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/MsgCreateMailbox";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // default_ism ...
  string default_ism = 2;

  // default_hook ...
  string default_hook = 3;

  // required_hook ...
  string required_hook = 4;
}

// MsgCreateMailboxResponse ...
message MsgCreateMailboxResponse { string id = 1; }

// MsgSetMailbox ...
message MsgSetMailbox {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/MsgSetMailbox";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // mailbox_id
  string mailbox_id = 2;

  // default_ism ...
  string default_ism = 3;

  // default_hook ...
  string default_hook = 4;

  // required_hook ...
  string required_hook = 5;

  // new_owner ...
  string new_owner = 6;
}

// MsgSetMailboxResponse ...
message MsgSetMailboxResponse {}

// MsgDispatchMessage ...
message MsgDispatchMessage {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/MsgDispatchMessage";

  // mailbox_id ...
  string mailbox_id = 1;

  // sender ...
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // destination ...
  uint32 destination = 3;

  // recipient ...
  string recipient = 4;

  // body ...
  string body = 5;

  // igp_id ...
  string custom_igp = 6;

  // gas_limit ...
  string gas_limit = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  cosmos.base.v1beta1.Coin max_fee = 8
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgDispatchMessageResponse ...
message MsgDispatchMessageResponse { string message_id = 1; }

// MsgProcessMessage ...
message MsgProcessMessage {
  option (cosmos.msg.v1.signer) = "relayer";
  option (amino.name) = "hyperlane/MsgProcessMessage";

  // mailbox_id ...
  string mailbox_id = 1;

  // relayer ...
  string relayer = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // metadata ...
  string metadata = 3;

  // message ...
  string message = 4;
}

// MsgProcessMessageResponse ...
message MsgProcessMessageResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "hyperlane/MsgUpdateParams";

  // authority is the address that controls the module
  // NOTE: Defaults to the governance module unless overwritten.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
