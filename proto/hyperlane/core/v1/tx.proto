syntax = "proto3";
package hyperlane.core.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "hyperlane/core/v1/types.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateMailbox ...
  rpc CreateMailbox(MsgCreateMailbox) returns (MsgCreateMailboxResponse);

  // DispatchMessage ...
  rpc DispatchMessage(MsgDispatchMessage) returns (MsgDispatchMessageResponse);

  // ProcessMessage ...
  rpc ProcessMessage(MsgProcessMessage) returns (MsgProcessMessageResponse);

  // TODO: Remove
  // AnnounceValidator ...
  rpc AnnounceValidator(MsgAnnounceValidator)
      returns (MsgAnnounceValidatorResponse);

  // CreateIgp ...
  rpc CreateIgp(MsgCreateIgp) returns (MsgCreateIgpResponse);

  // SetDestinationGasConfig ...
  rpc SetDestinationGasConfig(MsgSetDestinationGasConfig)
      returns (MsgSetDestinationGasConfigResponse);

  // PayForGas ...
  rpc PayForGas(MsgPayForGas) returns (MsgPayForGasResponse);

  // Claim ...
  rpc Claim(MsgClaim) returns (MsgClaimResponse);

  // TODO: Remove
  // CreateMultisigIsm ...
  rpc CreateMultisigIsm(MsgCreateMultisigIsm)
      returns (MsgCreateMultisigIsmResponse);

  // TODO: Remove
  // CreateNoopIsm ...
  rpc CreateNoopIsm(MsgCreateNoopIsm) returns (MsgCreateNoopIsmResponse);

  // UpdateParams updates the module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateMailbox ...
message MsgCreateMailbox {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "hyperlane/MsgCreateMailbox";

  // sender is the message sender.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // default_ism ...
  string default_ism = 2;

  // igp ...
  InterchainGasPaymaster igp = 3;
}

// MsgCreateMailboxResponse ...
message MsgCreateMailboxResponse { string id = 1; }

// MsgDispatchMessage ...
message MsgDispatchMessage {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/MsgDispatchMessage";

  // mailbox_id ...
  string mailbox_id = 1;

  // sender ...
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // destination ...
  uint32 destination = 3;

  // recipient ...
  string recipient = 4;

  // body ...
  string body = 5;

  // igp_id ...
  string igp_id = 6;

  // gas_limit ...
  string gas_limit = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // max_fee ...
  string max_fee = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgDispatchMessageResponse ...
message MsgDispatchMessageResponse { string message_id = 1; }

// MsgProcessMessage ...
message MsgProcessMessage {
  option (cosmos.msg.v1.signer) = "relayer";
  option (amino.name) = "hyperlane/MsgProcessMessage";

  // mailbox_id ...
  string mailbox_id = 1;

  // relayer ...
  string relayer = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // metadata ...
  string metadata = 3;

  // message ...
  string message = 4;
}

// MsgProcessMessageResponse ...
message MsgProcessMessageResponse {}

// TODO: Remove
// MsgAnnounceValidator ...
message MsgAnnounceValidator {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "hyperlane/MsgAnnounceValidator";

  // validator ...
  string validator = 1;

  // storage_location ...
  string storage_location = 2;

  // signature ...
  string signature = 3;

  // mailbox_id ...
  string mailbox_id = 4;

  // creator ...
  string creator = 5;
}

// TODO: Remove
// MsgAnnounceValidatorResponse ...
message MsgAnnounceValidatorResponse {}

// MsgCreateIgp ...
message MsgCreateIgp {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/MsgCreateIGP";

  // owner ...
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // denom ...
  string denom = 2;
}

// MsgCreateIgpResponse ...
message MsgCreateIgpResponse { string id = 1; }

// MsgSetDestinationGasConfig ...
message MsgSetDestinationGasConfig {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/MsgSetDestinationGasConfig";

  // owner ...
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // igp_id ...
  string igp_id = 2;

  // destination_gas_config ...
  DestinationGasConfig destination_gas_config = 3;
}

// MsgSetDestinationGasConfigResponse ...
message MsgSetDestinationGasConfigResponse {}

// MsgPayForGas ...
message MsgPayForGas {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/MsgPayForGas";

  // sender ...
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // igp_id ...
  string igp_id = 2;

  // message_id ...
  string message_id = 3;

  // destination_domain ...
  uint32 destination_domain = 4;

  // gas_limit ...
  string gas_limit = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // amount ...
  string amount = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgPayForGasResponse ...
message MsgPayForGasResponse {}

// MsgClaim ...
message MsgClaim {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/MsgClaim";

  // sender ...
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // igp_id ...
  string igp_id = 2;
}

// MsgClaimResponse ...
message MsgClaimResponse {}

// MsgCreateMultisigIsm ...
message MsgCreateMultisigIsm {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "hyperlane/MsgCreateMultiSigIsm";

  // creator is the message sender.
  string creator = 1;

  // multi_sig ...
  MultiSigIsm multi_sig = 2;
}

// MsgCreateMultisigIsmResponse ...
message MsgCreateMultisigIsmResponse { string id = 1; }

// MsgCreateNoopIsm ...
message MsgCreateNoopIsm {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "hyperlane/MsgCreateNoopIsm";

  // creator is the message sender.
  string creator = 1;
}

// MsgCreateNoopIsmResponse ...
message MsgCreateNoopIsmResponse { string id = 1; }

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "hyperlane/MsgUpdateParams";

  // authority is the address that controls the module
  // NOTE: Defaults to the governance module unless overwritten.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
