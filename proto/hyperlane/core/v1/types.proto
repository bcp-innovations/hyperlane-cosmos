syntax = "proto3";
package hyperlane.core.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/types";

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";

message Mailbox {
  string id = 1;
  string creator = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  uint32 message_sent = 3;
  uint32 message_received = 4;

  string default_ism = 5;

  InterchainGasPaymaster igp = 6;

  Tree tree = 7;
}

// Tree represents an incremental merkle tree.
// Contains current branch and the number of inserted leaves in the tree.
message Tree {
  repeated bytes branch = 1;
  uint32 count = 2;
}

message InterchainGasPaymaster {
  string id = 1;
  bool required = 2;
}

message Validator {
  option (gogoproto.goproto_getters) = false;

  string address = 1;
  repeated string storageLocations = 2;
}

// Params defines the parameters of the module.
message Params {
  option (amino.name) = "hyperlane/mailbox/Params";

  uint32 domain = 1;
}

// IGP
message Igp {
  string id = 1;
  string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string denom = 3;
  string claimable_fees = 4 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];;
}

message DestinationGasConfig {
  uint32 remote_domain = 1;
  GasOracle gas_oracle = 2;

  string gas_overhead = 3 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];;
}

message GasOracle {
  string token_exchange_rate = 1 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];;
  string gas_price = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];;
}

// ISM
message Ism {
  option (gogoproto.goproto_getters) = false;

  string id = 1;
  uint32 ism_type = 2;
  string creator = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  oneof ism {
    MultiSigIsm multi_sig = 4;
    NoopIsm noop = 5;
  }
}

message MultiSigIsm {
  repeated string validator_pub_keys = 1;
  uint32 threshold = 2;
}

message NoopIsm {
  // No fields needed for Noop
}

// GenesisState is the state that must be provided at genesis.
message GenesisState {
  // params defines all the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  // TODO add mailbox state
}
