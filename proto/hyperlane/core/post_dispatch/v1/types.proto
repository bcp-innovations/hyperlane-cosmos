syntax = "proto3";
package hyperlane.core.post_dispatch.v1;

option go_package = "github.com/bcp-innovations/hyperlane-cosmos/x/core/_post_dispatch/types";

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// InterchainGasPaymaster ...
message InterchainGasPaymaster {

  // id ...
  uint64 id = 1;

  // owner ...
  string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // denom ...
  string denom = 3;

  // claimable_fees ...
  string claimable_fees = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// DestinationGasConfig ...
message DestinationGasConfig {

  // remote_domain ...
  uint32 remote_domain = 1;

  // gas_oracle ...
  GasOracle gas_oracle = 2;

  // gas_overhead ...
  string gas_overhead = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  ;
}

// GasOracle ...
message GasOracle {

  // token_exchange_rate ...
  string token_exchange_rate = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // gas_price ...
  string gas_price = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MerkleTreeHook ...
message MerkleTreeHook {

  // id ...
  uint64 id = 1;

  // owner ...
  string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // tree ...
  Tree tree = 3;
}

// Tree represents an incremental merkle tree.
// Contains current branch and the number of inserted leaves in the tree.
message Tree {

  // branch ...
  repeated bytes branch = 1;

  // count ...
  uint32 count = 2;
}