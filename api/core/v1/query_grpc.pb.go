// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hyperlane/core/v1/query.proto

package corev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                    = "/hyperlane.core.v1.Query/Params"
	Query_Mailboxes_FullMethodName                 = "/hyperlane.core.v1.Query/Mailboxes"
	Query_Mailbox_FullMethodName                   = "/hyperlane.core.v1.Query/Mailbox"
	Query_Count_FullMethodName                     = "/hyperlane.core.v1.Query/Count"
	Query_Root_FullMethodName                      = "/hyperlane.core.v1.Query/Root"
	Query_LatestCheckpoint_FullMethodName          = "/hyperlane.core.v1.Query/LatestCheckpoint"
	Query_Delivered_FullMethodName                 = "/hyperlane.core.v1.Query/Delivered"
	Query_RecipientIsm_FullMethodName              = "/hyperlane.core.v1.Query/RecipientIsm"
	Query_Validators_FullMethodName                = "/hyperlane.core.v1.Query/Validators"
	Query_AnnouncedStorageLocations_FullMethodName = "/hyperlane.core.v1.Query/AnnouncedStorageLocations"
	Query_Igps_FullMethodName                      = "/hyperlane.core.v1.Query/Igps"
	Query_Igp_FullMethodName                       = "/hyperlane.core.v1.Query/Igp"
	Query_DestinationGasConfigs_FullMethodName     = "/hyperlane.core.v1.Query/DestinationGasConfigs"
	Query_QuoteGasPayment_FullMethodName           = "/hyperlane.core.v1.Query/QuoteGasPayment"
	Query_Isms_FullMethodName                      = "/hyperlane.core.v1.Query/Isms"
	Query_Ism_FullMethodName                       = "/hyperlane.core.v1.Query/Ism"
	Query_VerifyDryRun_FullMethodName              = "/hyperlane.core.v1.Query/VerifyDryRun"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Mailboxes ...
	Mailboxes(ctx context.Context, in *QueryMailboxesRequest, opts ...grpc.CallOption) (*QueryMailboxesResponse, error)
	// Mailbox ...
	Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error)
	// Count ...
	Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error)
	// Root ...
	Root(ctx context.Context, in *QueryRootRequest, opts ...grpc.CallOption) (*QueryRootResponse, error)
	// LatestCheckpoint ...
	LatestCheckpoint(ctx context.Context, in *QueryLatestCheckpointRequest, opts ...grpc.CallOption) (*QueryLatestCheckpointResponse, error)
	// Delivered ...
	Delivered(ctx context.Context, in *QueryDeliveredRequest, opts ...grpc.CallOption) (*QueryDeliveredResponse, error)
	// RecipientIsm ...
	RecipientIsm(ctx context.Context, in *RecipientIsmRequest, opts ...grpc.CallOption) (*RecipientIsmResponse, error)
	// Validators ...
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// AnnouncedStorageLocations ...
	AnnouncedStorageLocations(ctx context.Context, in *QueryAnnouncedStorageLocationsRequest, opts ...grpc.CallOption) (*QueryAnnouncedStorageLocationsResponse, error)
	// Igps ...
	Igps(ctx context.Context, in *QueryIgpsRequest, opts ...grpc.CallOption) (*QueryIgpsResponse, error)
	// Igp ...
	Igp(ctx context.Context, in *QueryIgpRequest, opts ...grpc.CallOption) (*QueryIgpResponse, error)
	// DestinationGasConfigs ...
	DestinationGasConfigs(ctx context.Context, in *QueryDestinationGasConfigsRequest, opts ...grpc.CallOption) (*QueryDestinationGasConfigsResponse, error)
	// QuoteGasPayment ...
	QuoteGasPayment(ctx context.Context, in *QueryQuoteGasPaymentRequest, opts ...grpc.CallOption) (*QueryQuoteGasPaymentResponse, error)
	// Isms ...
	Isms(ctx context.Context, in *QueryIsmsRequest, opts ...grpc.CallOption) (*QueryIsmsResponse, error)
	// Ism ...
	Ism(ctx context.Context, in *QueryIsmRequest, opts ...grpc.CallOption) (*QueryIsmResponse, error)
	// VerifyDryRun ...
	VerifyDryRun(ctx context.Context, in *QueryVerifyDryRunRequest, opts ...grpc.CallOption) (*QueryVerifyDryRunResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mailboxes(ctx context.Context, in *QueryMailboxesRequest, opts ...grpc.CallOption) (*QueryMailboxesResponse, error) {
	out := new(QueryMailboxesResponse)
	err := c.cc.Invoke(ctx, Query_Mailboxes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error) {
	out := new(QueryMailboxResponse)
	err := c.cc.Invoke(ctx, Query_Mailbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error) {
	out := new(QueryCountResponse)
	err := c.cc.Invoke(ctx, Query_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Root(ctx context.Context, in *QueryRootRequest, opts ...grpc.CallOption) (*QueryRootResponse, error) {
	out := new(QueryRootResponse)
	err := c.cc.Invoke(ctx, Query_Root_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestCheckpoint(ctx context.Context, in *QueryLatestCheckpointRequest, opts ...grpc.CallOption) (*QueryLatestCheckpointResponse, error) {
	out := new(QueryLatestCheckpointResponse)
	err := c.cc.Invoke(ctx, Query_LatestCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Delivered(ctx context.Context, in *QueryDeliveredRequest, opts ...grpc.CallOption) (*QueryDeliveredResponse, error) {
	out := new(QueryDeliveredResponse)
	err := c.cc.Invoke(ctx, Query_Delivered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecipientIsm(ctx context.Context, in *RecipientIsmRequest, opts ...grpc.CallOption) (*RecipientIsmResponse, error) {
	out := new(RecipientIsmResponse)
	err := c.cc.Invoke(ctx, Query_RecipientIsm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, Query_Validators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AnnouncedStorageLocations(ctx context.Context, in *QueryAnnouncedStorageLocationsRequest, opts ...grpc.CallOption) (*QueryAnnouncedStorageLocationsResponse, error) {
	out := new(QueryAnnouncedStorageLocationsResponse)
	err := c.cc.Invoke(ctx, Query_AnnouncedStorageLocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Igps(ctx context.Context, in *QueryIgpsRequest, opts ...grpc.CallOption) (*QueryIgpsResponse, error) {
	out := new(QueryIgpsResponse)
	err := c.cc.Invoke(ctx, Query_Igps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Igp(ctx context.Context, in *QueryIgpRequest, opts ...grpc.CallOption) (*QueryIgpResponse, error) {
	out := new(QueryIgpResponse)
	err := c.cc.Invoke(ctx, Query_Igp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DestinationGasConfigs(ctx context.Context, in *QueryDestinationGasConfigsRequest, opts ...grpc.CallOption) (*QueryDestinationGasConfigsResponse, error) {
	out := new(QueryDestinationGasConfigsResponse)
	err := c.cc.Invoke(ctx, Query_DestinationGasConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteGasPayment(ctx context.Context, in *QueryQuoteGasPaymentRequest, opts ...grpc.CallOption) (*QueryQuoteGasPaymentResponse, error) {
	out := new(QueryQuoteGasPaymentResponse)
	err := c.cc.Invoke(ctx, Query_QuoteGasPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Isms(ctx context.Context, in *QueryIsmsRequest, opts ...grpc.CallOption) (*QueryIsmsResponse, error) {
	out := new(QueryIsmsResponse)
	err := c.cc.Invoke(ctx, Query_Isms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ism(ctx context.Context, in *QueryIsmRequest, opts ...grpc.CallOption) (*QueryIsmResponse, error) {
	out := new(QueryIsmResponse)
	err := c.cc.Invoke(ctx, Query_Ism_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyDryRun(ctx context.Context, in *QueryVerifyDryRunRequest, opts ...grpc.CallOption) (*QueryVerifyDryRunResponse, error) {
	out := new(QueryVerifyDryRunResponse)
	err := c.cc.Invoke(ctx, Query_VerifyDryRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Mailboxes ...
	Mailboxes(context.Context, *QueryMailboxesRequest) (*QueryMailboxesResponse, error)
	// Mailbox ...
	Mailbox(context.Context, *QueryMailboxRequest) (*QueryMailboxResponse, error)
	// Count ...
	Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error)
	// Root ...
	Root(context.Context, *QueryRootRequest) (*QueryRootResponse, error)
	// LatestCheckpoint ...
	LatestCheckpoint(context.Context, *QueryLatestCheckpointRequest) (*QueryLatestCheckpointResponse, error)
	// Delivered ...
	Delivered(context.Context, *QueryDeliveredRequest) (*QueryDeliveredResponse, error)
	// RecipientIsm ...
	RecipientIsm(context.Context, *RecipientIsmRequest) (*RecipientIsmResponse, error)
	// Validators ...
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// AnnouncedStorageLocations ...
	AnnouncedStorageLocations(context.Context, *QueryAnnouncedStorageLocationsRequest) (*QueryAnnouncedStorageLocationsResponse, error)
	// Igps ...
	Igps(context.Context, *QueryIgpsRequest) (*QueryIgpsResponse, error)
	// Igp ...
	Igp(context.Context, *QueryIgpRequest) (*QueryIgpResponse, error)
	// DestinationGasConfigs ...
	DestinationGasConfigs(context.Context, *QueryDestinationGasConfigsRequest) (*QueryDestinationGasConfigsResponse, error)
	// QuoteGasPayment ...
	QuoteGasPayment(context.Context, *QueryQuoteGasPaymentRequest) (*QueryQuoteGasPaymentResponse, error)
	// Isms ...
	Isms(context.Context, *QueryIsmsRequest) (*QueryIsmsResponse, error)
	// Ism ...
	Ism(context.Context, *QueryIsmRequest) (*QueryIsmResponse, error)
	// VerifyDryRun ...
	VerifyDryRun(context.Context, *QueryVerifyDryRunRequest) (*QueryVerifyDryRunResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Mailboxes(context.Context, *QueryMailboxesRequest) (*QueryMailboxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailboxes not implemented")
}
func (UnimplementedQueryServer) Mailbox(context.Context, *QueryMailboxRequest) (*QueryMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailbox not implemented")
}
func (UnimplementedQueryServer) Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedQueryServer) Root(context.Context, *QueryRootRequest) (*QueryRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Root not implemented")
}
func (UnimplementedQueryServer) LatestCheckpoint(context.Context, *QueryLatestCheckpointRequest) (*QueryLatestCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestCheckpoint not implemented")
}
func (UnimplementedQueryServer) Delivered(context.Context, *QueryDeliveredRequest) (*QueryDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delivered not implemented")
}
func (UnimplementedQueryServer) RecipientIsm(context.Context, *RecipientIsmRequest) (*RecipientIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipientIsm not implemented")
}
func (UnimplementedQueryServer) Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (UnimplementedQueryServer) AnnouncedStorageLocations(context.Context, *QueryAnnouncedStorageLocationsRequest) (*QueryAnnouncedStorageLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnouncedStorageLocations not implemented")
}
func (UnimplementedQueryServer) Igps(context.Context, *QueryIgpsRequest) (*QueryIgpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Igps not implemented")
}
func (UnimplementedQueryServer) Igp(context.Context, *QueryIgpRequest) (*QueryIgpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Igp not implemented")
}
func (UnimplementedQueryServer) DestinationGasConfigs(context.Context, *QueryDestinationGasConfigsRequest) (*QueryDestinationGasConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestinationGasConfigs not implemented")
}
func (UnimplementedQueryServer) QuoteGasPayment(context.Context, *QueryQuoteGasPaymentRequest) (*QueryQuoteGasPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteGasPayment not implemented")
}
func (UnimplementedQueryServer) Isms(context.Context, *QueryIsmsRequest) (*QueryIsmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Isms not implemented")
}
func (UnimplementedQueryServer) Ism(context.Context, *QueryIsmRequest) (*QueryIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ism not implemented")
}
func (UnimplementedQueryServer) VerifyDryRun(context.Context, *QueryVerifyDryRunRequest) (*QueryVerifyDryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDryRun not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mailboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Mailboxes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailboxes(ctx, req.(*QueryMailboxesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Mailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailbox(ctx, req.(*QueryMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Count(ctx, req.(*QueryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Root_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Root(ctx, req.(*QueryRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestCheckpoint(ctx, req.(*QueryLatestCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Delivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Delivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Delivered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Delivered(ctx, req.(*QueryDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecipientIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipientIsmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecipientIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RecipientIsm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecipientIsm(ctx, req.(*RecipientIsmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Validators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AnnouncedStorageLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnnouncedStorageLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AnnouncedStorageLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AnnouncedStorageLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AnnouncedStorageLocations(ctx, req.(*QueryAnnouncedStorageLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Igps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIgpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Igps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Igps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Igps(ctx, req.(*QueryIgpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Igp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Igp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Igp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Igp(ctx, req.(*QueryIgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DestinationGasConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDestinationGasConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DestinationGasConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DestinationGasConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DestinationGasConfigs(ctx, req.(*QueryDestinationGasConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteGasPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteGasPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteGasPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuoteGasPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteGasPayment(ctx, req.(*QueryQuoteGasPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Isms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Isms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Isms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Isms(ctx, req.(*QueryIsmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ism_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ism(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Ism_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ism(ctx, req.(*QueryIsmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyDryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyDryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyDryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VerifyDryRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyDryRun(ctx, req.(*QueryVerifyDryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.core.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Mailboxes",
			Handler:    _Query_Mailboxes_Handler,
		},
		{
			MethodName: "Mailbox",
			Handler:    _Query_Mailbox_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Query_Count_Handler,
		},
		{
			MethodName: "Root",
			Handler:    _Query_Root_Handler,
		},
		{
			MethodName: "LatestCheckpoint",
			Handler:    _Query_LatestCheckpoint_Handler,
		},
		{
			MethodName: "Delivered",
			Handler:    _Query_Delivered_Handler,
		},
		{
			MethodName: "RecipientIsm",
			Handler:    _Query_RecipientIsm_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "AnnouncedStorageLocations",
			Handler:    _Query_AnnouncedStorageLocations_Handler,
		},
		{
			MethodName: "Igps",
			Handler:    _Query_Igps_Handler,
		},
		{
			MethodName: "Igp",
			Handler:    _Query_Igp_Handler,
		},
		{
			MethodName: "DestinationGasConfigs",
			Handler:    _Query_DestinationGasConfigs_Handler,
		},
		{
			MethodName: "QuoteGasPayment",
			Handler:    _Query_QuoteGasPayment_Handler,
		},
		{
			MethodName: "Isms",
			Handler:    _Query_Isms_Handler,
		},
		{
			MethodName: "Ism",
			Handler:    _Query_Ism_Handler,
		},
		{
			MethodName: "VerifyDryRun",
			Handler:    _Query_VerifyDryRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/core/v1/query.proto",
}
